       CBL CICS('COBOL3')
      *****************************************************************
      *                                                               *
      * MODULE NAME = DFH0DLCC                                        *
      *                                                               *
      * DESCRIPTIVE NAME = Call DL/I Sample Program                   *
      *                                                               *
      *                                                               *
      *                                                               *
      *     Licensed Materials - Property of IBM                      *
      *                                                               *
      *     "Restricted Materials of IBM"                             *
      *                                                               *
      *     5655-Y04                                                  *
      *                                                               *
      *     (C) Copyright IBM Corp. 1990, 2004"                       *
      *                                                               *
      *                                                               *
      *                                                               *
      *                                                               *
      * STATUS = 7.2.0                                                *
      *                                                               *
      *---------------------------------------------------------------*
      *                                                               *
      *                  DATABASE  STRUCTURE                          *
      *                                                               *
      *                     *************                             *
      *                     *           *                             *
      *                     *  PARTROOT *                             *
      *                     *           *                             *
      *                     *************                             *
      *                           *                                   *
      *                           *                                   *
      *             *****************************                     *
      *             *                           *                     *
      *             *                           *                     *
      *             *                           *                     *
      *       *************               *************               *
      *       *           *               *           *               *
      *       *  STANINFO *               *  STOKSTAT *               *
      *       *           *               *           *               *
      *       *************               *************               *
      *                                         *                     *
      *                                         *                     *
      *                                         *                     *
      *                                  ***************              *
      *                                  *             *              *
      *                                  *             *              *
      *                            ************* *************        *
      *                            *           * *           *        *
      *                            *  CYCCOUNT * *  BACKORDR *        *
      *                            *           * *           *        *
      *                            ************* *************        *
      *                                                               *
      *                                                               *
      *---------------------------------------------------------------*
      *                                                               *
      * CHANGE ACTIVITY :                                             *
      *                                                               *
      *     $MOD(DFH0DLCC),COMP(SAMPLES),PROD(CICS TS ):              *
      *                                                               *
      *     PN= REASON REL YYMMDD HDXIII : REMARKS                    *
      *    $P0= .      320 900320        : Created.                   *
      *    $P1= M90474 330 910808 HDBWSH : Prologue Fixed.            *
      *    $P2= M91869 330 920211 HD9TMW : Remove use of STRING and   *
      *                                  : INSPECT                    *
      *    $P3= M12580 640 040112 HD2GJST: Remove old cobol references*
      *                                                               *
      *****************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. DFHDLCC.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  INSPECT-IND PIC X.
           88  NO-MORE  VALUE '1'.
       01  PCB  PIC XXXX VALUE IS 'PCB '.
       01  GU   PIC XXXX VALUE IS 'GU  '.
       01  GN   PIC XXXX VALUE IS 'GN  '.
       01  GHU  PIC XXXX VALUE IS 'GHU '.
       01  ISRT PIC XXXX VALUE IS 'ISRT'.
       01  REPL PIC XXXX VALUE IS 'REPL'.
       01  DLET PIC XXXX VALUE IS 'DLET'.
       01  TERM PIC XXXX VALUE IS 'TERM'.
       01  TWO     PIC  9(8) COMP VALUE IS  2.
       01  THREE   PIC  9(8) COMP VALUE IS  3.
       01  FOUR    PIC  9(8) COMP VALUE IS  4.
       01  FIVE    PIC  9(8) COMP VALUE IS  5.
       01  INMSGLEN PIC 9(4) COMP VALUE IS 80.
       01  MSGLEN80 PIC 9(4) COMP VALUE IS 80.
       01  HEAD1  PIC X(80) VALUE IS '   AREA  INV  PROJ  DIV    UNIT
      -        ' CURRENT    ON       IN      TOTAL  COUNT BACK'.
       01  HEAD2  PIC X(80) VALUE IS '        DEPT   CD          PRICE
      -        ' REQMTS    ORDER    STOCK  DISBURSE TAKEN ORDR'.
      *
      *        USER  WORK AREA - 350 BYTES -
      *
       01  USERTWA.
           02  PSBNAME PIC   X(8).
           02  SSA1.
               03  SSA1N1 PIC X(8).
               03  SSA1D1 PIC X.
               03  SSA1N2 PIC X(8).
               03  SSA1D2 PIC XX.
               03  SSA1KEY PIC X(17).
               03  SSA1D3 PIC X.
           02  SSA2.
               03  SSA2N1 PIC X(8).
               03  SSA2D1 PIC X.
               03  SSA2N2 PIC X(8).
               03  SSA2D2 PIC XX.
               03  SSA2KEY PIC X(16).
               03  SSA2D3 PIC X.
           02  SSA3.
               03  SSA3N1 PIC X(9).
      *
      *
      *
      *  THE FOLLOWING DESCRIPTION OF THE DATA BASE SEGMENTS
      *  ARE AS THEY ARE USED IN THIS PROGRAM
      *
      *
           02  SEGRETRN PIC X(160).
           02  SEGROOT REDEFINES SEGRETRN.
               03  SEGNO               PIC X(17).
               03  SEGF1               PIC X(9).
               03  SEGDESC             PIC X(20).
               03  SEGF1A              PIC X(104).
               03  FILLER              PIC X(10).
           02  SEGSTAT REDEFINES SEGROOT.
               03  SEGTYPE             PIC XX.
               03  SEGAREA             PIC X.
               03  SEGDEPT             PIC XX.
               03  SEGPROJ             PIC XXX.
               03  SEGDIV              PIC XX.
               03  SEGF2               PIC X(12).
               03  SEGPRICE            PIC 9(4)V999.
               03  SEGF3               PIC X(4).
               03  SEGUNIT             PIC XXXX.
               03  SEGF4               PIC X(37).
               03  SEGCOUNT            PIC XXX.
               03  SEGF5               PIC X(12).
               03  SEGCREQ             PIC S9(8).
               03  SEGFREQ             PIC S9(8).
               03  SEGORDER            PIC S9(8).
               03  SEGSTOCK            PIC S9(8).
               03  SEGPDISB            PIC S9(8).
               03  SEGUDISB            PIC S9(8).
               03  SEGF5A              PIC X(13).
               03  FILLER              PIC X(10).
           02  SEGINFO REDEFINES SEGSTAT.
               03  SEGCODE             PIC XX.
               03  SEGF6               PIC X(16).
               03  SEGPCODE            PIC XX.
               03  SEGDCODE            PIC X.
               03  SEGF7               PIC X(64).
               03  FILLER              PIC X(75).
       01  INREC.
           02  INPUTFLD.
               03  TRAN PIC X(4).
               03  TCODE PIC X(3).
               03  PARTNBR PIC X(17).
               03  DESC PIC X(20).
               03  INVKEY PIC X(16).
               03  PROC PIC XX.
               03  DISB PIC X.
               03  QUANT PIC XXXX.
               03  FILLER1 PIC X(13).
           02  STOCKCNT PIC  S99 USAGE IS COMP.
           02  WORK1 PIC  S9(8) USAGE COMP-3.
           02  WORK2 PIC  S9(8) USAGE COMP-3.
       01  OUTREC.
           02  MSG PIC X(80).
           02  DSPALLI-LINE-ONE REDEFINES MSG.
               03  L1-F1               PIC X(8).
               03  L1-F2               PIC X(18).
               03  L1-F3               PIC X(54).
           02  DSPALLI-LINE-TWO REDEFINES DSPALLI-LINE-ONE.
               03  L2-F1 USAGE DISPLAY PIC Z9.
               03  FILL10              PIC XXX.
               03  L2-F2               PIC X.
               03  FILL11              PIC XXX.
               03  L2-F3               PIC XX.
               03  FILL12              PIC XXX.
               03  L2-F4               PIC XXX.
               03  FILL13              PIC XXX.
               03  L2-F5               PIC XX.
               03  L2-F6 USAGE DISPLAY PIC  Z(6).999.
               03  L2-F7 USAGE DISPLAY PIC  ZZZZZZZ9-.
               03  L2-F8 USAGE DISPLAY PIC  ZZZZZZZ9-.
               03  L2-F9 USAGE DISPLAY PIC  ZZZZZZZ9-.
               03  L2-F10 USAGE DISPLAY PIC  ZZZZZZZZ9-.
               03  L2-F11              PIC X(6).
               03  L2-F12              PIC X(5).
           02  MSG-OUT REDEFINES DSPALLI-LINE-TWO.
               03  MSG-F1.
                   04  MSG-F1A.
                       05  MSG-F1A1    PIC X(4).
                       05  FILLER      PIC X.
                       05  MSG-F1A2    PIC X(3).
                       05  FILLER      PIC XX.
                   04  MSG-F1B.
                       05  MSG-F1B1    PIC X(20).
                       05  MSG-F1B2    PIC X(20).
                       05  MSG-F1B3    PIC X(30).
       01  TEMP-KEY1 PIC X(17).
       01  FILLER REDEFINES TEMP-KEY1.
           02  TEMP PIC X OCCURS 17 INDEXED BY TEMPI.
       01  FILLER REDEFINES TEMP-KEY1.
           02  TEMP-KEY2 PIC X(16).
           02  FILLER    PIC X.
      *
       LINKAGE SECTION.
      *
           COPY DLIUIB.
       01  OVERLAY-DLIUIB REDEFINES DLIUIB.
           02  PCBADDR USAGE IS POINTER.
           02  FILLER PIC XX.
       01  PCBADDR-LIST.
           02  PCBADDR-AREA  PIC X(40).
           02  PCBADDR-ITEM REDEFINES PCBADDR-AREA USAGE IS POINTER
                            OCCURS 10 TIMES.
      *
      * END OF SECTIONS

      *
       01  PCB1.
           02  DLIPCB.
               03  DLIFILE             PIC X(8).
               03  DLISGLEV            PIC XX.
               03  DLISTAT             PIC XX.
               03  DLIPROC             PIC XXXX.
               03  DLIRESV             PIC XXXX.
               03  DLISEGFB            PIC X(8).
      **********************************************************
      *                                                        *
      *                                                        *
      *        MAIN LINE LOGIC FOR DFH0DLCC                    *
      *                                                        *
      *                                                        *
      **********************************************************
       PROCEDURE DIVISION.
           MOVE MSGLEN80 TO INMSGLEN.
           EXEC CICS RECEIVE INTO(INREC) LENGTH(INMSGLEN) END-EXEC.
           MOVE SPACES TO MSG.
           PERFORM OUTRTN.
           MOVE ZERO TO STOCKCNT.
           MOVE 'PARTROOT(PARTKEY  =' TO SSA1.
           MOVE ')' TO SSA1D3.
           MOVE 'STOKSTAT(STOCKEY  =' TO SSA2.
           MOVE ')' TO SSA2D3.
           MOVE 'STOKSTAT ' TO SSA3.
           MOVE 'INPUT = ' TO MSG-F1A.
           MOVE INPUTFLD TO MSG-F1B.
           PERFORM OUTRTN.
             IF TCODE = 'DPA' THEN PERFORM DSPALLI GO TO MORE.
             IF TCODE = 'DPI' THEN PERFORM DSPINV  GO TO MORE.
             IF TCODE = 'ADD' THEN PERFORM ADDPART GO TO MORE.
             IF TCODE = 'DEL' THEN PERFORM DELPART GO TO MORE.
             IF TCODE = 'DSB' THEN PERFORM DSBURSE GO TO MORE.
      *
           MOVE TRAN  TO MSG-F1A1.
           MOVE TCODE TO MSG-F1A2.
           MOVE 'WRONG TRANCODE USED ' TO MSG-F1B1.
           PERFORM OUTRTN.
      *
       MORE.
           EXEC CICS RETURN END-EXEC.
           GOBACK.
      *
       SEARCH-KEY.
           SEARCH TEMP VARYING TEMPI
           AT END MOVE '1' TO INSPECT-IND
           WHEN TEMP(TEMPI) EQUAL TO LOW-VALUE MOVE SPACE TO TEMP(TEMPI)
           .
      *
       INSPECT-SSA1KEY.
           MOVE SSA1KEY TO TEMP-KEY1.
           MOVE SPACE TO INSPECT-IND.
           PERFORM SEARCH-KEY UNTIL NO-MORE.
           MOVE TEMP-KEY1 TO SSA1KEY.
      *
       INSPECT-SSA2KEY.
           MOVE SSA2KEY TO TEMP-KEY2.
           MOVE SPACE TO INSPECT-IND.
           PERFORM SEARCH-KEY UNTIL NO-MORE.
           MOVE TEMP-KEY2 TO SSA2KEY.
      *
      *        DISPLAY INVENTORY -- ALL LOCATIONS
      *
       DSPALLI SECTION.
           MOVE 'DFHSAM25' TO PSBNAME.
           PERFORM SCHED.
           MOVE PARTNBR TO SSA1KEY.
           PERFORM INSPECT-SSA1KEY.
           CALL 'CBLTDLI' USING FOUR, GU, DLIPCB, SEGRETRN, SSA1.
           PERFORM CALLRET.
           IF DLISTAT NOT = '  '
              THEN
              MOVE 'GU ERROR IN DSPALLI' TO MSG-F1
              PERFORM ABEND1.
           MOVE 'PART NO.=' TO MSG-F1A.
           MOVE PARTNBR TO MSG-F1B1.
           MOVE 'DESCRIPTION =' TO MSG-F1B2.
           MOVE SEGDESC TO MSG-F1B3.
           PERFORM OUTRTN.
           MOVE HEAD1 TO MSG.
           PERFORM OUTRTN.
           MOVE HEAD2 TO MSG.
           PERFORM OUTRTN.
       CONT1.
           CALL 'CBLTDLI' USING THREE, GN, DLIPCB, SEGRETRN.
           PERFORM CALLRET.
           IF DLISTAT = '  '
              THEN IF DLISEGFB = 'STANINFO'
                      THEN GO TO CONT1
                      ELSE NEXT SENTENCE
              ELSE IF DLISTAT NOT = 'GK'
                      THEN GO TO STKERR.
           IF DLISEGFB = 'STOKSTAT'
              THEN GO TO STOKSTAT.
       STKERR.
           PERFORM TERMSCD.
           MOVE 'NO INVENTORY FOR THIS PART' TO MSG.
           PERFORM OUTRTN.
           GO TO ENDDSPALLI.
       STOKSTAT.
           ADD 1 TO STOCKCNT.
           MOVE STOCKCNT TO L2-F1.
       STOKPRT.
           MOVE '.' TO FILL10.
           MOVE SEGAREA TO L2-F2.
           MOVE SEGDEPT TO L2-F3.
           MOVE SEGPROJ TO L2-F4.
           MOVE SEGDIV TO L2-F5.
           MOVE SEGPRICE TO L2-F6.
           MOVE SEGCREQ TO L2-F7.
           MOVE SEGORDER TO L2-F8.
           MOVE SEGSTOCK TO L2-F9.
           MOVE SEGPDISB TO WORK1.
           MOVE SEGUDISB TO WORK2.
           ADD WORK1, WORK2 GIVING L2-F10.
           MOVE SEGCOUNT TO L2-F11.
           MOVE 'N/A' TO L2-F12.
           PERFORM OUTRTN.
       STOKNXT.
           CALL 'CBLTDLI' USING THREE, GN, DLIPCB, SEGRETRN.
           PERFORM CALLRET.
           IF DLISTAT = '  ' AND DLISEGFB = 'STOKSTAT' GO TO STOKSTAT.
           PERFORM TERMSCD.
           PERFORM OUTRTN.
       ENDDSPALLI. EXIT.
      *
      *        DISBURSE INVENTORY FROM STOCK
      *
       DSBURSE SECTION.
           MOVE 'DFHSAM24' TO PSBNAME.
           PERFORM SCHED.
           MOVE PARTNBR TO SSA1KEY.
           PERFORM INSPECT-SSA1KEY.
           MOVE INVKEY TO SSA2KEY.
           PERFORM INSPECT-SSA2KEY.
           CALL 'CBLTDLI' USING FIVE, GHU, DLIPCB, SEGRETRN, SSA1, SSA2
           PERFORM CALLRET.
           IF DLISTAT NOT = '  '
              THEN
              MOVE 'GHU ERROR IN DSBURSE' TO MSG
              PERFORM ABEND1.
           MOVE QUANT TO WORK1.
           IF DISB = 'P'
              THEN
              MOVE SEGPDISB TO WORK2
              ADD WORK1 TO WORK2
              MOVE WORK2 TO SEGPDISB
              ELSE
              IF DISB = 'U'
                 THEN
                 MOVE SEGUDISB TO WORK2
                 ADD WORK1 TO WORK2
                 MOVE WORK2 TO SEGUDISB
                 ELSE
                 MOVE 'WRONG DSBURSE CODE--ONLY P OR U ALLOWED' TO MSG
                 PERFORM TERMSCD
                 PERFORM OUTRTN
                 GO TO ENDDSBURSE.
           CALL 'CBLTDLI' USING THREE, REPL, DLIPCB, SEGRETRN.
           PERFORM CALLRET.
           IF DLISTAT NOT = '  '
              THEN
              MOVE 'REPLACE ERROR FOR DSBURSE' TO MSG
              PERFORM ABEND1.
           PERFORM TERMSCD.
           MOVE 'DSBURSE COMPLETED' TO MSG.
           PERFORM OUTRTN.
       ENDDSBURSE. EXIT.
      *
      *        DELETE A PART FROM INVENTORY - ALL SEGMENTS
      *
       DELPART SECTION.
           MOVE 'DFHSAM24' TO PSBNAME.
           PERFORM SCHED.
           MOVE PARTNBR TO SSA1KEY.
           PERFORM INSPECT-SSA1KEY.
           CALL 'CBLTDLI' USING FOUR, GHU, DLIPCB, SEGRETRN, SSA1.
           PERFORM CALLRET.
           IF DLISTAT NOT = '  '
              THEN
              MOVE 'GHU ERROR IN DELPART' TO MSG
              PERFORM ABEND1.
           CALL 'CBLTDLI' USING THREE, DLET, DLIPCB, SEGRETRN.
           PERFORM CALLRET.
           IF DLISTAT NOT = '  '
              THEN
              MOVE 'DELETE FAILED' TO MSG-F1
              PERFORM ABEND1.
           PERFORM TERMSCD.
           MOVE 'PART NO. ' TO MSG-F1A.
           MOVE PARTNBR TO MSG-F1B1.
           MOVE 'DELETED FROM DATA BASE' TO MSG-F1B3.
           PERFORM OUTRTN.
      *
      *        ADD A NEW PART TO INVENTORY
      *
       ADDPART SECTION.
           MOVE 'DFHSAM24' TO PSBNAME.
           PERFORM SCHED.
           MOVE ' ' TO SSA1D1.
           MOVE PARTNBR TO SEGNO.
           MOVE DESC TO SEGDESC.
           MOVE SPACES TO SEGF1.
           MOVE SPACES TO SEGF1A.
           CALL 'CBLTDLI' USING FOUR, ISRT, DLIPCB, SEGRETRN, SSA1.
           MOVE '(' TO SSA1D1.
           PERFORM CALLRET.
           IF DLISTAT = '  ' GO TO ISRTOK.
           IF DLISTAT = 'II' GO TO MSGISRT.
       ISRTERR.
           MOVE 'INSERT RULES VIOLATED' TO MSG.
           PERFORM ABEND1.
       ISRTOK.
           MOVE PARTNBR TO SSA1KEY.
           PERFORM INSPECT-SSA1KEY.
           MOVE 'STANINFO' TO SSA2N1.
           MOVE SPACES TO SSA2D1.
           MOVE '02' TO SEGCODE.
           MOVE SPACES TO SEGF6.
           MOVE PROC TO SEGPCODE.
           MOVE SPACES TO SEGDCODE.
           MOVE SPACES TO SEGF7.
           CALL 'CBLTDLI' USING FIVE, ISRT,
                                DLIPCB, SEGRETRN, SSA1, SSA2.
           MOVE 'STOKSTAT' TO SSA2N1.
           MOVE '(' TO SSA2D1.
           PERFORM CALLRET.
           IF DLISTAT = '  ' GO TO ISRTOKMG.
           IF DLISTAT NOT = 'II' GO TO ISRTERR.
           MOVE 'STANINFO' TO MSG-F1B2.
       MSGISRT.
           PERFORM TERMSCD.
           MOVE 'SEGMENT ALREADY EXISTS' TO MSG.
           PERFORM OUTRTN.
           GO TO ENDADDPART.
       ISRTOKMG.
           PERFORM TERMSCD.
           MOVE 'PART NO.' TO MSG-F1A.
           MOVE PARTNBR TO MSG-F1B1.
           MOVE 'ADDED TO DATA BASE' TO MSG-F1B2.
           PERFORM OUTRTN.
       ENDADDPART. EXIT.
      *
      *        DISPLAY INVENTORY FROM A DESIGNATED LOCATION
      *
       DSPINV SECTION.
           MOVE 'DFHSAM25' TO PSBNAME.
           PERFORM SCHED.
           MOVE PARTNBR TO SSA1KEY.
           PERFORM INSPECT-SSA1KEY.
           CALL 'CBLTDLI' USING FOUR, GU, DLIPCB, SEGRETRN, SSA1.
           PERFORM CALLRET.
           IF DLISTAT NOT = '  '
              THEN
              MOVE 'GU ERROR IN DSPINV' TO MSG
              PERFORM ABEND1.
           MOVE 'PART NO =' TO MSG-F1A.
           MOVE SEGNO TO MSG-F1B1.
           MOVE 'PART DESCRIPTION = ' TO MSG-F1B2.
           MOVE SEGDESC TO MSG-F1B3.
           PERFORM OUTRTN.
           MOVE PARTNBR TO SSA1KEY.
           PERFORM INSPECT-SSA1KEY.
           MOVE INVKEY TO SSA2KEY.
           PERFORM INSPECT-SSA2KEY.
           CALL 'CBLTDLI' USING FIVE, GU, DLIPCB,
                                SEGRETRN, SSA1, SSA2.
           PERFORM CALLRET.
           IF DLISTAT NOT = '  '
              THEN
              MOVE 'GU ERROR IN DSPINV' TO MSG
              PERFORM ABEND1.
           PERFORM TERMSCD.
           MOVE HEAD1 TO MSG.
           PERFORM OUTRTN.
           MOVE HEAD2 TO MSG.
           PERFORM OUTRTN.
           PERFORM STOKPRT.
           MOVE 'UNIT = ' TO MSG.
           MOVE SEGUNIT TO L1-F2.
           MOVE '  PLANNED DISBURSALS' TO MSG-F1B1.
           MOVE SEGPDISB TO L2-F7.
           MOVE 'UNPLANNED' TO MSG-F1B3.
           MOVE SEGUDISB TO L2-F10.
           PERFORM OUTRTN.
      *
      *
       ABEND1 SECTION.
           PERFORM OUTRTN.
           MOVE DLIFILE TO L1-F1.
           MOVE DLISGLEV TO L2-F3.
           MOVE DLISTAT TO FILL12.
           MOVE DLIPROC TO L2-F4.
           MOVE DLISEGFB TO L1-F3.
           PERFORM OUTRTN.
           EXEC CICS ABEND ABCODE('DL42') END-EXEC.
      *
      *
       CALLRET SECTION.
           IF FCNORESP GO TO TESTPCB.
           IF FCINVREQ
              THEN
              MOVE 'INVALID REQUEST' TO MSG-F1B3
              GO TO CALLNXT.
           IF FCNOTOPEN
              THEN
              MOVE 'DATA BASE NOT OPEN' TO MSG-F1B3
              GO TO CALLNXT.
       TESTPCB.
           IF DLISTAT = 'GB'
              THEN
              PERFORM TERMSCD
              MOVE 'END OF DATA BASE REACHED' TO MSG
              PERFORM OUTRTN
              EXEC CICS RETURN END-EXEC.
           IF DLISTAT = 'GE'
              THEN
              PERFORM TERMSCD
              MOVE 'RECORD NOT FOUND FOR PART NO=' TO MSG
              MOVE PARTNBR TO L1-F3
              PERFORM OUTRTN
              EXEC CICS RETURN END-EXEC.
           GO TO CALLEND.
       CALLNXT.
           PERFORM TERMSCD.
           MOVE ' D/B CALL' TO MSG-F1A.
           MOVE 'ERROR IN PSB NAMED =' TO MSG-F1B1.
           MOVE PSBNAME TO MSG-F1B2.
           PERFORM ABEND1.
       CALLMORE.
           EXEC CICS RETURN END-EXEC.
       CALLEND. EXIT.
      *
      *
       OUTRTN SECTION.
           EXEC CICS SEND FROM(MSG) LENGTH(MSGLEN80) END-EXEC.
           MOVE SPACES TO MSG.
      *
      *
       SCHED SECTION.
           CALL 'CBLTDLI' USING PCB, PSBNAME, ADDRESS OF DLIUIB.
           IF FCNORESP
              THEN
              SET ADDRESS OF PCBADDR-LIST TO PCBADDR
      * USE FIRST ADDRESS IN PCB ADDRESS LIST TO OBTAIN PCB
              SET ADDRESS OF PCB1 TO PCBADDR-ITEM(1)
              GO TO ENDS.
      *
      * END OF SECTIONS
           IF FCINVREQ
              THEN
              MOVE 'INVALID REQUEST' TO MSG-F1B3
              MOVE 'SCHEDULE ERROR - PSBNAME=' TO MSG
              MOVE PSBNAME TO MSG-F1B2
              PERFORM OUTRTN
              PERFORM ABEND1.
       ENDS. EXIT.
      *
      *
       TERMSCD SECTION.
           CALL 'CBLTDLI' USING TERM.
           IF FCNORESP GO TO TERMNOR.
           MOVE 'PSB TERMINATION ERROR' TO MSG.
           PERFORM ABEND1.
       TERMNOR.
