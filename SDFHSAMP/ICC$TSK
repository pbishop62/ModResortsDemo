//*******************************************************************
//
// Module Name: ICC$TSK
//
// Description:
//    This sample program demonstrates how to use the IccTask class.
//
//
//
//     Licensed Materials - Property of IBM
//
//     "Restricted Materials of IBM"
//
//     5655-Y04
//
//     (C) Copyright IBM Corp. 1998, 2004"
//
//
//
//
// Status = %SP00
//
//-------------------------------------------------------------------
//
// Change Activity:
//
//   $MOD(ICC$TSK),COMP(CEZANNE),PROD(CICS TS ):
//
//   PN= REASON REL YYMMDD HDXIII : REMARKS
//  $P0= M30492 530 981109 HDGYBS : Creation
//  $P1= M30696 530 981218 HDGYBS : Fix sample c++ programs
//  $P2= D12734 640 041224 HD6KRAH: Language level
//
//*******************************************************************
#include "icceh.hpp"  //CICS C++ Foundation Classes header files
#include "iccmain.hpp"  //CICS C++ Foundation Classes main() stub

void IccUserControl::run()
{
  Icc::Bool requestDump  = Icc::no;                             //@P2C
  Icc::Bool requestAbend = Icc::no;                             //@P2C
  IccTask* task = IccControl::task();  //Gain access to task object
  IccTerminal* term = terminal();  //Gain access to terminal.
  term->erase();  //clear terminal.
  term->sendLine("This is program 'icc$tsk'...");

  IccTimeInterval ti(0,0,2);  //2 second interval
  IccBuf buffer(33);  //33 byte buffer object

  //Various task attributes...
  term->sendLine("startType() = ");

  switch(task->startType())  //Check how this task was started
  {
    case IccTask::DPL:
       term->send("DPL");
       break;
    case IccTask::dataQueueTrigger:
       term->send("dataQueueTrigger");
       break;
    case IccTask::startRequest:
       term->send("startRequest");
       break;
    case IccTask::FEPIRequest:
       term->send("FEPIRequest");
       break;
    case IccTask::terminalInput:
       term->send("terminalInput");
       break;
    default:
       term->send("!!UNKNOWN!!");
       break;
  }
  term->sendLine( "number() = %04ld", task->number());
  term->sendLine( "isStartDataSupplied() = %s",
             Icc::boolText( task->isStartDataAvailable() ) );
  term->sendLine("isCommitSupported() = %s",
             Icc::boolText( task->isCommitSupported() ) );
  term->sendLine( "userId() = [%s]",task->userId().name());

  //Dump facility...
  if ( requestDump == Icc::yes )
    task->dump( "OOPS" );

  //User trace facility...
  term->sendLine( "enterTrace( 77, \"ICCENTRY\", buffer )");
  buffer = "Hello out there!";
  task->enterTrace( 77, "ICCENTRY", &buffer );  //write trace entry
  term->sendLine( 45, "<%s>",task->conditionText());

  term->sendLine( "suspend()...");
  task->suspend();  //suspend task
  term->sendLine( 45, "<%s>",task->conditionText());

  term->sendLine( "delay( ti ) (for %ld seconds)...",
                  ti.timeInSeconds() );
  task->delay( ti );  //delay task for 'ti'
  term->sendLine( 45, "<%s>",task->conditionText());

  //Storage services...
  term->sendLine( "getStorage( 1234, 'X')...");
  void* pBuffer = task->getStorage( 1234, 'X');
  term->sendLine( 45, "<%s>",task->conditionText());
  term->sendLine( "freeStorage( p )...");
  task->freeStorage( pBuffer );
  term->sendLine( 45, "<%s>",task->conditionText());

  //Resource change control....
  term->sendLine( "commitUOW()...");
  task->commitUOW();
  term->sendLine( 45, "<%s>",task->conditionText());
  term->sendLine( "rollBackUOW()...");
  task->rollBackUOW();
  term->sendLine( 45, "<%s>",task->conditionText());


  term->send( 24,1,
     "Program 'icc$tsk' complete: Hit PF12 to End OR PF24 to ABEND");
  while (1)
  {
    term->waitForAID();
    if ( term->AID() == IccTerminal::PF12 )
      break;
    if ( term->AID() == IccTerminal::PF24 )
      task->abend( "OOPS" );
  }
  term->erase();
  term->freeKeyboard();

  return;  //Return control to CICS.
};
