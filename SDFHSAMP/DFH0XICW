       CBL CICS('COBOL3') APOST
      *****************************************************************
      *                                                               *
      *  MODULE NAME = DFH0XICW                                       *
      *                                                               *
      *  DESCRIPTIVE NAME = CICS TS  (Samples) Example Application -  *
      *                     Wrapper program for Inquire Catalog       *
      *                     web service enablement                    *
      *                                                               *
      *                                                               *
      *                                                               *
      *      Licensed Materials - Property of IBM                     *
      *                                                               *
      *      "Restricted Materials of IBM"                            *
      *                                                               *
      *      5655-Y04                                                 *
      *                                                               *
      *      (C) Copyright IBM Corp. 2005"                            *
      *                                                               *
      *                                                               *
      *                                                               *
      *                                                               *
      *  STATUS = 7.2.0                                               *
      *                                                               *
      *  TRANSACTION NAME = n/a                                       *
      *                                                               *
      *  FUNCTION =                                                   *
      *  This module is the is an example of the method for mapping   *
      *  an incoming web service request to existing logic            *
      *                                                               *
      *-------------------------------------------------------------  *
      *                                                               *
      *  ENTRY POINT = DFH0XICW                                       *
      *                                                               *
      *-------------------------------------------------------------  *
      *                                                               *
      *  CHANGE ACTIVITY :                                            *
      *          $MOD(DFH0XICW),COMP(SAMPLES),PROD(CICS TS ):         *
      *                                                               *
      *      PN= REASON REL YYMMDD HDXXIII : REMARKS                  *
      *      $D0= I07544 640 050112 HDIPCB  : Example App Cics Client *
      *     $D1= I07544 640 050118 HDIPCB  : ExampleApp Add sample JCL*
      *                                                               *
      *****************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. DFH0XICW.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
      *----------------------------------------------------------------*
      * Common defintions                                              *
      *----------------------------------------------------------------*
      * Run time (debug) infomation for this invocation
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'DFH0XICW------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-CALEN                 PIC S9(4) COMP.

      * Variables for time/date processing
       01  ABS-TIME                    PIC S9(8) COMP VALUE +0.
       01  TIME1                       PIC X(8)  VALUE SPACES.
       01  DATE1                       PIC X(10) VALUE SPACES.

      * Error Message structure
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' DFH0XICW'.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-DETAIL                PIC X(50) VALUE SPACES.

      * Working variables
       01 WORKING-VARIABLES.
           03 WS-RESP                  PIC S9(8)   COMP    VALUE +0.
           03 WS-NUM-ITEMS-REQUIRED    PIC 9(2)    COMP    VALUE 0.
           03 WS-NUM-ITEMS-READ        PIC 9(2)    COMP    VALUE 0.
           03 WS-ARRAY-INDEX           PIC 9(2)    COMP    VALUE 0.
           03 WS-ITEM-COUNT            PIC 9(2)    COMP    VALUE 0.
           03 WS-LAST-ITEM-RETURNED    PIC 9(4).

      * Switches
       01 SWITCHES.
           03 CONTINUE-LOOP-SW         PIC X(1)  VALUE '1'.
               88 CONTINUE-LOOP                  VALUE '1'.
               88 TERMINATE-LOOP                 VALUE '0'.

      * Area to build up the array of catalog items
       01 WS-CATALOG-ITEM-LIST.
           05 WS-CATALOG-ITEM OCCURS 1 TO 90
                              DEPENDING ON WS-NUM-ITEMS-REQUIRED.
             10 WS-ITEM-REF                    PIC 9(4) DISPLAY.
             10 WS-ITEM-DESCRIPTION            PIC X(40).
             10 WS-DEPARTMENT                  PIC 9(3) DISPLAY.
             10 WS-ITEM-COST                   PIC X(6).
             10 WS-IN-STOCK                    PIC 9(4) DISPLAY.
             10 WS-ON-ORDER                    PIC 9(3) DISPLAY.

      * Key into the configuration file
       01 EXAMPLE-APP-CONFIG       PIC X(9)
               VALUE 'EXMP-CONF'.

      * Format of the configuration file
       01 APP-CONFIG.
           03 FILE-KEY                 PIC X(9).
           03 FILLER                   PIC X(8).
           03 CATMAN-PROG              PIC X(8).
           03 FILLER                   PIC X(55).

      * Data structures to hold the input and output data
      * Due to copy books containing 'SYNC' members must be held
      * individually with an 01 level structure to ensure they are
      * aligned on a double word boundry
       01 REQUEST-CONTAINER-DATA.
           COPY DFH0XWC1.
       01 RESPONSE-CONTAINER-DATA.
           COPY DFH0XWC2.

      * Data structure to hold the commarea for the catalog manager
       01 CATALOG-COMMAREA.
           COPY DFH0XCP1.

      *-----------------------------------------------------------

      ******************************************************************
      *    L I N K A G E   S E C T I O N
      ******************************************************************
       LINKAGE SECTION.


      ******************************************************************
      *    P R O C E D U R E S
      ******************************************************************
       PROCEDURE DIVISION.

      *----------------------------------------------------------------*
       MAINLINE SECTION.

      *----------------------------------------------------------------*
      * Common code                                                    *
      *----------------------------------------------------------------*
      * initialize working storage variables
           INITIALIZE APP-CONFIG.
           INITIALIZE ERROR-MSG.

      * set up general variable
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.


           PERFORM READ-CONFIGURATION

      *---------------------------------------------------------------*
      * Get the input data from the supplied container                *
      *---------------------------------------------------------------*

           EXEC CICS GET CONTAINER('DFHWS-DATA')
                     INTO(inquireCatalogRequest)
                     RESP(WS-RESP)
           END-EXEC
      *    Check the response was okay - return an error if not
           IF WS-RESP NOT EQUAL DFHRESP(NORMAL)
      *        Set up the Error message for the response
               MOVE '61' TO returnCode
               MOVE 'Example App Internal Error: Get Container'
                   TO responseMessage
      *        Put the response in a container on the channel
               EXEC CICS PUT CONTAINER('DFHWS-DATA')
                        FROM(inquireCatalogResponse)
               END-EXEC
      *        Return to the web service layer to send the response
               EXEC CICS RETURN END-EXEC
           END-IF

      *    To match the schema limit itemCount to 90
           IF itemCount OF inquireCatalogRequest GREATER THAN 90
               MOVE 90 TO itemCount OF inquireCatalogRequest
           END-IF

      *    Find out how many items have been requested for the inquire
           MOVE itemCount OF inquireCatalogRequest
               TO WS-NUM-ITEMS-REQUIRED

      * Copy the data to the commarea structure to call catalog manager
           INITIALIZE CATALOG-COMMAREA
      *    Move the item reference to start the inquire from
           MOVE startItemRef TO CA-LIST-START-REF
      *    Add the request ID for a place order request
           MOVE '01INQC' TO CA-REQUEST-ID

      * Copy itemCount from the request into the response
      * This sets the size of the variable length array to build the
      * response into
           MOVE itemCount OF inquireCatalogRequest
                TO itemCount OF inquireCatalogResponse

      * Call the existing application
           PERFORM LINK-TO-EXISTING-LOGIC

      * Copy the response into a data area to send back to the client
           MOVE CA-RETURN-CODE TO returnCode
           MOVE CA-RESPONSE-MESSAGE TO responseMessage
           MOVE startItemRef TO listStartRef
      *    MOVE WS-LAST-ITEM-RETURNED TO lastItemRef
           MOVE WS-NUM-ITEMS-READ
                   TO itemCount OF inquireCatalogResponse
           MOVE WS-NUM-ITEMS-READ TO CatalogItem1-num
           MOVE 'CATALOGITEMLIST' TO CatalogItem1-cont

           EXEC CICS PUT CONTAINER('CATALOGITEMLIST')
                         FROM(catalogItem1)
           END-EXEC

           EXEC CICS WRITEQ TS queue('DEBUG-Q')
                               from(WS-NUM-ITEMS-READ)
           END-EXEC

           EXEC CICS WRITEQ TS queue('DEBUG-Q')
                               from (catalogItem1)
           END-EXEC

           EXEC CICS PUT CONTAINER('DFHWS-DATA')
                         FROM(inquireCatalogResponse)
           END-EXEC

      * Return to caller
           EXEC CICS RETURN END-EXEC.

       MAINLINE-EXIT.
           EXIT.
      *----------------------------------------------------------------*

      *================================================================*
      * Procedure to write error message to TD QUEUE(CSMT)             *
      *   message will include Date, Time, Program Name,               *
      *   and error details.                                           *
      *================================================================*
       WRITE-ERROR-MESSAGE.
      * Obtain and format current time and date
           EXEC CICS ASKTIME ABSTIME(ABS-TIME)
           END-EXEC
           EXEC CICS FORMATTIME ABSTIME(ABS-TIME)
                     MMDDYYYY(DATE1)
                     TIME(TIME1)
           END-EXEC
           MOVE DATE1 TO EM-DATE
           MOVE TIME1 TO EM-TIME
      * Write output message to TDQ
           EXEC CICS WRITEQ TD QUEUE('CSMT')
                     FROM(ERROR-MSG)
                     LENGTH(LENGTH OF ERROR-MSG)
           END-EXEC.
           EXIT.

       READ-CONFIGURATION.
      *-----------------------------------------------------------
      * Read in configuration file and set up program names
      *----------------------------------------------------------------*
           EXEC CICS READ FILE('EXMPCONF')
                          INTO(APP-CONFIG)
                          RIDFLD(EXAMPLE-APP-CONFIG)
                          RESP(WS-RESP)
           END-EXEC

           IF WS-RESP NOT EQUAL DFHRESP(NORMAL)
      *            Set up the Error message for the response
                   MOVE '51' TO returnCode
                   MOVE 'APPLICATION ERROR OPENING CONFIGURATION FILE'
                       TO responseMessage
      *            Put the response in a container on the channel
                   EXEC CICS PUT CONTAINER('DFHWS-DATA')
                            FROM(inquireCatalogResponse)
                   END-EXEC
      *            Return to the web service layer to send the response
                   EXEC CICS RETURN END-EXEC
           END-IF
           EXIT.

       LINK-TO-EXISTING-LOGIC.
      * Exisiting application only returns 15 items on an inquiry.
      * Loop through calling exisitng application until desired number
      * of catalog items has been fetched to satisfy request

      * Initialise the array index we will use to '1'
           MOVE 1 TO WS-ARRAY-INDEX

           PERFORM
               WITH TEST AFTER
               UNTIL TERMINATE-LOOP
               OR WS-NUM-ITEMS-READ >= WS-NUM-ITEMS-REQUIRED

      *        Link to the catalog manager program
               EXEC CICS LINK PROGRAM(CATMAN-PROG)
                              COMMAREA(CATALOG-COMMAREA)
               END-EXEC

      *        Check that the call was sucessful
               IF CA-RETURN-CODE NOT EQUAL 00
      *            Call Unsucessful - copy result to response
                   MOVE CA-RETURN-CODE TO returnCode
                   MOVE CA-RESPONSE-MESSAGE TO responseMessage
      *            Put container on channel and return to webservice
                   EXEC CICS PUT CONTAINER('DFHWS-DATA')
                                 FROM(inquireCatalogResponse)
                   END-EXEC
                   EXEC CICS RETURN END-EXEC
               END-IF

      *        Check how many items have been returned. If less than 15
      *        no more items in the catalog so terminate loop
               IF CA-ITEM-COUNT LESS THAN 15
                   SET TERMINATE-LOOP TO TRUE
               END-IF

      *        Loop through returned items copying them into the
      *        data structure to return to the requester
      *        Exit loop when we have copied all the items returned or
      *        have read to the total number required by the requester
               PERFORM
                   WITH TEST AFTER
                   VARYING WS-ITEM-COUNT FROM 1 BY 1
                   UNTIL WS-ITEM-COUNT EQUAL CA-ITEM-COUNT
      *                  All items returned read
                   OR    WS-NUM-ITEMS-READ EQUAL WS-NUM-ITEMS-REQUIRED
      *                  Total number required read

      *            Copy cat item details from returned commarea into
      *            Working-storage copy
                   MOVE CA-ITEM-REF(WS-ITEM-COUNT)
                        TO itemRef(WS-ARRAY-INDEX)
                   MOVE CA-DESCRIPTION(WS-ITEM-COUNT)
                        TO itemDescription(WS-ARRAY-INDEX)
                   MOVE CA-DEPARTMENT(WS-ITEM-COUNT)
                        TO department(WS-ARRAY-INDEX)
                   MOVE CA-COST(WS-ITEM-COUNT)
                        TO itemCost(WS-ARRAY-INDEX)
                   MOVE IN-STOCK(WS-ITEM-COUNT)
                        TO inStock(WS-ARRAY-INDEX)
                   MOVE ON-ORDER(WS-ITEM-COUNT)
                        TO onOrder(WS-ARRAY-INDEX)

      *            Store the last item returned in the response area
                   MOVE CA-ITEM-REF(WS-ITEM-COUNT)
                        TO  lastItemRef

                   ADD 1 TO WS-NUM-ITEMS-READ
                   ADD 1 TO WS-ARRAY-INDEX
               END-PERFORM

               IF WS-NUM-ITEMS-READ EQUAL WS-NUM-ITEMS-REQUIRED
                   SET TERMINATE-LOOP TO TRUE
               END-IF

      *        Reset commarea for the next request
               MOVE CA-LAST-ITEM-REF TO WS-LAST-ITEM-RETURNED
               INITIALIZE CATALOG-COMMAREA
      *        Repopulate the commarea with the request id
               MOVE '01INQC' TO CA-REQUEST-ID
      *        Increment the last item returned and set it as start item
               ADD 1 TO WS-LAST-ITEM-RETURNED GIVING CA-LIST-START-REF

           END-PERFORM
           EXIT.
