       IDENTIFICATION DIVISION.
       PROGRAM-ID. DFH0CXC.
      ****************************************************************
      *                                                              *
      *  PROGRAM NAME: DFH0CXC                                       *
      *                                                              *
      *  TITLE: Sample Batch Client Program.                         *
      *                                                              *
      *                                                               *
      *                                                               *
      *     Licensed Materials - Property of IBM                      *
      *                                                               *
      *     "Restricted Materials of IBM"                             *
      *                                                               *
      *     5655-Y04                                                  *
      *                                                               *
      *     (C) Copyright IBM Corp. 1993, 2015"                       *
      *                                                               *
      *                                                               *
      *                                                               *
      *                                                              *
      *  DATE: 12.03.93                                              *
      *                                                              *
      *  PROGRAM DESCRIPTION: This program should give an example of *
      *                       how to code a simple batch type        *
      *                       application using the EXCI API calls.  *
      *                                                              *
      *  SPECIAL REQUIREMENTS: The program must be translated with   *
      *                        the EXCI option, and run amode 31 to  *
      *                        use the External CICS Interface.      *
      *                                                              *
      *  SYSTEM LEVEL:  CICS 4.1 or higher                           *
      *                                                              *
      *  INPUT:         The target CICS system with which this       *
      *                 batch client program communicates can be     *
      *                 specified via the JCL PARM statement,        *
      *                 otherwise it defaults to applid DBDCCICS.    *
      *                 The USERID can also be passed as a parameter.*
      *                 The parameters are passed in the form -      *
      *                       APPLID,USERID                          *
      *                 The target file is hardcoded as FILEA.       *
      *                                                              *
      *  OUTPUT:        The whole of the Target File will be output  *
      *                 to the SYSPRINT log, together with status    *
      *                 information.                                 *
      *                                                              *
      *                                                              *
      * CHANGE ACTIVITY :                                            *
      * $SEG(DFH0CXCC),COMP(SAMPLES),PROD(CICS TS ):                 *
      *                                                              *
      *     PN= REASON REL YYMMDD HDXIII : REMARKS                   *
      *    $D1= I07206 620 010430 HD7OPJW : Remove old comp support  *
      *    $L0= 660    410 930325 HDELDPG: Create sample application *
      *    $P1= M27354 530 980126 HD2GJST: Use fixed sysprint records*
      *    $P2= D13156 640 050126 HD6KRAH: XOPTS->CICS               *
      *    &P0= M28373 %JU 980801 HDNONEHM:Pass USERID as parameter  *
      *         D99889 700 150209 HD2GJST: Change to use CEE3PR2     *
      *                                                              *
      *                                                              *
      ****************************************************************
       ENVIRONMENT DIVISION.
      *==============================================================*
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT PRINTER ASSIGN TO SYSPRINT.
       DATA DIVISION.
      *==============================================================*
       FILE SECTION.
      *==============================================================*
       FD  PRINTER BLOCK CONTAINS 128 CHARACTERS
           RECORDING MODE IS F
           LABEL RECORDS OMITTED.
       01  OUTPUT-RECORD      PIC X(128).
       WORKING-STORAGE SECTION.
       77  PARM-DATA-LENGTH   PIC 9(8) COMP.
      *==============================================================*
      *   Declare Call level,DPL, and EXEC level Return Code areas.  *
      *==============================================================*
       COPY DFHXCPLO.
      *==============================================================*
      *   Declare Areas to be used for outputting return codes.      *
      *==============================================================*
       01  OUTPUT-RETAREA.
         05  FILLER           PIC X(20)  VALUE SPACES.
         05  O-RESP           PIC 9(8).
         05  FILLER           PIC XX     VALUE SPACES.
         05  O-RESP2          PIC 9(8).
         05  FILLER           PIC XX     VALUE SPACES.
         05  OEXCI-SUB-REASON1 PIC 9(8).
         05  O-ABCODE-LINE    REDEFINES OEXCI-SUB-REASON1.
             10  O-ABCODE     PIC X(4).
             10  OPAD-ABCODE  PIC X(4).
         05  FILLER           PIC X(80) VALUE SPACES.
       01  SUB                PIC S9(8) COMP.
       01  SUBX               PIC S9(8) COMP.
       01  SUBY               PIC S9(8) COMP.
       01  OUT-REC.
         05 OUT-REC-ELEM      PIC X OCCURS 128 TIMES.
      *==============================================================*
      *   Define Server call-type codes/Return Codes.                *
      *==============================================================*
       01  SERVER-CALLTYPES.
         05  INIT-CALL        PIC S9(8) COMP VALUE 1.
         05  READ-CALL        PIC S9(8) COMP VALUE 2.
         05  CLOSE-CALL       PIC S9(8) COMP VALUE 3.
       01  SERVER-RETCODES.
         05  RET-BROWSE       PIC S9(8) COMP VALUE ZERO.
         05  RET-NOBRWS       PIC S9(8) COMP VALUE 4.
         05  RET-EOF          PIC S9(8) COMP VALUE 8.
         05  RET-NOFILE       PIC S9(8) COMP VALUE 12.
         05  RET-ERROR        PIC S9(8) COMP VALUE 16.
      *==============================================================*
      *   Initialise Target information variables.                   *
      *==============================================================*
       01  TARGET-FILE        PIC X(8)       VALUE 'FILEA   '.
       01  TARGET-PROGRAM     PIC X(8)       VALUE 'DFH$AXCS'.
       01  TARGET-TRANSID     PIC X(4)       VALUE 'EXCI'.
       01  TARGET-SYSTEM.
         05 TARGET-SYS-ELEM   PIC X OCCURS 8 TIMES.
       01  TARGET-USERID.
         05 TARGET-USER-ID    PIC X OCCURS 8 TIMES.
      *==============================================================*
      *   Initialise Call level specific variables.                  *
      *==============================================================*
       01  APPLICATION        PIC X(8)       VALUE 'BATCHCLI'.
       01  USER-TOKEN         PIC S9(8) COMP VALUE ZERO.
       01  PIPE-TOKEN         PIC S9(8) COMP VALUE ZERO.
      *==============================================================*
      *   Define Commarea struct.                                    *
      *==============================================================*
       01  COMMAREA.
         05  CALL-TYPE        PIC S9(8) COMP VALUE ZERO.
         05  FILE-NAME        PIC X(8)       VALUE SPACES.
         05  RID-FIELD        PIC X(6)       VALUE '000001'.
         05  RECORD-AREA      PIC X(80)      VALUE SPACES.
      *==============================================================*
      *   Initialise Commarea length and Data length(in bytes).      *
      *==============================================================*
       01  COMM-LENGTH        PIC S9(8) COMP VALUE 98.
       01  DATA-LENGTH        PIC S9(8) COMP VALUE 18.
       01  LINK-COM-LEN       PIC S9(4) COMP VALUE 18.
       01  LINK-DAT-LEN       PIC S9(4) COMP VALUE 18.
      *==============================================================*
      *   Initialise program specific variables and flags.           *
      *==============================================================*
       01  SERVER-RETCODE     PIC S9(8) COMP VALUE ZERO.
       01  PROGRAM-FLAGS.
         05  ABORT            PIC X(3)       VALUE 'NO '.
         05  YES              PIC X(3)       VALUE 'YES'.
         05  NOT-YET          PIC X(3)       VALUE 'NO '.
       01  SAVED-RESPONSE     PIC 9(8)  COMP VALUE ZERO.
       01  PROGRAM-MESSAGES.
         05  MSG00  PIC X(128) VALUE SPACES.
         05  MSG01  PIC X(128) VALUE '*===================== EXCI Sample
      -     ' Batch Client Program =======================*'.
         05  MSG02  PIC X(128) VALUE '*
      -     '                                             *'.
         05  MSG03  PIC X(128) VALUE '*  EXEC Level Processor.
      -     '                                             *'.
         05  MSG04  PIC X(128) VALUE '*    Setting up the EXEC level cal
      -     'l.                                           *'.
         05  MSG05  PIC X(128) VALUE '*    The Link Request has successf
      -     'ully completed.                              *'.
         05  MSG06  PIC X(128) VALUE '*    Server Response:
      -     '                                             *'.
         05  MSG07  PIC X(128) VALUE '*      The file is set to a browsa
      -     'ble state.                                   *'.
         05  MSG08  PIC X(128) VALUE '*      The file could not be found
      -     '                                             *'.
         05  MSG09  PIC X(128) VALUE '*      The file could not be succe
      -     'ssfully initialised.                         *'.
         05  MSG10  PIC X(128) VALUE '*      A serious error was detecte
      -     'd.                                           *'.
         05  MSG11  PIC X(128) VALUE '*    The Link Request has failed.
      -     ' Return codes are:                           *'.
         05  MSG13  PIC X(128) VALUE '*    A message was received from t
      -     'he target CICS system:                       *'.
         05  MSG14  PIC X(128) VALUE '*    >>>> Aborting further process
      -     'ing <<<<                                     *'.
         05  MSG15  PIC X(128) VALUE '*  CALL Level Processor.
      -     '                                             *'.
         05  MSG16  PIC X(128) VALUE '*    Initialise_User call complete
      -     '.                                            *'.
         05  MSG17  PIC X(128) VALUE '*    Allocate_Pipe call complete.
      -     '                                             *'.
         05  MSG18  PIC X(128) VALUE '*    Open_Pipe call complete.
      -     '                                             *'.
         05  MSG19  PIC X(128) VALUE '*    The connection has been succe
      -     'ssful.                                       *'.
         05  MSG20  PIC X(128) VALUE '*      The target file follows:
      -     '                                             *'.
         05  MSG21  PIC X(128) VALUE '*=========================== Top o
      -     'f File ======================================*'.
         05  MSG22  PIC X(128) VALUE '*=========================== End o
      -     'f File ======================================*'.
         05  MSG23  PIC X(128) VALUE '*    The connection has been unsuc
      -     'cessful.  Return codes are:                  *'.
         05  MSG25  PIC X(128) VALUE '*      The DPL request has failed.
      -     '                                             *'.
         05  MSG26  PIC X(128) VALUE '*      Link return codes are:
      -     '                                             *'.
         05  MSG27  PIC X(128) VALUE '*      DPL return codes are:
      -     '                                             *'.
         05  MSG28  PIC X(128) VALUE '*    Closing DPL Request has been
      -     'attempted.                                   *'.
         05  MSG29  PIC X(128) VALUE '*    Close_Pipe call complete.
      -     '                                             *'.
         05  MSG30  PIC X(128) VALUE '*    Deallocate_Pipe call complete
      -     '                                             *'.
         05  MSG31  PIC X(128) VALUE '*=================== End of EXCI S
      -     'AMPLE BATCH CLIENT PROGRAM ==================*'.
         05  MSG32.
           07  FILLER     PIC X(17) VALUE '*    Parameters: '.
           07  FILL-APP   PIC X(7) VALUE 'APPLID='.
           07  MSG-SYSTEM PIC X(8) VALUE SPACES.
           07  FILL-USER  PIC X(9) VALUE '  USERID='.
           07  MSG-USERID PIC X(8) VALUE SPACES.
           07  FILLER     PIC X(30) VALUE SPACES.
           07  FILLER     PIC X(1) VALUE '*'.
           07  FILLER     PIC X(48) VALUE SPACES.

       01  PARM-DATA.
         05 PARM-STRING-LENGTH  PIC 9(4) COMP.
         05 PARM-STRING         PIC X OCCURS 17 TIMES.

      *==============================================================*
       LINKAGE SECTION.
         01  NULL-PTR  USAGE IS POINTER.
      *
         01  CALL-LEVEL-MSG.
           05 CALL-LEVEL-MSG-LEN  PIC S9(4) COMP.
           05 FILLER              PIC S9(4) COMP.
           05 CALL-LEVEL-MSG-TEXT PIC X OCCURS 128 TIMES.

      *
         01  EXEC-LEVEL-MSG.
           05 EXEC-LEVEL-MSG-TEXT PIC X OCCURS 128 TIMES.
      *
       PROCEDURE DIVISION.
           OPEN OUTPUT PRINTER.
      *==============================================================*
      *   Get applid AND USERID from PARM statement if specified     *
      *==============================================================*

           MOVE 'DBDCCICS' TO TARGET-SYSTEM.
           MOVE '        ' TO TARGET-USERID.

           MOVE 17 to PARM-DATA-LENGTH.
           CALL "CEE3PR2" USING PARM-DATA-LENGTH, PARM-DATA.

           IF PARM-STRING-LENGTH > 0 THEN
             IF PARM-STRING (1) = ',' THEN
               MOVE '      ' to FILL-APP
               MOVE '        ' to MSG-SYSTEM
               MOVE 1 TO SUB
             ELSE
               MOVE '        ' TO TARGET-SYSTEM
               PERFORM TEST BEFORE VARYING SUB FROM 1 BY 1
               UNTIL SUB > PARM-STRING-LENGTH OR SUB > 8
                 OR PARM-STRING (SUB) = ','
                 MOVE PARM-STRING (SUB) TO TARGET-SYS-ELEM(SUB)
               END-PERFORM
               MOVE TARGET-SYSTEM TO MSG-SYSTEM.

             IF PARM-STRING (SUB) = ',' THEN
               ADD 1 TO SUB
               ELSE
                 MOVE '       ' to FILL-USER
                 MOVE '        ' to MSG-USERID.

             IF PARM-STRING-LENGTH >= SUB THEN
               MOVE 1 TO SUBY
               PERFORM TEST BEFORE
               VARYING SUBX FROM SUB BY 1
               UNTIL SUBX > PARM-STRING-LENGTH OR SUBX > 17
                 MOVE PARM-STRING (SUBX) TO TARGET-USER-ID(SUBY)
                 ADD 1 TO SUBY
               END-PERFORM
             MOVE TARGET-USERID TO MSG-USERID.

           IF PARM-STRING-LENGTH = 0
           THEN MOVE ' None' to FILL-APP.

           IF TARGET-USERID = '        '
           THEN MOVE LOW-VALUES TO TARGET-USERID.

       SECTION-1.
      *==============================================================*
      *                                                              *
      *   SECTION-1:   This section will use an EXEC level EXCI call *
      *                to invoke the program BATCHSER on the target  *
      *                CICS system to check the state of the target  *
      *                file, and, if it exists, will set the file to *
      *                a browsable state.  The CALL-TYPE (1st) slot  *
      *                of the Commarea will be used to return        *
      *                information as to how successful the call was.*
      *                If the call or the server fails in any way,   *
      *                all further processing is aborted.            *
      *                                                              *
      *==============================================================*
      *
           WRITE OUTPUT-RECORD FROM MSG00.
           WRITE OUTPUT-RECORD FROM MSG01.
           WRITE OUTPUT-RECORD FROM MSG02.
           WRITE OUTPUT-RECORD FROM MSG32.
           WRITE OUTPUT-RECORD FROM MSG02.
           WRITE OUTPUT-RECORD FROM MSG03.
      *
      *  Set up the Commarea for transmission.
      *
           MOVE INIT-CALL TO CALL-TYPE.
           MOVE TARGET-FILE TO FILE-NAME.
           WRITE OUTPUT-RECORD FROM MSG04
      *
      *  Perform the Link Request;
      *
           EXEC CICS LINK PROGRAM(TARGET-PROGRAM)
                          TRANSID(TARGET-TRANSID)
                          APPLID(TARGET-SYSTEM)
                          COMMAREA(COMMAREA)
                          LENGTH(LINK-COM-LEN)
                          DATALENGTH(LINK-DAT-LEN)
                          RETCODE(EXCI-EXEC-RETURN-CODE)
                          SYNCONRETURN
           END-EXEC.
      *
      *  Check on how well the request has performed.  We may have
      *  to abort further processing if either the link, or the
      *  server program failed in any way.
      *
           IF EXEC-RESP IS EQUAL TO ZERO THEN
              PERFORM CHECK-SERVER THRU END-CHECK-SERVER
           ELSE
              PERFORM LINK-NOT-OK.
           IF ABORT IS EQUAL TO YES
              GO TO FINISH-PROGRAM
           ELSE
              GO TO SECTION-2.
      *
      *  The following code performs the required response checking
      *  and will decide whether an abort is neccessary.
      *
       CHECK-SERVER.
           WRITE OUTPUT-RECORD FROM MSG05.
           MOVE CALL-TYPE TO SERVER-RETCODE.
           WRITE OUTPUT-RECORD FROM MSG06.
           IF SERVER-RETCODE IS = RET-BROWSE THEN
              WRITE OUTPUT-RECORD FROM MSG07
              MOVE NOT-YET TO ABORT
              GO TO END-CHECK-SERVER.
           IF SERVER-RETCODE IS = RET-NOBRWS THEN
              WRITE OUTPUT-RECORD FROM MSG09
              WRITE OUTPUT-RECORD FROM MSG14
              MOVE YES TO ABORT
              MOVE 16 TO SAVED-RESPONSE
              GO TO END-CHECK-SERVER.
           IF SERVER-RETCODE IS = RET-NOFILE THEN
              WRITE OUTPUT-RECORD FROM MSG08
              WRITE OUTPUT-RECORD FROM MSG14
              MOVE YES TO ABORT
              MOVE 16 TO SAVED-RESPONSE
              GO TO END-CHECK-SERVER.
           IF SERVER-RETCODE IS = RET-ERROR THEN
              WRITE OUTPUT-RECORD FROM MSG10
              WRITE OUTPUT-RECORD FROM MSG14
              MOVE 16 TO SAVED-RESPONSE
              MOVE YES TO ABORT.
       END-CHECK-SERVER.
           EXIT.
       LINK-NOT-OK.
           WRITE OUTPUT-RECORD FROM MSG11.
           MOVE  EXEC-RESP TO O-RESP.
           MOVE  EXEC-RESP2 TO O-RESP2.
           MOVE  SPACES TO OPAD-ABCODE.
           MOVE  SPACES TO OPAD-ABCODE.
           MOVE  EXEC-ABCODE TO O-ABCODE.
           WRITE OUTPUT-RECORD FROM OUTPUT-RETAREA.
           IF EXEC-MSG-PTR IS NOT EQUAL TO NULLS THEN
              WRITE OUTPUT-RECORD FROM MSG13
              WRITE OUTPUT-RECORD FROM MSG02
              SET ADDRESS OF EXEC-LEVEL-MSG TO EXEC-MSG-PTR
              MOVE SPACES TO OUT-REC
              PERFORM TEST BEFORE
              VARYING SUB FROM 1 BY 1
              UNTIL SUB > EXEC-MSG-LEN
                MOVE EXEC-LEVEL-MSG-TEXT (SUB) TO OUT-REC-ELEM (SUB)
              END-PERFORM
              WRITE OUTPUT-RECORD FROM OUT-REC
              WRITE OUTPUT-RECORD FROM MSG02
           END-IF
           WRITE OUTPUT-RECORD FROM MSG14.
           MOVE YES TO ABORT.
           MOVE EXEC-RESP TO SAVED-RESPONSE.
           EXIT.
      *
      *
       SECTION-2.
      *==============================================================*
      *                                                              *
      *   SECTION-2:   This routine will perform a Call level EXCI   *
      *                request by setting up a Pipe to the target    *
      *                CICS system with Initialise User, Allocate,   *
      *                and Open Pipe calls.  It will then perform a  *
      *                series of DPL calls in succession until the   *
      *                whole of the target file has been retrieved.  *
      *                Each DPL request will call the BATCHSER server*
      *                program defined on the target CICS system with*
      *                the call type of READ.  If an 'Abort Required'*
      *                situation is detected or when the process is  *
      *                complete, then control will pass to Section-3.*
      *                                                              *
      *==============================================================*
      *
           WRITE OUTPUT-RECORD FROM MSG02.
           WRITE OUTPUT-RECORD FROM MSG15.
      *
      *  Perform the Initialise User Call.
      *
           CALL 'DFHXCIS' USING VERSION-1 EXCI-RETURN-CODE USER-TOKEN
                        INIT-USER APPLICATION.
           WRITE OUTPUT-RECORD FROM MSG16.
      *
      *  Perform the Allocate Pipe Call.
      *
           CALL 'DFHXCIS' USING VERSION-1 EXCI-RETURN-CODE USER-TOKEN
                        ALLOCATE-PIPE PIPE-TOKEN TARGET-SYSTEM
                        SPECIFIC-PIPE.
           WRITE OUTPUT-RECORD FROM MSG17.
      *
      *  Perform the Open Pipe Call.
      *
           CALL 'DFHXCIS' USING VERSION-1 EXCI-RETURN-CODE USER-TOKEN
                        OPEN-PIPE PIPE-TOKEN.
           WRITE OUTPUT-RECORD FROM MSG18.
      *
      *  Check to see if the Pipe has been successfully allocated
      *  and opened.  If not, then the DPL request will not work,
      *  so we might as well abort now, and attempt to back out
      *  the connection building.  We could attempt to perform an
      *  EXEC link again to close the target file, but if a pipe
      *  could not be successfully set up manually, there shoud be
      *  no reason to believe that this would work, so don't try it.
      *
           IF EXCI-RESPONSE IS EQUAL TO ZERO THEN
              WRITE OUTPUT-RECORD FROM MSG19
              WRITE OUTPUT-RECORD FROM MSG20
              WRITE OUTPUT-RECORD FROM MSG02
              WRITE OUTPUT-RECORD FROM MSG21
              PERFORM DPL-SECTION THRU END-DPL-SECTION
                 UNTIL ABORT IS EQUAL TO YES
           ELSE
              WRITE OUTPUT-RECORD FROM MSG23
              MOVE  EXCI-RESPONSE TO O-RESP
              MOVE  EXCI-REASON TO O-RESP2
              MOVE  EXCI-SUB-REASON1 TO OEXCI-SUB-REASON1
              WRITE OUTPUT-RECORD FROM OUTPUT-RETAREA
              WRITE OUTPUT-RECORD FROM MSG14
              MOVE EXCI-RESPONSE TO SAVED-RESPONSE
              MOVE YES TO ABORT.
           GO TO SECTION-3.
      *
      *
       DPL-SECTION.
      *==============================================================*
      *                                                              *
      *   DPL-SECTION:   This is the routine which will perform      *
      *                  multiple sequential DPL calls to the target *
      *                  CICS system, each time retrieving a single  *
      *                  record from the target file in the Commarea *
      *                  until the end of the file is reached.  This *
      *                  process is performed on the CICS side by the*
      *                  BATCHSER server with the call type of READ. *
      *                                                              *
      *==============================================================*
      *
      *  No Userid nor Uowid is passed. This shows how to leave out
      *  a parameter from the list. A null pointer must replace the
      *  pointer in the list which would normally point to the parameter
      *  missing.
      *
           SET ADDRESS OF NULL-PTR TO NULLS.
      *
      *  Set up the call, and perform the DPL request.
      *
           MOVE READ-CALL TO CALL-TYPE.
           CALL 'DFHXCIS' USING VERSION-1 EXCI-RETURN-CODE USER-TOKEN
                        DPL-REQUEST PIPE-TOKEN TARGET-PROGRAM COMMAREA
                        COMM-LENGTH DATA-LENGTH TARGET-TRANSID
                        NULL-PTR TARGET-USERID EXCI-DPL-RETAREA
                        SYNCONRETURN.
      *
      *  Check how successful the call was.  If it has worked, then
      *  we have a record on the Commarea to be output to the
      *  SYSPRINT log.
      *
           IF EXCI-RESPONSE IS = ZERO THEN
              IF EXCI-DPL-RESP IS NOT = ZERO THEN
                 WRITE OUTPUT-RECORD FROM MSG25
                 WRITE OUTPUT-RECORD FROM MSG27
                 MOVE  EXCI-DPL-RESP TO O-RESP
                 MOVE  EXCI-DPL-RESP2 TO O-RESP2
                 MOVE  SPACES TO OPAD-ABCODE
                 MOVE  EXCI-DPL-ABCODE TO O-ABCODE
                 WRITE OUTPUT-RECORD FROM OUTPUT-RETAREA
                 WRITE OUTPUT-RECORD FROM MSG14
                 MOVE YES TO ABORT
                 MOVE EXCI-DPL-RESP TO SAVED-RESPONSE
              ELSE
                 MOVE CALL-TYPE TO SERVER-RETCODE
                 IF SERVER-RETCODE IS = RET-ERROR THEN
                    WRITE OUTPUT-RECORD FROM MSG06
                    WRITE OUTPUT-RECORD FROM MSG10
                    MOVE YES TO ABORT
                    MOVE 16 TO SAVED-RESPONSE
                 ELSE
                    WRITE OUTPUT-RECORD FROM RECORD-AREA
           ELSE
              WRITE OUTPUT-RECORD FROM MSG25
              WRITE OUTPUT-RECORD FROM MSG26
              MOVE  EXCI-RESPONSE TO O-RESP
              MOVE  EXCI-REASON TO O-RESP2
              MOVE  EXCI-SUB-REASON1 TO OEXCI-SUB-REASON1
              WRITE OUTPUT-RECORD FROM OUTPUT-RETAREA
              IF EXCI-MSG-PTR IS NOT EQUAL TO NULLS THEN
                 WRITE OUTPUT-RECORD FROM MSG13
                 WRITE OUTPUT-RECORD FROM MSG02
                 SET ADDRESS OF CALL-LEVEL-MSG TO EXCI-MSG-PTR
                 MOVE SPACES TO OUT-REC
                 SUBTRACT 4 FROM CALL-LEVEL-MSG-LEN
                 PERFORM TEST BEFORE
                 VARYING SUB FROM 1 BY 1
                 UNTIL SUB > CALL-LEVEL-MSG-LEN
                   MOVE CALL-LEVEL-MSG-TEXT (SUB) TO OUT-REC-ELEM (SUB)
                 END-PERFORM
                 WRITE OUTPUT-RECORD FROM OUT-REC
                 WRITE OUTPUT-RECORD FROM MSG02
              END-IF
              WRITE OUTPUT-RECORD FROM MSG27
              MOVE  EXCI-DPL-RESP TO O-RESP
              MOVE  EXCI-DPL-RESP2 TO O-RESP2
              MOVE  SPACES TO OPAD-ABCODE
              MOVE  EXCI-DPL-ABCODE TO O-ABCODE
              WRITE OUTPUT-RECORD FROM OUTPUT-RETAREA
              WRITE OUTPUT-RECORD FROM MSG14
              MOVE YES TO ABORT.
              MOVE EXCI-RESPONSE TO SAVED-RESPONSE
           IF SERVER-RETCODE IS = RET-EOF THEN
              WRITE OUTPUT-RECORD FROM MSG22
              WRITE OUTPUT-RECORD FROM MSG02
              MOVE YES TO ABORT.
       END-DPL-SECTION.
           EXIT.
      *
      *
       SECTION-3.
      *==============================================================*
      *                                                              *
      *   SECTION-3:  Whether or not SECTION-II processing was a     *
      *               success, we assume that at least all the calls *
      *               were completed. Hence we perform a further DPL *
      *               call to the server program to set the Target   *
      *               file Closed, and continue by Closing and       *
      *               Deallocating the Pipe to the Target CICS system*
      *               to shut down the Link before exiting to MVS.   *
      *                                                              *
      *==============================================================*
      *
      *  Set up and perform the last DPL call.
      *
           MOVE CLOSE-CALL TO CALL-TYPE.
           CALL 'DFHXCIS' USING VERSION-1 EXCI-RETURN-CODE USER-TOKEN
                        DPL-REQUEST PIPE-TOKEN TARGET-PROGRAM COMMAREA
                        DATA-LENGTH DATA-LENGTH TARGET-TRANSID
                        NULL-PTR TARGET-USERID
                        EXCI-DPL-RETAREA SYNCONRETURN
           WRITE OUTPUT-RECORD FROM MSG28.
      *
      *  Perform Close Pipe call.
      *
           CALL 'DFHXCIS' USING VERSION-1 EXCI-RETURN-CODE USER-TOKEN
                        CLOSE-PIPE PIPE-TOKEN.
           WRITE OUTPUT-RECORD FROM MSG29.
      *
      *  Perform Deallocate Pipe call.
      *
           CALL 'DFHXCIS' USING VERSION-1 EXCI-RETURN-CODE USER-TOKEN
                        DEALLOCATE-PIPE PIPE-TOKEN.
           WRITE OUTPUT-RECORD FROM MSG30.
      *
      *  Exit to MVS.
      *
       FINISH-PROGRAM.
           WRITE OUTPUT-RECORD FROM MSG02.
           WRITE OUTPUT-RECORD FROM MSG31.
           CLOSE PRINTER.
           MOVE SAVED-RESPONSE TO RETURN-CODE.
           STOP RUN.
