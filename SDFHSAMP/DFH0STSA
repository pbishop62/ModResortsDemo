      CBL CICS('COBOL3,SP') APOST
PROCESS MAP,XREF,TRUNC(BIN)
      *****************************************************************
      *                                                               *
      * MODULE NAME = DFH0STSA                                        *
      *                                                               *
      * DESCRIPTIVE NAME = Collect and Print Statistics Sample        *
      *                                                               *
      *                                                               *
      *                                                               *
      *      Licensed Materials - Property of IBM                     *
      *                                                               *
      *      "Restricted Materials of IBM"                            *
      *                                                               *
      *      5655-Y04                                                 *
      *                                                               *
      *      (C) Copyright IBM Corp. 2008, 2015"                      *
      *                                                               *
      *                                                               *
      *                                                               *
      *                                                               *
      * STATUS = 7.2.0                                                *
      *                                                               *
      *---------------------------------------------------------------*
      *                                                               *
      * DESCRIPTION :                                                 *
      *                                                               *
      *     This set of programs illustrate ways of using the EXEC    *
      *     CICS INQUIRE, COLLECT and EXTRACT STATISTICS commands of  *
      *     CICS to produce information about a CICS system.          *
      *     The reports include a CICS and MVS storage analysis.      *
      *     Statistics obtained using these commands can be used to   *
      *     aid the specification of the DSA Size parameters.         *
      *     (See the CICS Performance Guide and CICS Data Areas       *
      *     manuals for more information, and the CICS System         *
      *     Programming Reference for use of commands)                *
      *                                                               *
      *     These programs can be invoked from the PLT at PLTSD or    *
      *     as a CICS transaction (conversationally).                 *
      *     The output is sent via the CICS JES SPOOL interface for   *
      *     which a number of default parameters can be changed by    *
      *     the user to specify the distribution of the report(s).    *
      *     These defaults are defined in the working-storage         *
      *     section of the DFH0STAT program under the 01 level        *
      *     "OUTPUT-DEFAULTS".                                        *
      *                                                               *
      *     Installation instructions:-                               *
      *     Require SIT parameters:-  SPOOL=YES                       *
      *     Required CICS definitions:-                               *
      *         Transactions:-  STAT -> DFH0STAT                      *
      *         Programs:-    DFH0STAT   IBM COBOL                    *
      *                       DFH0STDB       for OS/390 & VM          *
      *                       DFH0STEJ           2.1.1 or later       *
      *                       DFH0STEP       "   "   "                *
      *                       DFH0STGN       "   "   "                *
      *                       DFH0STLK       "   "   "                *
      *                       DFH0STPR       "   "   "                *
      *                       DFH0STSA       "   "   "                *
      *                       DFH0STSY       "   "   "                *
      *                       DFH0STTP       "   "   "                *
      *                       DFH0STTS       "   "   "                *
      *                       DFH0STWB       "   "   "                *
      *                       DFH$STAS   Assembler                    *
      *                       DFH$STCN   Assembler                    *
      *                       DFH$STTB   Assembler                    *
      *         Mapsets:-     DFH0STM                                 *
      *                       DFH0STS                                 *
      *                                                               *
      *     The CICS-supplied RDO group, DFH$STAT, contains all       *
      *     the necessary resource definitions for this sample.       *
      *                                                               *
      *     All programs are command level and run above the          *
      *     16Mb line. Note: that DFH0STAT, DFH0STDB, DFH0STEJ,       *
      *     DFH0STEP, DFH0STGN, DFH0STLK, DFH0STPR, DFH0STSA,         *
      *     DFH0STSY, DFH0STTP, DFH0STTS, and DFH0STWB must be        *
      *     translated with the Translator options "COBOL3 and SP".   *
      *                                                               *
      *   SPOOL errors.  If an EXEC CICS SPOOL .. command fails       *
      *   when the program is run as a transaction, an error message  *
      *   is displayed on the user's screen and the transaction will  *
      *   continue.  If the program is not being run from a terminal  *
      *   then a message will be sent to the console using EXEC       *
      *   CICS WRITE OPERATOR commands and the transaction will be    *
      *   terminated normally.                                        *
      *                                                               *
      *---------------------------------------------------------------*
      *                                                               *
      * CHANGE ACTIVITY :                                             *
      * $SEG(DFH0STSA), COMP(SAMPLES) PROD(CICS)                      *
      *                                                               *
      *  PN= REASON REL YYMMDD HDXIII : REMARKS                       *
      * $L0= 923    660 080516 HD1VCJB : Module creation              *
      * $L1= 927    660 080604 HD1VCJB: Event Processing Support      *
      * $L3= R00203 670 100415 HD1VCJB: Trace table above the bar     *
      * $L4= R00114 670 101014 HD1VCJB: 64-bit Storage Statistics     *
      * $L5= R00327 670 101111 HD1VCJB: Storage Statistics Update     *
      *      R31410 680 111025 HD1VCJB: GxDSA Support                 *
      *      R38042 690 130404 HDAFDRB: Use EXTRACT STATISTICS        *
      *      R74946 690 131011 HD1VCJB: Monitoring Performance Metrics*
      * $P1= D11296 670 100412 HDFXAB : Missing memlimit info         *
      * $P2= D23175 670 101209 HD1VCJB: Update 64-bit Storage Report  *
      * $P3= D27982 670 110322 HD1VCJB: 64-bit S2 Performance Updates *
      *      D38606 680 111118 HD1VCJB: Incorrect % EUDSA calculation *
      *      D54219 680 120627 HD1VCJB: Incorrect GSDSA Calculation   *
      *      D58352 680 120904 HD1VCJB: Improve GDSA Stats reports    *
      *      D98593 700 150106 HD3BADW: Fix comments                  *
      *     D151284 720 180824 HDLHJJH: Improve for capacity planning *
      *     D150786 720 181023 HDFVGMB: Add TRUNC(BIN) to PROCESS     *
      *                                                               *
      *****************************************************************
       ID DIVISION.
       PROGRAM-ID. DFH0STSA.

       ENVIRONMENT DIVISION.
           EJECT
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  STAS-COMMAREA               PIC S9(4)  COMP.
       77  STCN-COMMAREA               PIC S9(4)  COMP.
       77  COLLECT-RESP                PIC S9(8)  COMP VALUE +0.
       77  INQUIRE-RESP                PIC S9(8)  COMP VALUE +0.

       77  SUB1                        PIC S9(4)  COMP VALUE +0.
       77  SUB2                        PIC S9(4)  COMP VALUE +0.
       77  SUB3                        PIC S9(4)  COMP VALUE +0.
       77  CONCAT-NUMBER               PIC S9(4)  COMP VALUE +0.

       77  PERCENTAGE-WORK             PIC 999V9999    VALUE 0.
       77  PERCENTAGE                  PIC 999V99      VALUE 0.
       77  RESULT                      PIC S9(8)  COMP VALUE +0.
       77  RESULT-WORK                 PIC 9(18)  COMP VALUE 0.
       77  WORK-FIELD                  PIC S9(8)  COMP VALUE +0.

       77  MEMLIMIT-SIZE               PIC 9(8)   COMP VALUE 0.
       77  MEMLIMIT-UNITS              PIC X           VALUE 'M'.
       77  BIG-RESULT                  PIC 9(18)  COMP VALUE 0.
       77  BIG-RESULT2                 PIC 9(18)  COMP VALUE 0.
       77  BIG-RESULT-SIGNED           PIC S9(18) COMP VALUE +0.
       77  ONE-MEGABYTE                PIC 9(8)   COMP VALUE 1048576.
       77  ONE-GIGABYTE                PIC 9(8)   COMP VALUE 1024.

       77  PROGRAM-LOAD-RATE           PIC 9(6)V99     VALUE 0.

       77  RTM-STORAGE-BELOW           PIC 9(8)   COMP VALUE 256000.
       77  SYSTEM-STORAGE-BELOW        PIC 9(8)   COMP VALUE 20480.
       77  TRACE-TABLE-SIZE            PIC S9(8)  COMP VALUE 0.
       77  TSMAIN-LIMIT                PIC 9(18)  COMP VALUE 0.

       77  DSA-LIMIT                   PIC S9(8)  COMP VALUE +0.
       77  EDSA-LIMIT                  PIC S9(8)  COMP VALUE +0.

       77  CDSA-SIZE                   PIC S9(8)  COMP VALUE +0.
       77  UDSA-SIZE                   PIC S9(8)  COMP VALUE +0.
       77  SDSA-SIZE                   PIC S9(8)  COMP VALUE +0.
       77  RDSA-SIZE                   PIC S9(8)  COMP VALUE +0.
       77  ECDSA-SIZE                  PIC S9(8)  COMP VALUE +0.
       77  EUDSA-SIZE                  PIC S9(8)  COMP VALUE +0.
       77  ESDSA-SIZE                  PIC S9(8)  COMP VALUE +0.
       77  ERDSA-SIZE                  PIC S9(8)  COMP VALUE +0.
       77  ETDSA-SIZE                  PIC S9(8)  COMP VALUE +0.
       77  GCDSA-SIZE                  PIC S9(8)  COMP VALUE +0.
       77  GUDSA-SIZE                  PIC S9(8)  COMP VALUE +0.
       77  GSDSA-SIZE                  PIC S9(8)  COMP VALUE +0.
       77  FREE-STORAGE-FACTOR         PIC 999V99      VALUE 0.
       77  PROGRAM-USE-LOAD-RATIO      PIC 9(7)V99     VALUE 0.

       77  DSA-SIZE                    PIC 9(8)   COMP VALUE 0.
       77  DSA-FREE                    PIC 9(8)   COMP VALUE 0.
       77  DSA-USED                    PIC 9(8)   COMP VALUE 0.
       77  SUBPOOL-NAME                PIC X(8)        VALUE SPACES.

       77  LIBRARY-CRITICAL            PIC S9(8)  COMP VALUE +0.
       77  LIBRARY-ENABLE-STATUS       PIC S9(8)  COMP VALUE +0.
       77  LIBRARY-NAME                PIC X(8)        VALUE SPACES.
       77  LIBRARY-NUMBER-OF-DSNAMES   PIC S9(8)  COMP VALUE +0.
       77  LIBRARY-RANKING             PIC S9(8)  COMP VALUE +0.
       77  LIBRARY-SEARCH-POSITION     PIC S9(8)  COMP VALUE +0.

      *****************************************************************
      ***  Subpool total fields for Storage Manager Analysis.       ***
      *****************************************************************
       01  DOMAIN-SUBPOOL-TOTALS.
           03  SUBPOOL-TOTAL    OCCURS 9.
               05  DOMAIN-SUBPOOLS             PIC S9(9)  COMP-3.
               05  DOMAIN-SUBPOOL-GETMAINS     PIC S9(9)  COMP-3.
               05  DOMAIN-SUBPOOL-FREEMAINS    PIC S9(9)  COMP-3.
               05  DOMAIN-SUBPOOL-ELEMENTS     PIC S9(9)  COMP-3.
               05  DOMAIN-SUBPOOL-ELEMENT-STG  PIC S9(9)  COMP-3.
               05  DOMAIN-SUBPOOL-PAGE-STG     PIC S9(9)  COMP-3.
           EJECT
      *****************************************************************
      ***  Selected Storage Domain Domain Subpools.                 ***
      *****************************************************************
       01  SM-DOMAIN-SUBPOOLS.
           03  SM-DOMAIN-SUBPOOL-DATA.
               05  FILLER              PIC X(8)        VALUE 'LDNRS   '.
               05  FILLER              PIC X(8)        VALUE SPACES.
               05  LD-NRS              PIC S9(8)  COMP VALUE +0.
               05  LD-NRS-HWM          PIC S9(8)  COMP VALUE +0.
               05  FILLER              PIC X(8)        VALUE 'LDNUC   '.
               05  FILLER              PIC X(8)        VALUE SPACES.
               05  LD-NUC              PIC S9(8)  COMP VALUE +0.
               05  LD-NUC-HWM          PIC S9(8)  COMP VALUE +0.
               05  FILLER              PIC X(8)        VALUE 'LDPGM   '.
               05  FILLER              PIC X(8)        VALUE SPACES.
               05  LD-PGM              PIC S9(8)  COMP VALUE +0.
               05  LD-PGM-HWM          PIC S9(8)  COMP VALUE +0.
               05  FILLER              PIC X(8)        VALUE 'LDRES   '.
               05  FILLER              PIC X(8)        VALUE SPACES.
               05  LD-RES              PIC S9(8)  COMP VALUE +0.
               05  LD-RES-HWM          PIC S9(8)  COMP VALUE +0.
               05  FILLER              PIC X(8)        VALUE 'LDNRSRO '.
               05  FILLER              PIC X(8)        VALUE SPACES.
               05  LD-NRSRO            PIC S9(8)  COMP VALUE +0.
               05  LD-NRSRO-HWM        PIC S9(8)  COMP VALUE +0.
               05  FILLER              PIC X(8)        VALUE 'LDNUCRO '.
               05  FILLER              PIC X(8)        VALUE SPACES.
               05  LD-NUCRO            PIC S9(8)  COMP VALUE +0.
               05  LD-NUCRO-HWM        PIC S9(8)  COMP VALUE +0.
               05  FILLER              PIC X(8)        VALUE 'LDPGMRO '.
               05  FILLER              PIC X(8)        VALUE SPACES.
               05  LD-PGMRO            PIC S9(8)  COMP VALUE +0.
               05  LD-PGMRO-HWM        PIC S9(8)  COMP VALUE +0.
               05  FILLER              PIC X(8)        VALUE 'LDRESRO '.
               05  FILLER              PIC X(8)        VALUE SPACES.
               05  LD-RESRO            PIC S9(8)  COMP VALUE +0.
               05  LD-RESRO-HWM        PIC S9(8)  COMP VALUE +0.
               05  FILLER              PIC X(8)        VALUE 'LDENRS  '.
               05  FILLER              PIC X(8)        VALUE SPACES.
               05  LD-ENRS             PIC S9(8)  COMP VALUE +0.
               05  LD-ENRS-HWM         PIC S9(8)  COMP VALUE +0.
               05  FILLER              PIC X(8)        VALUE 'LDENUC  '.
               05  FILLER              PIC X(8)        VALUE SPACES.
               05  LD-ENUC             PIC S9(8)  COMP VALUE +0.
               05  LD-ENUC-HWM         PIC S9(8)  COMP VALUE +0.
               05  FILLER              PIC X(8)        VALUE 'LDEPGM  '.
               05  FILLER              PIC X(8)        VALUE SPACES.
               05  LD-EPGM             PIC S9(8)  COMP VALUE +0.
               05  LD-EPGM-HWM         PIC S9(8)  COMP VALUE +0.
               05  FILLER              PIC X(8)        VALUE 'LDERES  '.
               05  FILLER              PIC X(8)        VALUE SPACES.
               05  LD-ERES             PIC S9(8)  COMP VALUE +0.
               05  LD-ERES-HWM         PIC S9(8)  COMP VALUE +0.
               05  FILLER              PIC X(8)        VALUE 'LDENRSRO'.
               05  FILLER              PIC X(8)        VALUE SPACES.
               05  LD-ENRSRO           PIC S9(8)  COMP VALUE +0.
               05  LD-ENRSRO-HWM       PIC S9(8)  COMP VALUE +0.
               05  FILLER              PIC X(8)        VALUE 'LDENUCRO'.
               05  FILLER              PIC X(8)        VALUE SPACES.
               05  LD-ENUCRO           PIC S9(8)  COMP VALUE +0.
               05  LD-ENUCRO-HWM       PIC S9(8)  COMP VALUE +0.
               05  FILLER              PIC X(8)        VALUE 'LDEPGMRO'.
               05  FILLER              PIC X(8)        VALUE SPACES.
               05  LD-EPGMRO           PIC S9(8)  COMP VALUE +0.
               05  LD-EPGMRO-HWM       PIC S9(8)  COMP VALUE +0.
               05  FILLER              PIC X(8)        VALUE 'LDERESRO'.
               05  FILLER              PIC X(8)        VALUE SPACES.
               05  LD-ERESRO           PIC S9(8)  COMP VALUE +0.
               05  LD-ERESRO-HWM       PIC S9(8)  COMP VALUE +0.
           03  FILLER REDEFINES SM-DOMAIN-SUBPOOL-DATA OCCURS 16.
               05  SM-SUBPOOL-NAME         PIC X(8).
               05  SM-SUBPOOL-DSANAME      PIC X(8).
               05  SM-SUBPOOL-STG          PIC S9(8)  COMP.
               05  SM-SUBPOOL-STG-HWM      PIC S9(8)  COMP.
           EJECT
      *****************************************************************
      *** Fields for data obtained from called program DFH$STAS     ***
      *** This structure must match the DSECT ASCB_FIELDS in the    ***
      *** called program DFH$STAS                                   ***
      *****************************************************************
       01  STATASCB-FIELDS.
           03  ASCB-STORAGE-FIELDS.
               05  MVS-PROD-NAME           PIC X(8)    VALUE SPACES.
               05  ADSP-TCTLWM             PIC 9(8)  COMP   VALUE 0.
               05  ADSP-TCTHWM             PIC 9(8)  COMP   VALUE 0.
               05  ADSP-TCTELWM            PIC 9(8)  COMP   VALUE 0.
               05  ADSP-TCTEHWM            PIC 9(8)  COMP   VALUE 0.
               05  REGION-SIZE-BELOW       PIC 9(8)  COMP   VALUE 0.
               05  REGION-SIZE-ABOVE       PIC 9(8)  COMP   VALUE 0.
               05  REGION-SIZE-ESTABLISHED PIC 9(8)  COMP   VALUE 0.
               05  FILLER                  PIC XX      VALUE SPACES.
               05  CPU-MODEL               PIC XX    VALUE LOW-VALUES.
               05  ADSP-CPU-TIME           PIC X(8)  VALUE LOW-VALUES.
               05  ADSP-SRB-TIME           PIC X(8)  VALUE LOW-VALUES.
               05  CURRENT-TOD-STCK        PIC X(8)  VALUE LOW-VALUES.
               05  FILLER                  PIC X(8)  VALUE LOW-VALUES.
               05  FILLER                  PIC X(8)  VALUE LOW-VALUES.
               05  EPVT-SIZE               PIC 9(8)  COMP   VALUE 0.
               05  ECSA-SIZE               PIC 9(8)  COMP   VALUE 0.
               05  ESQA-SIZE               PIC 9(8)  COMP   VALUE 0.
               05  SQA-SIZE                PIC 9(8)  COMP   VALUE 0.
               05  CSA-SIZE                PIC 9(8)  COMP   VALUE 0.
               05  PVT-SIZE                PIC 9(8)  COMP   VALUE 0.
               05  ECSA-ALLOCATED          PIC 9(8)  COMP   VALUE 0.
               05  ESQA-ALLOCATED          PIC 9(8)  COMP   VALUE 0.
               05  SQA-ALLOCATED           PIC 9(8)  COMP   VALUE 0.
               05  CSA-ALLOCATED           PIC 9(8)  COMP   VALUE 0.
               05  ECSA-CONVERTED-TO-ESQA  PIC 9(8)  COMP   VALUE 0.
               05  CSA-CONVERTED-TO-SQA    PIC 9(8)  COMP   VALUE 0.
           EJECT
      *****************************************************************
      ***  Report print line definitions                            ***
      *****************************************************************
       01  PRINT-LINE.
           03  PRINT-CONTROL           PIC X.
           03  PP1-132.
               05  PP1                 PIC X.
               05  FILLER              PIC X.
               05  PP3-33              PIC X(31).
               05  FILLER              PIC XX.
               05  PP36-49.
                   07  FILLER          PIC X(4).
                   07  PP40-49         PIC ZZ,ZZZ,ZZ9.
               05  FILLER REDEFINES PP36-49.
                   07  FILLER          PIC X.
                   07  PP37-49         PIC Z,ZZZ,ZZZ,ZZ9.
               05  FILLER REDEFINES PP36-49.
                   07  FILLER          PIC X(6).
                   07  PP42-49         PIC X(8).
               05  PP50                PIC X.
               05  FILLER              PIC XX.
               05  PP53-66.
                   07  FILLER          PIC X(4).
                   07  PP57-66         PIC ZZ,ZZZ,ZZ9.
               05  FILLER REDEFINES PP53-66.
                   07  FILLER          PIC X.
                   07  PP54-66         PIC Z,ZZZ,ZZZ,ZZ9.
               05  FILLER REDEFINES PP53-66.
                   07  FILLER          PIC X(6).
                   07  PP59-66         PIC X(8).
               05  PP67                PIC X.
               05  FILLER              PIC XX.
               05  PP70-83.
                   07  FILLER          PIC X(4).
                   07  PP74-83         PIC ZZ,ZZZ,ZZ9.
               05  FILLER REDEFINES PP70-83.
                   07  FILLER          PIC X.
                   07  PP71-83         PIC Z,ZZZ,ZZZ,ZZ9.
               05  PP84                PIC X.
               05  FILLER              PIC XX.
               05  PP87-100.
                   07  FILLER          PIC X(4).
                   07  PP91-100        PIC ZZ,ZZZ,ZZ9.
               05  FILLER REDEFINES PP87-100.
                   07  FILLER          PIC X.
                   07  PP88-100        PIC Z,ZZZ,ZZZ,ZZ9.
               05  PP101               PIC X.
               05  FILLER              PIC XX.
               05  PP104-117.
                   07  FILLER          PIC X(4).
                   07  PP108-117       PIC ZZ,ZZZ,ZZ9.
               05  PP118               PIC X.
               05  FILLER              PIC X.
               05  PP120-132           PIC Z,ZZZ,ZZZ,ZZ9.
           03 FILLER REDEFINES PP1-132.
               05  PP1-31.
                   07  PP1-29.
                       09  PP1-26      PIC X(26).
                       09  FILLER      PIC XXX.
                   07  FILLER          PIC XX.
               05  FILLER              PIC X(12).
               05  PP44-49             PIC ZZ9.99.
               05  FILLER              PIC X(11).
               05  PP61-66N            PIC ZZ9.99.
               05  FILLER              PIC X(9).
               05  PP76-83.
                   07  FILLER          PIC XX.
                   07  PP78-83         PIC ZZ9.99.
               05  FILLER              PIC X(9).
               05  PP93-100.
                   07  FILLER          PIC XX.
                   07  PP95-100        PIC ZZ9.99.
               05  FILLER              PIC X(9).
               05  PP110-117.
                   07  FILLER          PIC XX.
                   07  PP112-117       PIC ZZ9.99.
               05  FILLER              PIC X(15).
           03 FILLER REDEFINES PP1-132.
               05  PP1-25.
                   07  PP1-23          PIC X(23).
                   07  FILLER          PIC XX.
               05  FILLER              PIC X(10).
               05  PP36-50             PIC X(15).
               05  FILLER              PIC X(82).
           03 FILLER REDEFINES PP1-132.
               05  FILLER              PIC X(44).
               05  PP45-59.
                   07  FILLER          PIC X(8).
                   07  PP53-59         PIC X(7).
               05  FILLER              PIC X(5).
               05  PP65-71             PIC X(7).
               05  FILLER              PIC X(61).
           03 FILLER REDEFINES PP1-132.
               05  FILLER              PIC XX.
               05  PP3-50              PIC X(48).
               05  FILLER              PIC X(7).
               05  PP58-67             PIC --,---,--9.
               05  PP68                PIC X.
               05  PP69-116.
                   07  PP69-73         PIC X(5).
                   07  FILLER          PIC X(43).
               05  FILLER              PIC X(4).
               05  PP121-132           PIC Z,ZZZ,ZZ9.99.
           03 FILLER REDEFINES PP1-132.
               05  FILLER              PIC X(12).
               05  PP13-22             PIC ZZ,ZZZ,ZZ9.
               05  FILLER              PIC XX.
               05  PP25-37             PIC Z,ZZZ,ZZZ,ZZ9.
               05  FILLER              PIC XX.
               05  PP40-52             PIC Z,ZZZ,ZZZ,ZZ9.
               05  FILLER              PIC XX.
               05  FILLER              PIC X(78).
           03 FILLER REDEFINES PP1-132.
               05  FILLER              PIC X(20).
               05  PP21-33             PIC Z,ZZZ,ZZZ,ZZ9.
               05  FILLER              PIC XX.
               05  PP36-48             PIC Z,ZZZ,ZZZ,ZZ9.
               05  FILLER              PIC X(6).
               05  PP55-64             PIC ZZ,ZZZ,ZZ9.
               05  FILLER              PIC XX.
               05  PP67-79             PIC Z,ZZZ,ZZZ,ZZ9.
               05  FILLER              PIC X(12).
               05  PP92                PIC X.
               05  FILLER              PIC X(12).
               05  PP105-110           PIC Z99.99.
               05  PP111               PIC X.
               05  FILLER              PIC XX.
               05  PP114-123           PIC ZZ,ZZZ,ZZ9.
               05  PP124               PIC X.
               05  FILLER              PIC X(8).
           03 FILLER REDEFINES PP1-132.
               05  PP1-18.
                   07  PP1-17      PIC X(17).
                   07  FILLER      PIC X.
               05  FILLER REDEFINES PP1-18.
                   07  PP1-15.
                       09  PP1-8.
                           11  PP1-6   PIC X(6).
                           11  FILLER  PIC XX.
                       09  FILLER      PIC X(7).
                   07  FILLER          PIC XXX.
               05  FILLER              PIC X(17).
               05  PP36-132.
                   07  PP36-118        PIC X(83).
                   07  FILLER          PIC X.
                   07  PP120           PIC X.
                   07  FILLER          PIC X.
                   07  PP122-131       PIC ZZ,ZZZ,ZZ9.
                   07  PP132           PIC X.
           03 FILLER REDEFINES PP1-132.
               05  FILLER              PIC XX.
               05  PP3-68.
                   07  PP3-55.
                       09  PP3-52      PIC X(50).
                       09  FILLER      PIC XXX.
                   07  FILLER          PIC X(13).
               05  FILLER              PIC X(6).
               05  PP75-116            PIC X(42).
               05  FILLER              PIC X(16).
           03 FILLER REDEFINES PP1-132.
               05  FILLER              PIC XX.
               05  PP3-6               PIC X(4).
               05  FILLER              PIC X(42).
               05  PP49                PIC X.
               05  FILLER              PIC X.
               05  PP51-56             PIC ZZ9.99.
               05  PP57-66X            PIC X(10).
               05  FILLER              PIC XX.
               05  PP69-103            PIC X(35).
               05  FILLER              PIC X(11).
               05  PP115               PIC X.
               05  FILLER              PIC X.
               05  PP117-122           PIC ZZ9.99.
               05  PP123-132           PIC X(10).
           03 FILLER REDEFINES PP1-132.
               05  FILLER              PIC XX.
               05  PP3-10              PIC X(8).
               05  FILLER              PIC XX.
               05  PP13-20             PIC X(8).
               05  FILLER              PIC XX.
               05  PP23-30             PIC X(8).
               05  FILLER              PIC XX.
               05  PP33-40             PIC X(8).
               05  FILLER              PIC XX.
               05  PP43-52             PIC ZZ,ZZZ,ZZ9.
               05  FILLER              PIC XX.
               05  FILLER              PIC ZZ,ZZZ,ZZ9.
               05  FILLER              PIC X.
               05  FILLER              PIC XX.
               05  PP68-77             PIC ZZ,ZZZ,ZZ9.
               05  FILLER              PIC XX.
               05  PP80-92             PIC Z,ZZZ,ZZZ,ZZ9.
               05  FILLER              PIC XX.
               05  PP95-104            PIC ZZ,ZZZ,ZZ9.
               05  PP105               PIC X.
               05  FILLER              PIC XX.
               05  PP108-113N          PIC ZZ9.99.
               05  PP114               PIC X.
               05  FILLER              PIC XX.
               05  PP117-126           PIC ZZ,ZZZ,ZZ9.
               05  PP127               PIC X.
               05  FILLER              PIC X(5).
           03 FILLER REDEFINES PP1-132.
               05  FILLER              PIC X(22).
               05  PP23-35             PIC Z,ZZZ,ZZZ,ZZ9.
               05  FILLER              PIC XX.
               05  PP38-50             PIC Z,ZZZ,ZZZ,ZZ9.
               05  FILLER              PIC X(20).
               05  PP71-113            PIC X(43).
               05  FILLER              PIC X(19).
           03 FILLER REDEFINES PP1-132.
               05  FILLER              PIC X(13).
               05  PP14-17             PIC X(4).
               05  FILLER              PIC X(44).
               05  PP63-112.
                   07  FILLER          PIC X(12).
                   07  PP75-105        PIC X(31).
                   07  FILLER          PIC X(7).
               05  FILLER              PIC X(12).
               05  PP124-132           PIC ZZ,ZZ9.99.
           03 FILLER REDEFINES PP1-132.
               05  FILLER              PIC X(22).
               05  PP23-32             PIC ZZ,ZZZ,ZZ9.
               05  PP33                PIC X.
               05  FILLER              PIC XX.
               05  PP36-45             PIC ZZ,ZZZ,ZZ9.
               05  PP46                PIC X.
               05  FILLER              PIC X(18).
               05  PP65                PIC X.
               05  FILLER              PIC X(49).
               05  PP115-132           PIC ZZ,ZZZ,ZZZ,ZZZ,ZZ9.
           03 FILLER REDEFINES PP1-132.
               05  FILLER              PIC X(52).
               05  PP53-62             PIC ZZ,ZZZ,ZZ9.
               05  FILLER              PIC XX.
               05  PP65-77             PIC Z,ZZZ,ZZZ,ZZ9.
               05  FILLER              PIC XX.
               05  PP80-89             PIC ZZ,ZZZ,ZZ9.
               05  PP90                PIC X.
               05  FILLER              PIC XX.
               05  PP93-102            PIC ZZ,ZZZ,ZZ9.
               05  PP103               PIC X.
               05  FILLER              PIC X(29).
           03 FILLER REDEFINES PP1-132.
               05  FILLER              PIC XX.
               05  PP3-8               PIC X(6).
               05  FILLER              PIC X(30).
               05  PP39-48N            PIC ZZ,ZZZ,ZZ9.
               05  FILLER              PIC XX.
               05  PP51-60             PIC ZZ,ZZZ,ZZ9.
               05  FILLER              PIC XX.
               05  PP63-75             PIC Z,ZZZ,ZZZ,ZZ9.
               05  FILLER              PIC XX.
               05  FILLER              PIC X.
               05  PP79-88             PIC ZZ,ZZZ,ZZ9.
               05  FILLER              PIC XXX.
               05  PP92-101            PIC ZZ,ZZZ,ZZ9.
               05  PP102               PIC X.
               05  FILLER              PIC XX.
               05  PP105-114           PIC ZZ,ZZZ,ZZ9.
               05  FILLER              PIC X(8).
               05  PP123-132N          PIC ZZ,ZZZ,ZZ9.
           03  FILLER REDEFINES PP1-132.
               05  FILLER              PIC XX.
               05  PP3-40              PIC X(38).
               05  FILLER              PIC X.
               05  PP42-59             PIC ZZ,ZZZ,ZZZ,ZZZ,ZZ9.
               05  FILLER REDEFINES PP42-59.
                   07  PP42-58         PIC Z,ZZZ,ZZZ,ZZZ,ZZ9.
                   07  PP59            PIC X.
               05  FILLER              PIC X(22).
               05  PP82-91             PIC ZZ,ZZZ,ZZ9.
               05  FILLER              PIC X(27).
               05  PP119-132           PIC X(14).
           03 FILLER REDEFINES PP1-132.
               05  FILLER              PIC XX.
               05  PP3-54              PIC X(52).
               05  FILLER              PIC XX.
               05  PP57-71             PIC ZZZ,ZZZ,ZZZ,ZZ9.
               05  FILLER REDEFINES PP57-71.
                   07  PP57-70         PIC ZZ,ZZZ,ZZZ,ZZ9.
                   07  PP71            PIC X.
               05  FILLER              PIC XX.
               05  PP74                PIC X.
               05  FILLER              PIC XX.
               05  PP77-94             PIC ZZ,ZZZ,ZZZ,ZZZ,ZZ9.
               05  FILLER              PIC X(38).
           03 FILLER REDEFINES PP1-132.
               05  FILLER              PIC X(14).
               05  PP15-18             PIC ZZZ9.
               05  FILLER              PIC X(5).
               05  PP24-25             PIC Z9.
               05  FILLER              PIC X(6).
               05  PP32-34             PIC XXX.
               05  FILLER              PIC X(4).
               05  PP39-48             PIC X(10).
               05  FILLER              PIC X(16).
               05  PP65-67N            PIC ZZ9.
               05  FILLER              PIC X(6).
               05  PP74-76             PIC ZZ9.
               05  FILLER              PIC X(4).
               05  PP81-124            PIC X(44).
               05  FILLER              PIC X(4).
               05  PP129-130           PIC 99.
               05  FILLER              PIC XX.
           03 FILLER REDEFINES PP1-132.
               05  FILLER              PIC XX.
               05  PP3-9.
                   07  FILLER          PIC X.
                   07  PP4-7           PIC ZZZ9.
                   07  FILLER          PIC XX.
               05  FILLER              PIC XX.
               05  PP12-55             PIC X(44).
               05  FILLER              PIC X(4).
               05  PP60-61             PIC 99.
               05  FILLER              PIC X(4).
               05  PP66-73             PIC X(8).
               05  FILLER              PIC XX.
               05  FILLER              PIC XXX.
               05  PP79-80             PIC Z9.
               05  FILLER              PIC X(7).
               05  PP88-90             PIC XXX.
               05  FILLER              PIC X(42).
           03 FILLER REDEFINES PP1-132.
               05  FILLER              PIC XX.
               05  PP3-132.
                   07  PP3-102.
                       09  PP3-72.
                           11  PP3-37  PIC X(35).
                           11  PP38-72 PIC X(35).
                       09  PP73-102    PIC X(30).
                   07  PP103-132       PIC X(30).
           EJECT
       LINKAGE SECTION.
           EJECT
      *****************************************************************
      ***  Statistics Sample Programs Commarea.                     ***
      *****************************************************************
       01  DFHCOMMAREA.
           COPY DFH0STCM.
           EJECT
      *****************************************************************
      *** Data structures for Loader LIBRARY statistics             ***
      *** (See the CICS Data Areas manual)                          ***
      *****************************************************************
           COPY DFHLDBDS.
           EJECT
      *****************************************************************
      *** Data structures for Loader Global statistics              ***
      *** (See the CICS Data Areas manual)                          ***
      *****************************************************************
           COPY DFHLDGDS.
           EJECT
      *****************************************************************
      *** Data structures for Program statistics                    ***
      *** (See the CICS Data Areas manual)                          ***
      *****************************************************************
           COPY DFHLDRDS.
           EJECT
      *****************************************************************
      *** Data structures for Storage Manager Domain Subpools       ***
      *** (See the CICS Data Areas manual)                          ***
      *****************************************************************
           COPY DFHSMDDS.
           EJECT
      *****************************************************************
      *** Data structures for Storage Manager DSA                   ***
      *** (See the CICS Data Areas manual)                          ***
      *****************************************************************
           COPY DFHSMSDS.
           EJECT
      *****************************************************************
      *** Data structures for Storage Manager Task Subpools         ***
      *** (See the CICS Data Areas manual)                          ***
      *****************************************************************
           COPY DFHSMTDS.
           EJECT
      *****************************************************************
      ***                                                           ***
      ***           CICS Collect and print statistics               ***
      ***                                                           ***
      *****************************************************************
       PROCEDURE DIVISION.

      *****************************************************************
      *** MAIN-PROCESSING                                           ***
      ***     Initialise the totals fields                          ***
      ***     Print the following statistics reports:-              ***
      ***       - Storage Analysis (DSA's)                          ***
      ***       - Loader (Global)                                   ***
      ***       - LIBRARY Resources                                 ***
      ***     Return to DFH0STLK                                    ***
      *****************************************************************

       MAIN-PROCESSING SECTION.

           PERFORM TOTALS-INITIALISE.

           PERFORM COLLECT-SYSTEM.

           PERFORM PRINT-STATISTICS.

           EXEC CICS RETURN
           END-EXEC.

       MAIN-PROCESSING-EXIT.
           GOBACK.
           EJECT
      *****************************************************************
      *** COLLECT-SYSTEM                                            ***
      ***   Get required system information.                        ***
      *****************************************************************

       COLLECT-SYSTEM SECTION.

      *****************************************************************
      *** Get size of internal trace table                          ***
      *****************************************************************
           EXEC CICS INQUIRE TRACEDEST
               TABLESIZE(TRACE-TABLE-SIZE)
           END-EXEC.

      *****************************************************************
      *** Get size of TSMAINLIMIT                                   ***
      *****************************************************************
           EXEC CICS INQUIRE TEMPSTORAGE
               TSMAINLIMIT(TSMAIN-LIMIT)
           END-EXEC.

      *****************************************************************
      ***   Initialize DFH$STAS-FIELDS                              ***
      ***   Collect MVS storage information                         ***
      *****************************************************************

           MOVE 0 TO ADSP-TCTLWM ADSP-TCTHWM
                     ADSP-TCTELWM ADSP-TCTEHWM
                     REGION-SIZE-BELOW REGION-SIZE-ABOVE
                     REGION-SIZE-ESTABLISHED.

      *****************************************************************
      *** Collect MVS storage information by calling program        ***
      *** DFH$STAS.  The storage information obtained is passed     ***
      *** back in the data structure  STATASCB-FIELDS               ***
      *****************************************************************

           MOVE LENGTH OF STATASCB-FIELDS TO STAS-COMMAREA

           EXEC CICS LINK PROGRAM('DFH$STAS')
               COMMAREA(STATASCB-FIELDS)
               LENGTH(STAS-COMMAREA)
           END-EXEC.

       COLLECT-SYSTEM-EXIT.
           EXIT.
           EJECT
      *****************************************************************
      *****************************************************************
      ***         Collect and Print the CICS Statistics             ***
      *****************************************************************
      *****************************************************************
      ***                                                           ***
      ***  Print the Statistics in the following order:-            ***
      ***    - Storage Analysis (DSA's)                             ***
      ***    - Loader (Global)                                      ***
      ***    - Library (Resource)                                   ***
      ***    - Library Dataset Concatenation                        ***
      ***                                                           ***
      *****************************************************************
      *****************************************************************

       PRINT-STATISTICS SECTION.

           PERFORM COLLECT-STORAGE-SUBPOOLS.

           IF SELECT-STORAGE = 'Y' OR 'y' THEN
               PERFORM STORAGE-STATISTICS
           END-IF.

           IF SELECT-STORAGE-SUBPOOLS = 'Y' OR 'y' THEN
               PERFORM STG-SUBPOOL-STATISTICS
           END-IF.

           IF SELECT-LOADER = 'Y' OR 'y' THEN
               PERFORM LOADER-STATISTICS
           END-IF.

           IF SELECT-LIBRARY = 'Y' OR 'y' THEN
               PERFORM LIBRARY-STATISTICS
           END-IF.

       PRINT-STATISTICS-EXIT.
           EXIT.
           EJECT
      *****************************************************************
      *** COLLECT-STORAGE-SUBPOOLS SECTION                          ***
      ***   Get the Storage Mnager Domain Subpool statistics for    ***
      *** the Loader Domain program subpools.                       ***
      *****************************************************************

       COLLECT-STORAGE-SUBPOOLS SECTION.

      *****************************************************************
      *** Get the Storage Manager Domain Subpool statistics.        ***
      *****************************************************************
           MOVE 1 TO SUB1.

           PERFORM WITH TEST BEFORE
               UNTIL SUB1 > 16

                   EXEC CICS EXTRACT STATISTICS STORAGE
                       RESID(SM-SUBPOOL-NAME(SUB1))
                       SET(ADDRESS OF DFHSMDDS)
                       RESP(COLLECT-RESP)
                   END-EXEC

                   EVALUATE COLLECT-RESP
                       WHEN DFHRESP(NORMAL)
                           MOVE SMDDSANAME TO SM-SUBPOOL-DSANAME(SUB1)
                           MOVE SMDCPS     TO SM-SUBPOOL-STG(SUB1)
                           MOVE SMDHWMPS   TO SM-SUBPOOL-STG-HWM(SUB1)
                       WHEN OTHER
                           CONTINUE
                   END-EVALUATE

                   ADD 1 TO SUB1
           END-PERFORM.

       COLLECT-STORAGE-SUBPOOLS-EXIT.
           EXIT.
           EJECT
      *****************************************************************
      *** STORAGE-STATISTICS SECTION                                ***
      ***   Get Storage Manager DSA statistics                      ***
      ***   Get trace table size                                    ***
      ***   Print heading and storage statistics                    ***
      *****************************************************************

       STORAGE-STATISTICS SECTION.

      *****************************************************************
      *** Get the Storage Manager DSA statistics and store the      ***
      *** sizes of the DSA's.                                       ***
      *****************************************************************
           EXEC CICS EXTRACT STATISTICS STORAGE
               SET(ADDRESS OF DFHSMSDS)
           END-EXEC.

           MOVE SMSDSASZ(1)  TO CDSA-SIZE.
           MOVE SMSDSASZ(2)  TO UDSA-SIZE.
           MOVE SMSDSASZ(3)  TO SDSA-SIZE.
           MOVE SMSDSASZ(4)  TO RDSA-SIZE.
           MOVE SMSDSASZ(5)  TO ECDSA-SIZE.
           MOVE SMSDSASZ(6)  TO EUDSA-SIZE.
           MOVE SMSDSASZ(7)  TO ESDSA-SIZE.
           MOVE SMSDSASZ(8)  TO ERDSA-SIZE.
           MOVE SMSDSASZ(9)  TO ETDSA-SIZE.
           MOVE SMSDSASZ(10) TO GCDSA-SIZE.
           MOVE SMSDSASZ(11) TO GUDSA-SIZE.
           MOVE SMSDSASZ(12) TO GSDSA-SIZE.

      *****************************************************************
      *****************************************************************
      *** Print an analysis of Virtual Storage for the CICS Address ***
      *** Space. The analysis is split into two pages, the first    ***
      *** dealing with MVS and CICS DSA storage for below the 16MB  ***
      *** and the second page dealing with MVS and CICS DSA storage ***
      *** for above the 16MB line.                                  ***
      *****************************************************************
      *****************************************************************
           EJECT
      *****************************************************************
      *** Print the Page headings for the storage analysis.         ***
      *****************************************************************
           PERFORM PAGE-HEADINGS.
           MOVE PAGENO TO STORAGE-BELOW-PAGENO.

      *****************************************************************
      ***  Region Size established from the JCL REGION= parameter.  ***
      *****************************************************************
           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'Region size established from REGION= parameter. . . :'
                   TO PP3-55.
           COMPUTE RESULT = (REGION-SIZE-ESTABLISHED * 2).
           MOVE RESULT TO PP58-67.
           MOVE 'K'    TO PP68.
           PERFORM WRITE-OUTPUT.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'Storage BELOW 16MB' TO PP1-18.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP1-18.
           PERFORM WRITE-OUTPUT.

      *****************************************************************
      ***  Analysis of the MVS Private Area Below 16Mb              ***
      *****************************************************************
           MOVE '0'       TO PRINT-CONTROL.
           MOVE 'Private Area Region size below 16Mb . . . . . . . . :'
                   TO PP3-55.
           COMPUTE RESULT = (REGION-SIZE-BELOW / 1024).
           MOVE RESULT TO PP58-67.
           MOVE 'K'    TO PP68.
           MOVE 'MVS PVT Size. . . . . . . . . :' TO PP75-105.
           COMPUTE RESULT = (PVT-SIZE / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           PERFORM WRITE-OUTPUT.

           MOVE '  Max LSQA/SWA storage allocated below 16Mb (SYS) . :'
                   TO PP3-55.
           COMPUTE RESULT ROUNDED = (ADSP-TCTHWM / 1024).
           MOVE RESULT TO PP58-67.
           MOVE 'K'    TO PP68.
           MOVE 'MVS CSA Size / Allocated. . . :' TO PP75-105.
           COMPUTE RESULT = (CSA-SIZE / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           MOVE '/'    TO PP120.
           COMPUTE RESULT = (CSA-ALLOCATED / 1024).
           MOVE RESULT TO PP122-131.
           MOVE 'K'    TO PP132
           PERFORM WRITE-OUTPUT.

           MOVE '  Max User storage allocated below 16Mb (VIRT). . . :'
                   TO PP3-55.
           COMPUTE RESULT = (ADSP-TCTLWM / 1024).
           MOVE RESULT TO PP58-67.
           MOVE 'K'    TO PP68.
           MOVE 'MVS SQA Size / Allocated. . . :' TO PP75-105.
           COMPUTE RESULT = (SQA-SIZE / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           MOVE '/'    TO PP120
           COMPUTE RESULT = (SQA-ALLOCATED / 1024).
           MOVE RESULT TO PP122-131.
           MOVE 'K'    TO PP132.
           PERFORM WRITE-OUTPUT.

           MOVE '  System Use. . . . . . . . . . . . . . . . . . . . :'
                   TO PP3-55.
           COMPUTE RESULT = (SYSTEM-STORAGE-BELOW / 1024).
           MOVE RESULT TO PP58-67.
           MOVE 'K'    TO PP68.
           PERFORM WRITE-OUTPUT.

           MOVE '  RTM . . . . . . . . . . . . . . . . . . . . . . . :'
                   TO PP3-55.
           COMPUTE RESULT = (RTM-STORAGE-BELOW / 1024).
           MOVE RESULT TO PP58-67.
           MOVE 'K'    TO PP68.
           PERFORM WRITE-OUTPUT.

           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP3-68.
           PERFORM WRITE-OUTPUT.

           MOVE 'Private Area storage available below 16Mb . . . . . :'
                   TO PP3-55.
           COMPUTE RESULT = ((REGION-SIZE-BELOW / 1024) -
               ((ADSP-TCTHWM / 1024) +
               (ADSP-TCTLWM / 1024) +
               (RTM-STORAGE-BELOW / 1024) +
               (SYSTEM-STORAGE-BELOW / 1024))).
           MOVE RESULT TO PP58-67.
           MOVE 'K'    TO PP68.
           PERFORM WRITE-OUTPUT.

           MOVE 'Current DSA Limit . . . . . . :' TO PP75-105.
           COMPUTE RESULT = (SMSDSALIMIT / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           PERFORM WRITE-OUTPUT.

           MOVE 'Current Allocation for DSAs . :' TO PP75-105.
           COMPUTE RESULT = (SMSDSATOTAL / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           PERFORM WRITE-OUTPUT.

           MOVE 'VIRT minus Current DSA Limit. . . . . . . . . . . . :'
                   TO PP3-55.
           COMPUTE RESULT =
               ((ADSP-TCTLWM / 1024 ) - (SMSDSALIMIT / 1024)).
           MOVE RESULT TO PP58-67.
           MOVE 'K'    TO PP68.
           MOVE 'Peak Allocation for DSAs. . . :' TO PP75-105.
           COMPUTE RESULT = (SMSHWMDSATOTAL / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           PERFORM WRITE-OUTPUT.

      *****************************************************************
      *** Print the CICS DSA storage statistics for below the 16MB  ***
      *** line, calculating various fields as required.             ***
      *****************************************************************
           MOVE '-' TO PRINT-CONTROL.
           MOVE '          CDSA             UDSA             SDSA
      -    '      RDSA           Totals ' TO PP36-118.
           PERFORM WRITE-OUTPUT.
           MOVE '+' TO PRINT-CONTROL.
           MOVE ALL '_' TO PP36-118.
           PERFORM WRITE-OUTPUT.

           MOVE ' '    TO PRINT-CONTROL.
           MOVE 'Current DSA Size. . . . . . . :' TO PP3-33.
           COMPUTE RESULT = (SMSDSASZ(1) / 1024).
           MOVE RESULT TO PP40-49.
           MOVE 'K'    TO PP50.
           COMPUTE RESULT = (SMSDSASZ(2) / 1024).
           MOVE RESULT TO PP57-66.
           MOVE 'K'    TO PP67.
           COMPUTE RESULT = (SMSDSASZ(3) / 1024).
           MOVE RESULT TO PP74-83.
           MOVE 'K'    TO PP84.
           COMPUTE RESULT = (SMSDSASZ(4) / 1024).
           MOVE RESULT TO PP91-100.
           MOVE 'K'    TO PP101.

           COMPUTE DSA-SIZE ROUNDED = ((CDSA-SIZE +
               UDSA-SIZE + SDSA-SIZE + RDSA-SIZE) / 1024).
           MOVE DSA-SIZE TO PP108-117.
           MOVE 'K'      TO PP118.
           PERFORM WRITE-OUTPUT.

           MOVE 'Current DSA Used. . . . . . . :' TO PP3-33.
           COMPUTE RESULT ROUNDED =
               ((SMSDSASZ(1) - SMSFSTG(1)) / 1024).
           MOVE RESULT TO DSA-USED.
           MOVE RESULT TO PP40-49.
           MOVE 'K'    TO PP50.
           COMPUTE RESULT ROUNDED =
               ((SMSDSASZ(2) - SMSFSTG(2)) / 1024).
           ADD  RESULT TO DSA-USED.
           MOVE RESULT TO PP57-66.
           MOVE 'K'    TO PP67.
           COMPUTE RESULT ROUNDED =
               ((SMSDSASZ(3) - SMSFSTG(3)) / 1024).
           ADD  RESULT TO DSA-USED.
           MOVE RESULT TO PP74-83.
           MOVE 'K'    TO PP84.
           COMPUTE RESULT ROUNDED =
               ((SMSDSASZ(4) - SMSFSTG(4)) / 1024).
           ADD  RESULT TO DSA-USED.
           MOVE RESULT TO PP91-100.
           MOVE 'K'    TO PP101.

           MOVE DSA-USED TO PP108-117.
           MOVE 'K'      TO PP118.
           PERFORM WRITE-OUTPUT.

           MOVE 'Current DSA Used as % of DSA. :' TO PP3-33.
           IF SMSDSASZ(1) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                   ((SMSDSASZ(1) - SMSFSTG(1)) / SMSDSASZ(1))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP40-49.
           MOVE '%'        TO PP50.
           IF SMSDSASZ(2) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                   ((SMSDSASZ(2) - SMSFSTG(2)) / SMSDSASZ(2))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP57-66.
           MOVE '%'        TO PP67.
           IF SMSDSASZ(3) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                   ((SMSDSASZ(3) - SMSFSTG(3)) / SMSDSASZ(3))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP74-83.
           MOVE '%'        TO PP84.
           IF SMSDSASZ(4) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                   ((SMSDSASZ(4) - SMSFSTG(4)) / SMSDSASZ(4))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP91-100.
           MOVE '%'        TO PP101.
           PERFORM WRITE-OUTPUT.

           MOVE '*'    TO PP1.
           MOVE 'Peak DSA Used . . . . . . . . :' TO PP3-33.
           COMPUTE RESULT ROUNDED =
                   ((SMSDSASZ(1) - SMSLWMFSTG(1)) / 1024).
           MOVE RESULT TO PP40-49.
           MOVE 'K'    TO PP50.
           COMPUTE RESULT ROUNDED =
                   ((SMSDSASZ(2) - SMSLWMFSTG(2)) / 1024).
           MOVE RESULT TO PP57-66.
           MOVE 'K'    TO PP67.
           COMPUTE RESULT ROUNDED =
                   ((SMSDSASZ(3) - SMSLWMFSTG(3)) / 1024).
           MOVE RESULT TO PP74-83.
           MOVE 'K'    TO PP84.
           COMPUTE RESULT ROUNDED =
                   ((SMSDSASZ(4) - SMSLWMFSTG(4)) / 1024).
           MOVE RESULT TO PP91-100.
           MOVE 'K'    TO PP101.
           PERFORM WRITE-OUTPUT.

           MOVE 'Peak DSA Size . . . . . . . . :' TO PP3-33.
           COMPUTE RESULT = (SMSHWMDSASZ(1) / 1024).
           MOVE RESULT TO PP40-49.
           MOVE 'K'    TO PP50.
           COMPUTE RESULT = (SMSHWMDSASZ(2) / 1024).
           MOVE RESULT TO PP57-66.
           MOVE 'K'    TO PP67.
           COMPUTE RESULT = (SMSHWMDSASZ(3) / 1024).
           MOVE RESULT TO PP74-83.
           MOVE 'K'    TO PP84.
           COMPUTE RESULT = (SMSHWMDSASZ(4) / 1024).
           MOVE RESULT TO PP91-100.
           MOVE 'K'    TO PP101.
           PERFORM WRITE-OUTPUT.

           MOVE 'Cushion Size. . . . . . . . . :' TO PP3-33.
           COMPUTE RESULT = (SMSCSIZE(1) / 1024).
           MOVE RESULT TO PP40-49.
           MOVE 'K'    TO PP50.
           COMPUTE RESULT = (SMSCSIZE(2) / 1024).
           MOVE RESULT TO PP57-66.
           MOVE 'K'    TO PP67.
           COMPUTE RESULT = (SMSCSIZE(3) / 1024).
           MOVE RESULT TO PP74-83.
           MOVE 'K'    TO PP84.
           COMPUTE RESULT = (SMSCSIZE(4) / 1024).
           MOVE RESULT TO PP91-100.
           MOVE 'K'    TO PP101.
           PERFORM WRITE-OUTPUT.

           MOVE 'Free Storage (inc. Cushion) . :' TO PP3-33.
           COMPUTE RESULT = (SMSFSTG(1) / 1024).
           MOVE RESULT TO PP40-49.
           MOVE 'K'    TO PP50.
           COMPUTE RESULT = (SMSFSTG(2) / 1024).
           MOVE RESULT TO PP57-66.
           MOVE 'K'    TO PP67.
           COMPUTE RESULT = (SMSFSTG(3) / 1024).
           MOVE RESULT TO PP74-83.
           MOVE 'K'    TO PP84.
           COMPUTE RESULT = (SMSFSTG(4) / 1024).
           MOVE RESULT TO PP91-100.
           MOVE 'K'    TO PP101.
           PERFORM WRITE-OUTPUT.

           MOVE '*'    TO PP1.
           MOVE 'Peak Free Storage . . . . . . :' TO PP3-33.
           COMPUTE RESULT = (SMSHWMFSTG(1) / 1024).
           MOVE RESULT TO PP40-49.
           MOVE 'K'    TO PP50.
           COMPUTE RESULT = (SMSHWMFSTG(2) / 1024).
           MOVE RESULT TO PP57-66.
           MOVE 'K'    TO PP67.
           COMPUTE RESULT = (SMSHWMFSTG(3) / 1024).
           MOVE RESULT TO PP74-83.
           MOVE 'K'    TO PP84.
           COMPUTE RESULT = (SMSHWMFSTG(4) / 1024).
           MOVE RESULT TO PP91-100.
           MOVE 'K'    TO PP101.
           PERFORM WRITE-OUTPUT.

           MOVE '*'    TO PP1.
           MOVE 'Lowest Free Storage . . . . . :' TO PP3-33.
           COMPUTE RESULT = (SMSLWMFSTG(1) / 1024).
           MOVE RESULT TO PP40-49.
           MOVE 'K'    TO PP50.
           COMPUTE RESULT = (SMSLWMFSTG(2) / 1024).
           MOVE RESULT TO PP57-66.
           MOVE 'K'    TO PP67.
           COMPUTE RESULT = (SMSLWMFSTG(3) / 1024).
           MOVE RESULT TO PP74-83.
           MOVE 'K'    TO PP84.
           COMPUTE RESULT = (SMSLWMFSTG(4) / 1024).
           MOVE RESULT TO PP91-100.
           MOVE 'K'    TO PP101.
           PERFORM WRITE-OUTPUT.

           MOVE 'Largest Free Area . . . . . . :'  TO PP3-33.
           COMPUTE RESULT = (SMSLFA(1) / 1024).
           MOVE RESULT TO PP40-49.
           MOVE 'K'    TO PP50.
           COMPUTE RESULT = (SMSLFA(2) / 1024).
           MOVE RESULT TO PP57-66.
           MOVE 'K'    TO PP67.
           COMPUTE RESULT = (SMSLFA(3) / 1024).
           MOVE RESULT TO PP74-83.
           MOVE 'K'    TO PP84.
           COMPUTE RESULT = (SMSLFA(4) / 1024).
           MOVE RESULT TO PP91-100.
           MOVE 'K'    TO PP101.
           PERFORM WRITE-OUTPUT.

           MOVE 'Largest Free Area as % of DSA :' TO PP3-33.
           IF SMSDSASZ(1) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                               (SMSLFA(1) / SMSDSASZ(1))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP40-49.
           MOVE '%'        TO PP50.
           IF SMSDSASZ(2) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                               (SMSLFA(2) / SMSDSASZ(2))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP57-66.
           MOVE '%'        TO PP67.
           IF SMSDSASZ(3) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                               (SMSLFA(3) / SMSDSASZ(3))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP74-83.
           MOVE '%'        TO PP84.
           IF SMSDSASZ(4) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                               (SMSLFA(4) / SMSDSASZ(4))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP91-100.
           MOVE '%'        TO PP101.
           PERFORM WRITE-OUTPUT.

           MOVE 'Largest Free/Free Storage . . :' TO PP3-33.
           IF SMSFSTG(1) > 0 THEN
               COMPUTE FREE-STORAGE-FACTOR = (SMSLFA(1) / SMSFSTG(1))
           ELSE
               MOVE 0 TO FREE-STORAGE-FACTOR
           END-IF.
           MOVE FREE-STORAGE-FACTOR TO PP44-49.
           IF SMSFSTG(2) > 0 THEN
               COMPUTE FREE-STORAGE-FACTOR = (SMSLFA(2) / SMSFSTG(2))
           ELSE
               MOVE 0 TO FREE-STORAGE-FACTOR
           END-IF.
           MOVE FREE-STORAGE-FACTOR TO PP61-66N.
           IF SMSFSTG(3) > 0 THEN
               COMPUTE FREE-STORAGE-FACTOR = (SMSLFA(3) / SMSFSTG(3))
           ELSE
               MOVE 0 TO FREE-STORAGE-FACTOR
           END-IF.
           MOVE FREE-STORAGE-FACTOR TO PP78-83.
           IF SMSFSTG(4) > 0 THEN
               COMPUTE FREE-STORAGE-FACTOR = (SMSLFA(4) / SMSFSTG(4))
           ELSE
               MOVE 0 TO FREE-STORAGE-FACTOR
           END-IF.
           MOVE FREE-STORAGE-FACTOR TO PP95-100.
           PERFORM WRITE-OUTPUT.

           MOVE '0' TO PRINT-CONTROL.
           MOVE 'Current number of extents . . :' TO PP3-33.
           MOVE SMSEXTS(1)                        TO PP40-49.
           MOVE SMSEXTS(2)                        TO PP57-66.
           MOVE SMSEXTS(3)                        TO PP74-83.
           MOVE SMSEXTS(4)                        TO PP91-100.
           COMPUTE RESULT = (SMSEXTS(1) + SMSEXTS(2) +
                             SMSEXTS(3) + SMSEXTS(4)).
           MOVE RESULT                            TO PP108-117.
           PERFORM WRITE-OUTPUT.

           MOVE 'Number of extents added . . . :' TO PP3-33.
           MOVE SMSEXTSA(1)                       TO PP40-49.
           MOVE SMSEXTSA(2)                       TO PP57-66.
           MOVE SMSEXTSA(3)                       TO PP74-83.
           MOVE SMSEXTSA(4)                       TO PP91-100.
           PERFORM WRITE-OUTPUT.

           MOVE 'Number of extents released. . :' TO PP3-33.
           MOVE SMSEXTSR(1)                       TO PP40-49.
           MOVE SMSEXTSR(2)                       TO PP57-66.
           MOVE SMSEXTSR(3)                       TO PP74-83.
           MOVE SMSEXTSR(4)                       TO PP91-100.
           PERFORM WRITE-OUTPUT.

           MOVE '0' TO PRINT-CONTROL.
           MOVE 'Getmain Requests. . . . . . . :' TO PP3-33.
           MOVE SMSGMREQ(1)                       TO PP37-49.
           MOVE SMSGMREQ(2)                       TO PP54-66.
           MOVE SMSGMREQ(3)                       TO PP71-83.
           MOVE SMSGMREQ(4)                       TO PP88-100.
           PERFORM WRITE-OUTPUT.

           MOVE 'Freemain Requests . . . . . . :' TO PP3-33.
           MOVE SMSFMREQ(1)                       TO PP37-49.
           MOVE SMSFMREQ(2)                       TO PP54-66.
           MOVE SMSFMREQ(3)                       TO PP71-83.
           MOVE SMSFMREQ(4)                       TO PP88-100.
           PERFORM WRITE-OUTPUT.

           MOVE '0'        TO PRINT-CONTROL.
           MOVE 'Current number of Subpools. . :' TO PP3-33.
           MOVE SMSCSUBP(1)                       TO PP40-49.
           MOVE SMSCSUBP(2)                       TO PP57-66.
           MOVE SMSCSUBP(3)                       TO PP74-83.
           MOVE SMSCSUBP(4)                       TO PP91-100.
           COMPUTE RESULT = (SMSCSUBP(1) + SMSCSUBP(2) +
                             SMSCSUBP(3) + SMSCSUBP(4)).
           MOVE RESULT                            TO PP108-117.
           PERFORM WRITE-OUTPUT.

           MOVE 'Add Subpool Requests. . . . . :' TO PP3-33.
           MOVE SMSASR(1)                         TO PP37-49.
           MOVE SMSASR(2)                         TO PP54-66.
           MOVE SMSASR(3)                         TO PP71-83.
           MOVE SMSASR(4)                         TO PP88-100.
           PERFORM WRITE-OUTPUT.

           MOVE 'Delete Subpool Requests . . . :' TO PP3-33.
           MOVE SMSDSR(1)                         TO PP37-49.
           MOVE SMSDSR(2)                         TO PP54-66.
           MOVE SMSDSR(3)                         TO PP71-83.
           MOVE SMSDSR(4)                         TO PP88-100.
           PERFORM WRITE-OUTPUT.

           MOVE '0'        TO PRINT-CONTROL.
           MOVE 'Times no storage returned . . :' TO PP3-33.
           MOVE SMSCRISS(1)                       TO PP40-49.
           MOVE SMSCRISS(2)                       TO PP57-66.
           MOVE SMSCRISS(3)                       TO PP74-83.
           MOVE SMSCRISS(4)                       TO PP91-100.
           PERFORM WRITE-OUTPUT.

           MOVE 'Times request suspended . . . :' TO PP3-33.
           MOVE SMSUCSS(1)                        TO PP40-49.
           MOVE SMSUCSS(2)                        TO PP57-66.
           MOVE SMSUCSS(3)                        TO PP74-83.
           MOVE SMSUCSS(4)                        TO PP91-100.
           PERFORM WRITE-OUTPUT.

           MOVE 'Current requests suspended. . :' TO PP3-33.
           MOVE SMSCSS(1)                         TO PP40-49.
           MOVE SMSCSS(2)                         TO PP57-66.
           MOVE SMSCSS(3)                         TO PP74-83.
           MOVE SMSCSS(4)                         TO PP91-100.
           PERFORM WRITE-OUTPUT.

           MOVE 'Peak requests suspended . . . :' TO PP3-33.
           MOVE SMSHWMSS(1)                       TO PP40-49.
           MOVE SMSHWMSS(2)                       TO PP57-66.
           MOVE SMSHWMSS(3)                       TO PP74-83.
           MOVE SMSHWMSS(4)                       TO PP91-100.
           PERFORM WRITE-OUTPUT.

           MOVE 'Requests purged while waiting :' TO PP3-33.
           MOVE SMSPWWS(1)                        TO PP40-49.
           MOVE SMSPWWS(2)                        TO PP57-66.
           MOVE SMSPWWS(3)                        TO PP74-83.
           MOVE SMSPWWS(4)                        TO PP91-100.
           PERFORM WRITE-OUTPUT.

           MOVE '0'        TO PRINT-CONTROL.
           MOVE 'Times Cushion released. . . . :' TO PP3-33.
           MOVE SMSCREL(1)                        TO PP40-49.
           MOVE SMSCREL(2)                        TO PP57-66.
           MOVE SMSCREL(3)                        TO PP74-83.
           MOVE SMSCREL(4)                        TO PP91-100.
           COMPUTE RESULT = (SMSCREL(1) + SMSCREL(2) +
                             SMSCREL(3) + SMSCREL(4)).
           MOVE RESULT                            TO PP108-117.
           PERFORM WRITE-OUTPUT.

           MOVE 'Times Short-On-Storage. . . . :' TO PP3-33.
           MOVE SMSSOS(1)                         TO PP40-49.
           MOVE SMSSOS(2)                         TO PP57-66.
           MOVE SMSSOS(3)                         TO PP74-83.
           MOVE SMSSOS(4)                         TO PP91-100.
           COMPUTE RESULT = (SMSSOS(1) + SMSSOS(2) +
                             SMSSOS(3) + SMSSOS(4)).
           MOVE RESULT                            TO PP108-117.
           PERFORM WRITE-OUTPUT.

           MOVE 'Total time Short-On-Storage . :' TO PP3-33.
           MOVE SMSTSOS(1) TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP36-49.
           MOVE SMSTSOS(2) TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP53-66.
           MOVE SMSTSOS(3) TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP70-83.
           MOVE SMSTSOS(4) TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP87-100.
           PERFORM WRITE-OUTPUT.

           MOVE 'Average Short-On-Storage time :' TO PP3-33.
           IF SMSSOS(1) > 0 THEN
               MOVE SMSTSOS(1) TO CLOCK-FIELD
               COMPUTE CLOCK-FIELD-S = (CLOCK-FIELD-S / SMSSOS(1))
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP36-49.
           IF SMSSOS(2) > 0 THEN
               MOVE SMSTSOS(2) TO CLOCK-FIELD
               COMPUTE CLOCK-FIELD-S = (CLOCK-FIELD-S / SMSSOS(2))
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP53-66.
           IF SMSSOS(3) > 0 THEN
               MOVE SMSTSOS(3) TO CLOCK-FIELD
               COMPUTE CLOCK-FIELD-S = (CLOCK-FIELD-S / SMSSOS(3))
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP70-83.
           IF SMSSOS(4) > 0 THEN
               MOVE SMSTSOS(4) TO CLOCK-FIELD
               COMPUTE CLOCK-FIELD-S = (CLOCK-FIELD-S / SMSSOS(4))
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP87-100.
           PERFORM WRITE-OUTPUT.

           MOVE '0'        TO PRINT-CONTROL.
           MOVE 'Storage Violations. . . . . . :' TO PP3-33.
           MOVE SMSSV(1)                          TO PP40-49.
           MOVE SMSSV(2)                          TO PP57-66.
           MOVE SMSSV(3)                          TO PP74-83.
           MOVE SMSSV(4)                          TO PP91-100.
           PERFORM WRITE-OUTPUT.

           MOVE '0'        TO PRINT-CONTROL.
           MOVE 'Access. . . . . . . . . . . . :' TO PP3-33.
           EVALUATE TRUE
               WHEN SMSCICS(1)
                   MOVE '    CICS' TO PP42-49
               WHEN SMSUSER(1)
                   MOVE '    USER' TO PP42-49
               WHEN SMSREADONLY(1)
                   MOVE 'READONLY' TO PP42-49
               WHEN SMSTRUSTED(1)
                   MOVE ' TRUSTED' TO PP42-49
           END-EVALUATE.
           EVALUATE TRUE
               WHEN SMSCICS(2)
                   MOVE '    CICS' TO PP59-66
               WHEN SMSUSER(2)
                   MOVE '    USER' TO PP59-66
               WHEN SMSREADONLY(2)
                   MOVE 'READONLY' TO PP59-66
               WHEN SMSTRUSTED(2)
                   MOVE ' TRUSTED' TO PP59-66
           END-EVALUATE.
           EVALUATE TRUE
               WHEN SMSCICS(3)
                   MOVE '    CICS' TO PP76-83
               WHEN SMSUSER(3)
                   MOVE '    USER' TO PP76-83
               WHEN SMSREADONLY(3)
                   MOVE 'READONLY' TO PP76-83
               WHEN SMSTRUSTED(3)
                   MOVE ' TRUSTED' TO PP76-83
           END-EVALUATE.
           EVALUATE TRUE
               WHEN SMSCICS(4)
                   MOVE '    CICS' TO PP93-100
               WHEN SMSUSER(4)
                   MOVE '    USER' TO PP93-100
               WHEN SMSREADONLY(4)
                   MOVE 'READONLY' TO PP93-100
               WHEN SMSTRUSTED(4)
                   MOVE ' TRUSTED' TO PP93-100
           END-EVALUATE.
           PERFORM WRITE-OUTPUT.

           MOVE '0'        TO PRINT-CONTROL.
           MOVE '''*'' indicates values reset on last DSA Size change'
               TO PP3-52.
           PERFORM WRITE-OUTPUT.
           EJECT
      *****************************************************************
      *** Print the Page headings for the storage analysis.         ***
      *****************************************************************
           PERFORM PAGE-HEADINGS.
           MOVE PAGENO TO STORAGE-ABOVE-PAGENO.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'Storage ABOVE 16MB' TO PP1-18.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP1-18.
           PERFORM WRITE-OUTPUT.

      *****************************************************************
      ***  Analysis of the Private Area Above 16Mb                  ***
      *****************************************************************
           MOVE '0'    TO PRINT-CONTROL.
           MOVE 'Private Area Region size above 16Mb . . . . . . . . :'
                   TO PP3-55.
           COMPUTE RESULT = (REGION-SIZE-ABOVE / 1024).
           MOVE RESULT TO PP58-67.
           MOVE 'K'    TO PP68.
           MOVE 'MVS EPVT Size . . . . . . . . :' TO PP75-105.
           COMPUTE RESULT = (EPVT-SIZE / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           PERFORM WRITE-OUTPUT.

           MOVE '  Max LSQA/SWA storage allocated above 16Mb (SYS) . :'
                   TO PP3-55.
           COMPUTE RESULT = (ADSP-TCTEHWM / 1024).
           MOVE RESULT TO PP58-67.
           MOVE 'K'    TO PP68.
           MOVE 'MVS ECSA Size / Allocated . . :' TO PP75-105.
           COMPUTE RESULT = (ECSA-SIZE / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           MOVE '/'    TO PP120.
           COMPUTE RESULT = (ECSA-ALLOCATED / 1024).
           MOVE RESULT TO PP122-131.
           MOVE 'K'    TO PP132.
           PERFORM WRITE-OUTPUT.

           MOVE '  Max User storage allocated above 16Mb (EXT) . . . :'
                   TO PP3-55.
           COMPUTE RESULT = (ADSP-TCTELWM / 1024).
           MOVE RESULT TO PP58-67.
           MOVE 'K'    TO PP68.
           MOVE 'MVS ESQA Size / Allocated . . :' TO PP75-105.
           COMPUTE RESULT = (ESQA-SIZE / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           MOVE '/'    TO PP120.
           COMPUTE RESULT = (ESQA-ALLOCATED / 1024).
           MOVE RESULT TO PP122-131.
           MOVE 'K'    TO PP132.
           PERFORM WRITE-OUTPUT.

           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP3-68.
           PERFORM WRITE-OUTPUT.

           MOVE 'Private Area storage available above 16Mb . . . . . :'
                   TO PP3-55.
           COMPUTE RESULT = ((REGION-SIZE-ABOVE / 1024) -
               ((ADSP-TCTEHWM / 1024) + (ADSP-TCTELWM / 1024))).
           MOVE RESULT TO PP58-67.
           MOVE 'K'    TO PP68.
           PERFORM WRITE-OUTPUT.

           MOVE 'Requests for MVS storage causing waits . :'
                                   TO PP75-116.
           MOVE SMSMVSSTGREQWAITS TO PP123-132N
           PERFORM WRITE-OUTPUT.
           MOVE 'Total time waiting for MVS storage . . . :'
                               TO PP75-116.
           MOVE SMSTIMEWAITMVS TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH      TO PP119-132.
           PERFORM WRITE-OUTPUT.

           PERFORM WRITE-OUTPUT.

           MOVE 'Current EDSA Limit. . . . . . :' TO PP75-105.
           COMPUTE RESULT = (SMSEDSALIMIT / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           PERFORM WRITE-OUTPUT.

           MOVE 'Current Allocation for EDSAs. :' TO PP75-105.
           COMPUTE RESULT = (SMSEDSATOTAL / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           PERFORM WRITE-OUTPUT.

           MOVE 'EXT minus Current EDSA Limit. . . . . . . . . . . . :'
                   TO PP3-55.
           COMPUTE RESULT =
               ((ADSP-TCTELWM / 1024) - (SMSEDSALIMIT / 1024)).
           MOVE RESULT TO PP58-67.
           MOVE 'K'    TO PP68.
           MOVE 'Peak Allocation for EDSAs . . :' TO PP75-105.
           COMPUTE RESULT = (SMSHWMEDSATOTAL / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           PERFORM WRITE-OUTPUT.

      *****************************************************************
      *** Print the CICS DSA storage statistics for above the 16MB  ***
      *** line, calculating various fields as required.             ***
      *****************************************************************
           MOVE '-' TO PRINT-CONTROL.
           MOVE '         ECDSA            EUDSA            ESDSA
      -    '     ERDSA            ETDSA        Totals ' TO PP36-132.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP36-132.
           PERFORM WRITE-OUTPUT.

           MOVE ' '     TO PRINT-CONTROL.
           MOVE 'Current DSA Size. . . . . . . :' TO PP3-33.
           COMPUTE RESULT = (SMSDSASZ(5) / 1024).
           MOVE RESULT TO PP40-49.
           MOVE 'K'    TO PP50.
           COMPUTE RESULT = (SMSDSASZ(6) / 1024).
           MOVE RESULT TO PP57-66.
           MOVE 'K'    TO PP67.
           COMPUTE RESULT = (SMSDSASZ(7) / 1024).
           MOVE RESULT TO PP74-83.
           MOVE 'K'    TO PP84.
           COMPUTE RESULT = (SMSDSASZ(8) / 1024).
           MOVE RESULT TO PP91-100.
           MOVE 'K'    TO PP101.
           COMPUTE RESULT = (SMSDSASZ(9) / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.

           COMPUTE DSA-SIZE = ((ECDSA-SIZE + EUDSA-SIZE +
               ESDSA-SIZE + ERDSA-SIZE + ETDSA-SIZE) / 1024).
           MOVE DSA-SIZE TO PP122-131.
           MOVE 'K'      TO PP132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Current DSA Used. . . . . . . :' TO PP3-33.
           COMPUTE RESULT =
               ((SMSDSASZ(5) - SMSFSTG(5)) / 1024).
           MOVE RESULT TO DSA-USED.
           MOVE RESULT TO PP40-49.
           MOVE 'K'    TO PP50.
           COMPUTE RESULT =
               ((SMSDSASZ(6) - SMSFSTG(6)) / 1024).
           ADD  RESULT TO DSA-USED.
           MOVE RESULT TO PP57-66.
           MOVE 'K'    TO PP67.
           COMPUTE RESULT =
               ((SMSDSASZ(7) - SMSFSTG(7)) / 1024).
           ADD  RESULT TO DSA-USED.
           MOVE RESULT TO PP74-83.
           MOVE 'K'    TO PP84.
           COMPUTE RESULT =
               ((SMSDSASZ(8) - SMSFSTG(8)) / 1024).
           ADD  RESULT TO DSA-USED.
           MOVE RESULT TO PP91-100.
           MOVE 'K'    TO PP101.
           COMPUTE RESULT =
               ((SMSDSASZ(9) - SMSFSTG(9)) / 1024).
           ADD  RESULT TO DSA-USED.
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.

           MOVE DSA-USED TO PP122-131.
           MOVE 'K'      TO PP132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Current DSA Used as % of DSA. :' TO PP3-33.
           IF SMSDSASZ(5) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                   (((SMSDSASZ(5) / 1024) - (SMSFSTG(5) / 1024))
                       / (SMSDSASZ(5) / 1024))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP40-49.
           MOVE '%'        TO PP50.
           IF SMSDSASZ(6) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                   (((SMSDSASZ(6) / 1024) - (SMSFSTG(6) / 1024))
                       / (SMSDSASZ(6) / 1024))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP57-66.
           MOVE '%'        TO PP67.
           IF SMSDSASZ(7) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                   (((SMSDSASZ(7) / 1024) - (SMSFSTG(7) / 1024))
                       / (SMSDSASZ(7) / 1024))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP74-83.
           MOVE '%'        TO PP84.
           IF SMSDSASZ(8) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                   (((SMSDSASZ(8) / 1024) - (SMSFSTG(8) / 1024))
                       / (SMSDSASZ(8) / 1024))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP91-100.
           MOVE '%'        TO PP101.
           IF SMSDSASZ(9) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                   (((SMSDSASZ(9) / 1024) - (SMSFSTG(9) / 1024))
                       / (SMSDSASZ(9) / 1024))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP108-117.
           MOVE '%'        TO PP118.
           PERFORM WRITE-OUTPUT.

           MOVE '*'    TO PP1.
           MOVE 'Peak DSA Used . . . . . . . . :' TO PP3-33.
           COMPUTE RESULT =
                   ((SMSDSASZ(5) - SMSLWMFSTG(5)) / 1024).
           MOVE RESULT TO PP40-49.
           MOVE 'K'    TO PP50.
           COMPUTE RESULT =
                   ((SMSDSASZ(6) - SMSLWMFSTG(6)) / 1024).
           MOVE RESULT TO PP57-66.
           MOVE 'K'    TO PP67.
           COMPUTE RESULT =
                   ((SMSDSASZ(7) - SMSLWMFSTG(7)) / 1024).
           MOVE RESULT TO PP74-83.
           MOVE 'K'    TO PP84.
           COMPUTE RESULT =
                   ((SMSDSASZ(8) - SMSLWMFSTG(8)) / 1024).
           MOVE RESULT TO PP91-100.
           MOVE 'K'    TO PP101.
           COMPUTE RESULT =
                   ((SMSDSASZ(9) - SMSLWMFSTG(9)) / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           PERFORM WRITE-OUTPUT.

           MOVE 'Peak DSA Size . . . . . . . . :' TO PP3-33.
           COMPUTE RESULT = (SMSHWMDSASZ(5) / 1024).
           MOVE RESULT TO PP40-49.
           MOVE 'K'    TO PP50.
           COMPUTE RESULT = (SMSHWMDSASZ(6) / 1024).
           MOVE RESULT TO PP57-66.
           MOVE 'K'    TO PP67.
           COMPUTE RESULT = (SMSHWMDSASZ(7) / 1024).
           MOVE RESULT TO PP74-83.
           MOVE 'K'    TO PP84.
           COMPUTE RESULT = (SMSHWMDSASZ(8) / 1024).
           MOVE RESULT TO PP91-100.
           MOVE 'K'    TO PP101.
           COMPUTE RESULT = (SMSHWMDSASZ(9) / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           PERFORM WRITE-OUTPUT.

           MOVE 'Cushion Size. . . . . . . . . :' TO PP3-33.
           COMPUTE RESULT = (SMSCSIZE(5) / 1024).
           MOVE RESULT TO PP40-49.
           MOVE 'K'    TO PP50.
           COMPUTE RESULT = (SMSCSIZE(6) / 1024).
           MOVE RESULT TO PP57-66.
           MOVE 'K'    TO PP67.
           COMPUTE RESULT = (SMSCSIZE(7) / 1024).
           MOVE RESULT TO PP74-83.
           MOVE 'K'    TO PP84.
           COMPUTE RESULT = (SMSCSIZE(8) / 1024).
           MOVE RESULT TO PP91-100.
           MOVE 'K'    TO PP101.
           COMPUTE RESULT = (SMSCSIZE(9) / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           PERFORM WRITE-OUTPUT.

           MOVE 'Free Storage (inc. Cushion) . :' TO PP3-33.
           COMPUTE RESULT = (SMSFSTG(5) / 1024).
           MOVE RESULT TO PP40-49.
           MOVE 'K'    TO PP50.
           COMPUTE RESULT = (SMSFSTG(6) / 1024).
           MOVE RESULT TO PP57-66.
           MOVE 'K'    TO PP67.
           COMPUTE RESULT = (SMSFSTG(7) / 1024).
           MOVE RESULT TO PP74-83.
           MOVE 'K'    TO PP84.
           COMPUTE RESULT = (SMSFSTG(8) / 1024).
           MOVE RESULT TO PP91-100.
           MOVE 'K'    TO PP101.
           COMPUTE RESULT = (SMSFSTG(9) / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           PERFORM WRITE-OUTPUT.

           MOVE '*'    TO PP1.
           MOVE 'Peak Free Storage . . . . . . :' TO PP3-33.
           COMPUTE RESULT = (SMSHWMFSTG(5) / 1024).
           MOVE RESULT TO PP40-49.
           MOVE 'K'    TO PP50.
           COMPUTE RESULT = (SMSHWMFSTG(6) / 1024).
           MOVE RESULT TO PP57-66.
           MOVE 'K'    TO PP67.
           COMPUTE RESULT = (SMSHWMFSTG(7) / 1024).
           MOVE RESULT TO PP74-83.
           MOVE 'K'    TO PP84.
           COMPUTE RESULT = (SMSHWMFSTG(8) / 1024).
           MOVE RESULT TO PP91-100.
           MOVE 'K'    TO PP101.
           COMPUTE RESULT = (SMSHWMFSTG(9) / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           PERFORM WRITE-OUTPUT.

           MOVE '*'    TO PP1.
           MOVE 'Lowest Free Storage . . . . . :' TO PP3-33.
           COMPUTE RESULT = (SMSLWMFSTG(5) / 1024).
           MOVE RESULT TO PP40-49.
           MOVE 'K'    TO PP50.
           COMPUTE RESULT = (SMSLWMFSTG(6) / 1024).
           MOVE RESULT TO PP57-66.
           MOVE 'K'    TO PP67.
           COMPUTE RESULT = (SMSLWMFSTG(7) / 1024).
           MOVE RESULT TO PP74-83.
           MOVE 'K'    TO PP84.
           COMPUTE RESULT = (SMSLWMFSTG(8) / 1024).
           MOVE RESULT TO PP91-100.
           MOVE 'K'    TO PP101.
           COMPUTE RESULT = (SMSLWMFSTG(9) / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           PERFORM WRITE-OUTPUT.

           MOVE 'Largest Free Area . . . . . . :'  TO PP3-33.
           COMPUTE RESULT = (SMSLFA(5) / 1024).
           MOVE RESULT TO PP40-49.
           MOVE 'K'    TO PP50.
           COMPUTE RESULT = (SMSLFA(6) / 1024).
           MOVE RESULT TO PP57-66.
           MOVE 'K'    TO PP67.
           COMPUTE RESULT = (SMSLFA(7) / 1024).
           MOVE RESULT TO PP74-83.
           MOVE 'K'    TO PP84.
           COMPUTE RESULT = (SMSLFA(8) / 1024).
           MOVE RESULT TO PP91-100.
           MOVE 'K'    TO PP101.
           COMPUTE RESULT = (SMSLFA(9) / 1024).
           MOVE RESULT TO PP108-117.
           MOVE 'K'    TO PP118.
           PERFORM WRITE-OUTPUT.

           MOVE 'Largest Free Area as % of DSA :' TO PP3-33.
           IF SMSDSASZ(5) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                               (SMSLFA(5) / SMSDSASZ(5))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP40-49.
           MOVE '%'        TO PP50.
           IF SMSDSASZ(6) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                               (SMSLFA(6) / SMSDSASZ(6))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP57-66.
           MOVE '%'        TO PP67.
           IF SMSDSASZ(7) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                               (SMSLFA(7) / SMSDSASZ(7))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP74-83.
           MOVE '%'        TO PP84.
           IF SMSDSASZ(8) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                               (SMSLFA(8) / SMSDSASZ(8))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP91-100.
           MOVE '%'        TO PP101.
           IF SMSDSASZ(9) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                               (SMSLFA(9) / SMSDSASZ(9))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP108-117.
           MOVE '%'        TO PP118.
           PERFORM WRITE-OUTPUT.

           MOVE 'Largest Free/Free Storage . . :' TO PP3-33.
           IF SMSFSTG(5) > 0 THEN
              COMPUTE FREE-STORAGE-FACTOR = (SMSLFA(5) / SMSFSTG(5))
           ELSE
               MOVE 0 TO FREE-STORAGE-FACTOR
           END-IF.
           MOVE FREE-STORAGE-FACTOR TO PP44-49.
           IF SMSFSTG(6) > 0 THEN
               COMPUTE FREE-STORAGE-FACTOR = (SMSLFA(6) / SMSFSTG(6))
           ELSE
               MOVE 0 TO FREE-STORAGE-FACTOR
           END-IF.
           MOVE FREE-STORAGE-FACTOR TO PP61-66N.
           IF SMSFSTG(7) > 0 THEN
               COMPUTE FREE-STORAGE-FACTOR = (SMSLFA(7) / SMSFSTG(7))
           ELSE
               MOVE 0 TO FREE-STORAGE-FACTOR
           END-IF.
           MOVE FREE-STORAGE-FACTOR TO PP78-83.
           IF SMSFSTG(8) > 0 THEN
               COMPUTE FREE-STORAGE-FACTOR = (SMSLFA(8) / SMSFSTG(8))
           ELSE
               MOVE 0 TO FREE-STORAGE-FACTOR
           END-IF.
           MOVE FREE-STORAGE-FACTOR TO PP95-100.
           IF SMSFSTG(9) > 0 THEN
               COMPUTE FREE-STORAGE-FACTOR = (SMSLFA(9) / SMSFSTG(9))
           ELSE
               MOVE 0 TO FREE-STORAGE-FACTOR
           END-IF.
           MOVE FREE-STORAGE-FACTOR TO PP112-117.
           PERFORM WRITE-OUTPUT.

           MOVE '0' TO PRINT-CONTROL.
           MOVE 'Current number of extents . . :' TO PP3-33.
           MOVE SMSEXTS(5)                        TO PP40-49.
           MOVE SMSEXTS(6)                        TO PP57-66.
           MOVE SMSEXTS(7)                        TO PP74-83.
           MOVE SMSEXTS(8)                        TO PP91-100.
           MOVE SMSEXTS(9)                        TO PP108-117.
           COMPUTE RESULT = (SMSEXTS(5) + SMSEXTS(6) +
                             SMSEXTS(7) + SMSEXTS(8) + SMSEXTS(9)).
           MOVE RESULT                            TO PP122-131.
           PERFORM WRITE-OUTPUT.

           MOVE 'Number of extents added . . . :' TO PP3-33.
           MOVE SMSEXTSA(5)                       TO PP40-49.
           MOVE SMSEXTSA(6)                       TO PP57-66.
           MOVE SMSEXTSA(7)                       TO PP74-83.
           MOVE SMSEXTSA(8)                       TO PP91-100.
           MOVE SMSEXTSA(9)                       TO PP108-117.
           PERFORM WRITE-OUTPUT.

           MOVE 'Number of extents released. . :' TO PP3-33.
           MOVE SMSEXTSR(5)                       TO PP40-49.
           MOVE SMSEXTSR(6)                       TO PP57-66.
           MOVE SMSEXTSR(7)                       TO PP74-83.
           MOVE SMSEXTSR(8)                       TO PP91-100.
           MOVE SMSEXTSR(9)                       TO PP108-117.
           PERFORM WRITE-OUTPUT.

           MOVE '0' TO PRINT-CONTROL.
           MOVE 'Getmain Requests. . . . . . . :' TO PP3-33.
           MOVE SMSGMREQ(5)                       TO PP37-49.
           MOVE SMSGMREQ(6)                       TO PP54-66.
           MOVE SMSGMREQ(7)                       TO PP71-83.
           MOVE SMSGMREQ(8)                       TO PP88-100.
           MOVE SMSGMREQ(9)                       TO PP108-117.
           PERFORM WRITE-OUTPUT.

           MOVE 'Freemain Requests . . . . . . :' TO PP3-33.
           MOVE SMSFMREQ(5)                       TO PP37-49.
           MOVE SMSFMREQ(6)                       TO PP54-66.
           MOVE SMSFMREQ(7)                       TO PP71-83.
           MOVE SMSFMREQ(8)                       TO PP88-100.
           MOVE SMSFMREQ(9)                       TO PP108-117.
           PERFORM WRITE-OUTPUT.

           MOVE '0'        TO PRINT-CONTROL.
           MOVE 'Current number of Subpools. . :' TO PP3-33.
           MOVE SMSCSUBP(5)                       TO PP40-49.
           MOVE SMSCSUBP(6)                       TO PP57-66.
           MOVE SMSCSUBP(7)                       TO PP74-83.
           MOVE SMSCSUBP(8)                       TO PP91-100.
           MOVE SMSCSUBP(9)                       TO PP108-117.
           COMPUTE RESULT = (SMSCSUBP(5) + SMSCSUBP(6) +
                             SMSCSUBP(7) + SMSCSUBP(8) + SMSCSUBP(9)).
           MOVE RESULT                            TO PP122-131.
           PERFORM WRITE-OUTPUT.

           MOVE 'Add Subpool Requests. . . . . :' TO PP3-33.
           MOVE SMSASR(5)                         TO PP37-49.
           MOVE SMSASR(6)                         TO PP54-66.
           MOVE SMSASR(7)                         TO PP71-83.
           MOVE SMSASR(8)                         TO PP88-100.
           MOVE SMSASR(9)                         TO PP108-117.
           PERFORM WRITE-OUTPUT.

           MOVE 'Delete Subpool Requests . . . :' TO PP3-33.
           MOVE SMSDSR(5)                         TO PP37-49.
           MOVE SMSDSR(6)                         TO PP54-66.
           MOVE SMSDSR(7)                         TO PP71-83.
           MOVE SMSDSR(8)                         TO PP88-100.
           MOVE SMSDSR(9)                         TO PP108-117.
           PERFORM WRITE-OUTPUT.

           MOVE '0'        TO PRINT-CONTROL.
           MOVE 'Times no storage returned . . :' TO PP3-33.
           MOVE SMSCRISS(5)                       TO PP40-49.
           MOVE SMSCRISS(6)                       TO PP57-66.
           MOVE SMSCRISS(7)                       TO PP74-83.
           MOVE SMSCRISS(8)                       TO PP91-100.
           MOVE SMSCRISS(9)                       TO PP108-117.
           PERFORM WRITE-OUTPUT.

           MOVE 'Times request suspended . . . :' TO PP3-33.
           MOVE SMSUCSS(5)                        TO PP40-49.
           MOVE SMSUCSS(6)                        TO PP57-66.
           MOVE SMSUCSS(7)                        TO PP74-83.
           MOVE SMSUCSS(8)                        TO PP91-100.
           MOVE SMSUCSS(9)                        TO PP108-117.
           PERFORM WRITE-OUTPUT.

           MOVE 'Current requests suspended. . :' TO PP3-33.
           MOVE SMSCSS(5)                         TO PP40-49.
           MOVE SMSCSS(6)                         TO PP57-66.
           MOVE SMSCSS(7)                         TO PP74-83.
           MOVE SMSCSS(8)                         TO PP91-100.
           MOVE SMSCSS(9)                         TO PP108-117.
           PERFORM WRITE-OUTPUT.

           MOVE 'Peak requests suspended . . . :' TO PP3-33.
           MOVE SMSHWMSS(5)                       TO PP40-49.
           MOVE SMSHWMSS(6)                       TO PP57-66.
           MOVE SMSHWMSS(7)                       TO PP74-83.
           MOVE SMSHWMSS(8)                       TO PP91-100.
           MOVE SMSHWMSS(9)                       TO PP108-117.
           PERFORM WRITE-OUTPUT.

           MOVE 'Requests purged while waiting :' TO PP3-33.
           MOVE SMSPWWS(5)                        TO PP40-49.
           MOVE SMSPWWS(6)                        TO PP57-66.
           MOVE SMSPWWS(7)                        TO PP74-83.
           MOVE SMSPWWS(8)                        TO PP91-100.
           MOVE SMSPWWS(9)                        TO PP108-117.
           PERFORM WRITE-OUTPUT.

           MOVE '0'        TO PRINT-CONTROL.
           MOVE 'Times Cushion released. . . . :' TO PP3-33.
           MOVE SMSCREL(5)                        TO PP40-49.
           MOVE SMSCREL(6)                        TO PP57-66.
           MOVE SMSCREL(7)                        TO PP74-83.
           MOVE SMSCREL(8)                        TO PP91-100.
           MOVE SMSCREL(9)                        TO PP108-117.
           COMPUTE RESULT = (SMSCREL(5) + SMSCREL(6) +
                             SMSCREL(7) + SMSCREL(8) + SMSCREL(9)).
           MOVE RESULT                            TO PP122-131.
           PERFORM WRITE-OUTPUT.

           MOVE 'Times Short-On-Storage. . . . :' TO PP3-33.
           MOVE SMSSOS(5)                         TO PP40-49.
           MOVE SMSSOS(6)                         TO PP57-66.
           MOVE SMSSOS(7)                         TO PP74-83.
           MOVE SMSSOS(8)                         TO PP91-100.
           MOVE SMSSOS(9)                         TO PP108-117.
           COMPUTE RESULT = (SMSSOS(5) + SMSSOS(6) +
                             SMSSOS(7) + SMSSOS(8) + SMSSOS(9)).
           MOVE RESULT                            TO PP122-131.
           PERFORM WRITE-OUTPUT.

           MOVE 'Total time Short-On-Storage . :' TO PP3-33.
           MOVE SMSTSOS(5) TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP36-49.
           MOVE SMSTSOS(6) TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP53-66.
           MOVE SMSTSOS(7) TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP70-83.
           MOVE SMSTSOS(8) TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP87-100.
           MOVE SMSTSOS(9) TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP104-117.
           PERFORM WRITE-OUTPUT.

           MOVE 'Average Short-On-Storage time :' TO PP3-33.
           IF SMSSOS(5) > 0 THEN
               MOVE SMSTSOS(5) TO CLOCK-FIELD
               COMPUTE CLOCK-FIELD-S = (CLOCK-FIELD-S / SMSSOS(5))
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP36-49.
           IF SMSSOS(6) > 0 THEN
               MOVE SMSTSOS(6) TO CLOCK-FIELD
               COMPUTE CLOCK-FIELD-S = (CLOCK-FIELD-S / SMSSOS(6))
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP53-66.
           IF SMSSOS(7) > 0 THEN
               MOVE SMSTSOS(7) TO CLOCK-FIELD
               COMPUTE CLOCK-FIELD-S = (CLOCK-FIELD-S / SMSSOS(7))
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP70-83.
           IF SMSSOS(8) > 0 THEN
               MOVE SMSTSOS(8) TO CLOCK-FIELD
               COMPUTE CLOCK-FIELD-S = (CLOCK-FIELD-S / SMSSOS(8))
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP87-100.
           IF SMSSOS(9) > 0 THEN
               MOVE SMSTSOS(9) TO CLOCK-FIELD
               COMPUTE CLOCK-FIELD-S = (CLOCK-FIELD-S / SMSSOS(9))
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP104-117.
           PERFORM WRITE-OUTPUT.

           MOVE '0'        TO PRINT-CONTROL.
           MOVE 'Storage Violations. . . . . . :' TO PP3-33.
           MOVE SMSSV(5)                          TO PP40-49.
           MOVE SMSSV(6)                          TO PP57-66.
           MOVE SMSSV(7)                          TO PP74-83.
           MOVE SMSSV(8)                          TO PP91-100.
           MOVE SMSSV(9)                          TO PP108-117.
           PERFORM WRITE-OUTPUT.

           MOVE '0'        TO PRINT-CONTROL.
           MOVE 'Access. . . . . . . . . . . . :' TO PP3-33.
           EVALUATE TRUE
               WHEN SMSCICS(5)
                   MOVE '    CICS' TO PP42-49
               WHEN SMSUSER(5)
                   MOVE '    USER' TO PP42-49
               WHEN SMSREADONLY(5)
                   MOVE 'READONLY' TO PP42-49
               WHEN SMSTRUSTED(5)
                   MOVE ' TRUSTED' TO PP42-49
           END-EVALUATE.
           EVALUATE TRUE
               WHEN SMSCICS(6)
                   MOVE '    CICS' TO PP59-66
               WHEN SMSUSER(6)
                   MOVE '    USER' TO PP59-66
               WHEN SMSREADONLY(6)
                   MOVE 'READONLY' TO PP59-66
               WHEN SMSTRUSTED(6)
                   MOVE ' TRUSTED' TO PP59-66
           END-EVALUATE.
           EVALUATE TRUE
               WHEN SMSCICS(7)
                   MOVE '    CICS' TO PP76-83
               WHEN SMSUSER(7)
                   MOVE '    USER' TO PP76-83
               WHEN SMSREADONLY(7)
                   MOVE 'READONLY' TO PP76-83
               WHEN SMSTRUSTED(7)
                   MOVE ' TRUSTED' TO PP76-83
           END-EVALUATE.
           EVALUATE TRUE
               WHEN SMSCICS(8)
                   MOVE '    CICS' TO PP93-100
               WHEN SMSUSER(8)
                   MOVE '    USER' TO PP93-100
               WHEN SMSREADONLY(8)
                   MOVE 'READONLY' TO PP93-100
               WHEN SMSTRUSTED(8)
                   MOVE ' TRUSTED' TO PP93-100
           END-EVALUATE.
           EVALUATE TRUE
               WHEN SMSCICS(9)
                   MOVE '    CICS' TO PP110-117
               WHEN SMSUSER(9)
                   MOVE '    USER' TO PP110-117
               WHEN SMSREADONLY(9)
                   MOVE 'READONLY' TO PP110-117
               WHEN SMSTRUSTED(9)
                   MOVE ' TRUSTED' TO PP110-117
           END-EVALUATE.
           PERFORM WRITE-OUTPUT.

           MOVE '0'        TO PRINT-CONTROL.
           MOVE '''*'' indicates values reset on last DSA Size change'
               TO PP3-52.
           PERFORM WRITE-OUTPUT.
           EJECT
      *****************************************************************
      *** Print the Page headings for the storage analysis.         ***
      *****************************************************************
           PERFORM PAGE-HEADINGS.
           MOVE PAGENO TO STORAGE-ABOVE-BAR-PAGENO.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'Storage ABOVE 2GB' TO PP1-17.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP1-17.
           PERFORM WRITE-OUTPUT.

      *****************************************************************
      ***  Analysis of the Private Area Above 2GB                   ***
      *****************************************************************

           MOVE '0'    TO PRINT-CONTROL.
           MOVE 'MEMLIMIT Size. . . . . . . . . . . . :' TO PP3-40.
           IF SMS-MEMLIMIT-NOLIMIT THEN
               MOVE 'NOLIMIT'      TO PP53-59
           ELSE
               PERFORM CALCULATE-MEMLIMIT
               MOVE MEMLIMIT-SIZE  TO PP42-58
               MOVE MEMLIMIT-UNITS TO PP59
           END-IF.
           MOVE 'CICS Internal Trace table size (bytes). . :'
                   TO PP71-113.
           COMPUTE BIG-RESULT = (TRACE-TABLE-SIZE * 1024)
           END-COMPUTE.
           MOVE BIG-RESULT TO PP115-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'MEMLIMIT Set By. . . . . . . . . . . :' TO PP3-40.
           EVALUATE TRUE
               WHEN SMSMEMLIMITSRC-SMF
                   MOVE '         SMFPRM' TO PP45-59
               WHEN SMSMEMLIMITSRC-JCL
                   MOVE '            JCL' TO PP45-59
               WHEN SMSMEMLIMITSRC-REG
                   MOVE '         REGION' TO PP45-59
               WHEN SMSMEMLIMITSRC-USI
                   MOVE '         IEFUSI' TO PP45-59
               WHEN SMSMEMLIMITSRC-AUTH
                   MOVE 'AUTHORISED CODE' TO PP45-59
               WHEN SMSMEMLIMITSRC-URG
                   MOVE '  IEFUSI REGION' TO PP45-59
               WHEN OTHER
                   CONTINUE
           END-EVALUATE.
           MOVE 'CICS Internal Trace table size. . . . . . :'
                   TO PP71-113.
           MOVE TRACE-TABLE-SIZE    TO PP122-131.
           MOVE 'K'                 TO PP132.
           PERFORM WRITE-OUTPUT.

           PERFORM WRITE-OUTPUT.

           MOVE 'Current Address Space active (bytes) :' TO PP3-40.
           COMPUTE BIG-RESULT = (SMS-AS-ACTIVE * ONE-MEGABYTE)
           END-COMPUTE.
           MOVE BIG-RESULT          TO PP42-59.
           MOVE 'IARV64 GETSTOR request size . . . . . . . :'
                   TO PP71-113.
           MOVE SMS-GETSTOR-SIZE    TO PP122-131.
           MOVE 'M'                 TO PP132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Current Address Space active . . . . :' TO PP3-40.
           MOVE SMS-AS-ACTIVE       TO PP42-58.
           MOVE 'M'                 TO PP59.
           PERFORM WRITE-OUTPUT.

           MOVE 'Peak Address Space active. . . . . . :' TO PP3-40.
           MOVE SMS-HWM-AS-ACTIVE   TO PP42-58.
           MOVE 'M'                 TO PP59.
           MOVE 'Number of IARV64 FROMGUARD failures . . . :'
                   TO PP71-113.
           MOVE SMSFROMGUARDFAIL    TO PP115-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Largest IARV64 FROMGUARD failure size . . :'
                   TO PP71-113.
           MOVE SMSFROMGUARDFAILSIZE TO PP115-132.
           PERFORM WRITE-OUTPUT.

           PERFORM WRITE-OUTPUT.

           MOVE 'MEMLIMIT minus Current Address Space active. . . . :'
                   TO PP3-54.
           IF SMS-MEMLIMIT-NOLIMIT THEN
               MOVE 'NOLIMIT'         TO PP65-71
           ELSE
               COMPUTE BIG-RESULT-SIGNED =
                   (SMS-MEMLIMIT - SMS-AS-ACTIVE)
               END-COMPUTE
               MOVE BIG-RESULT-SIGNED TO PP57-70
               MOVE 'M'               TO PP71
           END-IF.
           PERFORM WRITE-OUTPUT.

           MOVE 'MEMLIMIT minus usable within Private Memory Objects:'
                   TO PP3-54.
           IF SMS-MEMLIMIT-NOLIMIT THEN
               MOVE 'NOLIMIT'        TO PP65-71
           ELSE
               COMPUTE BIG-RESULT = ( (SMSLVABYTES - SMSLVHBYTES)
                                       / ONE-MEGABYTE )
               END-COMPUTE
               COMPUTE BIG-RESULT2 = (SMS-MEMLIMIT - BIG-RESULT)
               END-COMPUTE
               MOVE BIG-RESULT2       TO PP57-70
               MOVE 'M'               TO PP71
           END-IF.
           PERFORM WRITE-OUTPUT.

           MOVE '-'    TO PRINT-CONTROL.
           MOVE 'Number of Private Memory Objects . . . . . . . . . :'
                   TO PP3-54.
           MOVE SMSLVNMEMOBJ        TO PP57-71.
           PERFORM WRITE-OUTPUT.

           MOVE '  ....minus Current GDSA extents . . . . . . . . . :'
                   TO PP3-54.
           COMPUTE RESULT = (SMSLVNMEMOBJ -
                   (SMSEXTS(10) + SMSEXTS(11) + SMSEXTS(12))).
           MOVE RESULT              TO PP57-71.


           PERFORM WRITE-OUTPUT.

           MOVE 'Bytes allocated to Private Memory Objects. . . . . :'
                   TO PP3-54.
           COMPUTE BIG-RESULT = (SMSLVABYTES / ONE-MEGABYTE)
           END-COMPUTE.
           MOVE BIG-RESULT          TO PP57-70.
           MOVE 'M'                 TO PP71.
           MOVE '='                 TO PP74.
           MOVE SMSLVABYTES         TO PP77-94.
           PERFORM WRITE-OUTPUT.

           MOVE '  ....minus Current GDSA allocated . . . . . . . . :'
                   TO PP3-54.
           COMPUTE BIG-RESULT =
               ((SMSLVABYTES / ONE-MEGABYTE) - SMS-GDSA-ALLOCATED)
           END-COMPUTE.
           MOVE BIG-RESULT          TO PP57-70.
           MOVE 'M'                 TO PP71.
           MOVE '='                 TO PP74.
           COMPUTE BIG-RESULT =
               (SMSLVABYTES - (SMS-GDSA-ALLOCATED * ONE-MEGABYTE))
           END-COMPUTE.
           MOVE BIG-RESULT          TO PP77-94.
           PERFORM WRITE-OUTPUT.

           MOVE 'Bytes hidden within Private Memory Objects . . . . :'
                   TO PP3-54.
           COMPUTE BIG-RESULT = (SMSLVHBYTES / ONE-MEGABYTE)
           END-COMPUTE.
           MOVE BIG-RESULT          TO PP57-70.
           MOVE 'M'                 TO PP71.
           MOVE '='                 TO PP74.
           MOVE SMSLVHBYTES         TO PP77-94.
           PERFORM WRITE-OUTPUT.

           MOVE '  ....minus Current GDSA hidden. . . . . . . . . . :'
                   TO PP3-54.
           COMPUTE BIG-RESULT = ((SMSLVHBYTES / ONE-MEGABYTE) -
               (SMS-GDSA-ALLOCATED - SMS-GDSA-ACTIVE))
           END-COMPUTE.
           MOVE BIG-RESULT          TO PP57-70.
           MOVE 'M'                 TO PP71.
           MOVE '='                 TO PP74.
           COMPUTE BIG-RESULT2 =
              ( (SMS-GDSA-ALLOCATED - SMS-GDSA-ACTIVE)* ONE-MEGABYTE)
           END-COMPUTE.
           COMPUTE BIG-RESULT2 = SMSLVHBYTES - BIG-RESULT2
           END-COMPUTE.
           MOVE BIG-RESULT2         TO PP77-94.
           PERFORM WRITE-OUTPUT.

           MOVE '    ....minus CICS Internal Trace Table hidden . . :'
                   TO PP3-54.
           COMPUTE BIG-RESULT2 = (BIG-RESULT -
               (ONE-GIGABYTE - ((TRACE-TABLE-SIZE + 1023) / 1024)))
           END-COMPUTE.
           MOVE BIG-RESULT2         TO PP57-70.
           MOVE 'M'                 TO PP71.
           PERFORM WRITE-OUTPUT.

           MOVE 'Bytes usable within Private Memory Objects . . . . :'
                   TO PP3-54.
           COMPUTE BIG-RESULT = (SMSLVABYTES - SMSLVHBYTES)
           END-COMPUTE.
           COMPUTE BIG-RESULT2 = (BIG-RESULT / ONE-MEGABYTE)
           END-COMPUTE.
           MOVE BIG-RESULT2         TO PP57-70.
           MOVE 'M'                 TO PP71.
           MOVE '='                 TO PP74.
           COMPUTE BIG-RESULT = (SMSLVABYTES - SMSLVHBYTES)
           END-COMPUTE.
           MOVE BIG-RESULT          TO PP77-94.
           PERFORM WRITE-OUTPUT.

           MOVE 'Peak bytes usable within Private Memory Objects. . :'
                   TO PP3-54.
           COMPUTE BIG-RESULT = (SMSLVGBYTES / ONE-MEGABYTE)
           END-COMPUTE.
           MOVE BIG-RESULT          TO PP57-70.
           MOVE 'M'                 TO PP71.
           MOVE '='                 TO PP74.
           MOVE SMSLVGBYTES         TO PP77-94.
           PERFORM WRITE-OUTPUT.

           MOVE '-'    TO PRINT-CONTROL.
           MOVE 'Current GDSA Allocated . . . . . . . . . . . . . . :'
                   TO PP3-54.
           MOVE SMS-GDSA-ALLOCATED  TO PP57-70.
           MOVE 'M'                 TO PP71.
           MOVE '='                 TO PP74.
           COMPUTE BIG-RESULT = (SMS-GDSA-ALLOCATED * ONE-MEGABYTE)
           END-COMPUTE.
           MOVE BIG-RESULT          TO PP77-94.
           PERFORM WRITE-OUTPUT.

           MOVE 'Peak GDSA Allocated. . . . . . . . . . . . . . . . :'
                   TO PP3-54.
           MOVE SMS-HWM-GDSA-ALLOCATED TO PP57-70.
           MOVE 'M'                    TO PP71.
           PERFORM WRITE-OUTPUT.

           PERFORM WRITE-OUTPUT.

           MOVE 'Current GDSA Active. . . . . . . . . . . . . . . . :'
                   TO PP3-54.
           MOVE SMS-GDSA-ACTIVE     TO PP57-70.
           MOVE 'M'                 TO PP71.
           MOVE '='                 TO PP74.
           COMPUTE BIG-RESULT = (SMS-GDSA-ACTIVE * ONE-MEGABYTE)
           END-COMPUTE.
           MOVE BIG-RESULT          TO PP77-94.
           PERFORM WRITE-OUTPUT.

           MOVE 'Peak GDSA Active . . . . . . . . . . . . . . . . . :'
                   TO PP3-54.
           MOVE SMS-HWM-GDSA-ACTIVE TO PP57-70.
           MOVE 'M'                 TO PP71.
           PERFORM WRITE-OUTPUT.

           PERFORM WRITE-OUTPUT.

           MOVE 'Current GDSA Used. . . . . . . . . . . . . . . . . :'
                   TO PP3-54.
           COMPUTE RESULT = (SMSDSASZ(10) - SMSFSTG(10)).
           MOVE RESULT              TO DSA-USED.
           COMPUTE RESULT = (SMSDSASZ(11) - SMSFSTG(11)).
           ADD  RESULT              TO DSA-USED.
           COMPUTE RESULT = (SMSDSASZ(12) - SMSFSTG(12)).
           ADD  RESULT              TO DSA-USED.
           MOVE DSA-USED            TO PP57-70.
           MOVE 'M'                 TO PP71.
           PERFORM WRITE-OUTPUT.

           MOVE '-'    TO PRINT-CONTROL.
           MOVE 'Number of Shared Memory Objects. . . . . . . . . . :'
                   TO PP3-54.
           MOVE SMSLVSHRNMEMOBJ     TO PP57-71.
           PERFORM WRITE-OUTPUT.

           MOVE 'Bytes allocated to Shared Memory Objects . . . . . :'
                   TO PP3-54.
           COMPUTE BIG-RESULT = (SMSLVSHRBYTES / ONE-MEGABYTE)
           END-COMPUTE.
           MOVE BIG-RESULT          TO PP57-70.
           MOVE 'M'                 TO PP71.
           MOVE '='                 TO PP74.
           MOVE SMSLVSHRBYTES       TO PP77-94.
           PERFORM WRITE-OUTPUT.

           MOVE 'Peak bytes usable within Shared Memory Objects . . :'
                   TO PP3-54.
           COMPUTE BIG-RESULT = (SMSLVSHRGBYTES / ONE-MEGABYTE)
           END-COMPUTE.
           MOVE BIG-RESULT          TO PP57-70.
           MOVE 'M'                 TO PP71.
           MOVE '='                 TO PP74.
           MOVE SMSLVSHRGBYTES      TO PP77-94.
           PERFORM WRITE-OUTPUT.

           MOVE '0'    TO PRINT-CONTROL.
           MOVE 'Auxiliary Slots backing Private Memory Objects . . :'
                   TO PP3-54.
           MOVE SMSHVAUXSLOTS       TO PP57-71.
           PERFORM WRITE-OUTPUT.

           MOVE 'HWM Auxiliary Slots backing Private Memory Object. :'
                   TO PP3-54.
           MOVE SMSHVGAUXSLOTS      TO PP57-71.
           PERFORM WRITE-OUTPUT.

           MOVE '0'    TO PRINT-CONTROL.
           MOVE 'Real Frames backing Private Memory Objects . . . . :'
                   TO PP3-54.
           MOVE SMSHVPAGESINREAL    TO PP57-71.
           PERFORM WRITE-OUTPUT.

           MOVE 'HWM Real Frames backing Private Memory Objects . . :'
                   TO PP3-54.
           MOVE SMSHVGPAGESINREAL   TO PP57-71.
           PERFORM WRITE-OUTPUT.

           MOVE '0'    TO PRINT-CONTROL.
           MOVE 'Number of Large Memory Objects Allocated . . . . . :'
                   TO PP3-54.
           MOVE SMSLARGEMEMOBJ      TO PP57-71.
           PERFORM WRITE-OUTPUT.

           MOVE 'Number of Large Pages backed in Real Storage . . . :'
                   TO PP3-54.
           MOVE SMSLARGEPAGESINREAL TO PP57-71.
           PERFORM WRITE-OUTPUT.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE ALL '-' TO PP1-132.
           PERFORM WRITE-OUTPUT.

      *****************************************************************
      *** Print the Page headings for the storage analysis.         ***
      *****************************************************************
           PERFORM PAGE-HEADINGS.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'Storage ABOVE 2GB' TO PP1-17.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP1-17.
           PERFORM WRITE-OUTPUT.

      *****************************************************************
      ***  Analysis of the Private Area Above 2GB                   ***
      *****************************************************************

           MOVE '0'    TO PRINT-CONTROL.
           MOVE 'MEMLIMIT Size . . . . . . . . :' TO PP3-33.
           IF SMS-MEMLIMIT-NOLIMIT THEN
               MOVE '        NOLIMIT' TO PP36-50
           ELSE
               PERFORM CALCULATE-MEMLIMIT
               MOVE MEMLIMIT-SIZE     TO PP37-49
               MOVE MEMLIMIT-UNITS    TO PP50
           END-IF.
           MOVE 'CICS Internal Trace table size (bytes) . . . . . :'
                   TO PP63-112.
           COMPUTE BIG-RESULT = (TRACE-TABLE-SIZE * 1024)
           END-COMPUTE.
           MOVE BIG-RESULT TO PP115-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'MEMLIMIT Set By . . . . . . . :' TO PP3-33.
           EVALUATE TRUE
               WHEN SMSMEMLIMITSRC-SMF
                   MOVE '         SMFPRM' TO PP36-50
               WHEN SMSMEMLIMITSRC-JCL
                   MOVE '            JCL' TO PP36-50
               WHEN SMSMEMLIMITSRC-REG
                   MOVE '         REGION' TO PP36-50
               WHEN SMSMEMLIMITSRC-USI
                   MOVE '         IEFUSI' TO PP36-50
               WHEN SMSMEMLIMITSRC-AUTH
                   MOVE 'AUTHORISED CODE' TO PP36-50
               WHEN SMSMEMLIMITSRC-URG
                   MOVE '  IEFUSI REGION' TO PP36-50
               WHEN OTHER
                   CONTINUE
           END-EVALUATE.
           MOVE 'CICS Internal Trace table size . . . . . . . . . :'
                   TO PP63-112.
           MOVE TRACE-TABLE-SIZE    TO PP122-131.
           MOVE 'K'                 TO PP132.
           PERFORM WRITE-OUTPUT.

           MOVE '0'    TO PRINT-CONTROL.
           MOVE 'Current Address Space active. :' TO PP3-33.
           MOVE SMS-AS-ACTIVE       TO PP40-49.
           MOVE 'M'                 TO PP50.
           MOVE 'Number of Private Memory Objects . . . . . . . . :'
                   TO PP63-112.
           MOVE SMSLVNMEMOBJ        TO PP115-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Peak Address Space active . . :' TO PP3-33.
           MOVE SMS-HWM-AS-ACTIVE   TO PP40-49.
           MOVE 'M'                 TO PP50.
           MOVE 'Bytes allocated to Private Memory Objects. . . . :'
                   TO PP63-112.
           MOVE SMSLVABYTES         TO PP115-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Bytes hidden within Private Memory Objects . . . :'
                   TO PP63-112.
           MOVE SMSLVHBYTES         TO PP115-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Current GDSA Allocated. . . . :' TO PP3-33.
           MOVE SMS-GDSA-ALLOCATED  TO PP40-49.
           MOVE 'M'                 TO PP50.
           MOVE 'Peak bytes usable within Private Memory Objects. :'
                   TO PP63-112.
           MOVE SMSLVGBYTES         TO PP115-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Peak GDSA Allocated . . . . . :' TO PP3-33.
           MOVE SMS-HWM-GDSA-ALLOCATED TO PP40-49.
           MOVE 'M'                    TO PP50.
           PERFORM WRITE-OUTPUT.

           MOVE '0'    TO PRINT-CONTROL.
           MOVE 'Current GDSA Active . . . . . :' TO PP3-33.
           MOVE SMS-GDSA-ACTIVE     TO PP40-49.
           MOVE 'M'                 TO PP50.
           PERFORM WRITE-OUTPUT.

           MOVE 'Peak GDSA Active. . . . . . . :' TO PP3-33.
           MOVE SMS-HWM-GDSA-ACTIVE TO PP40-49.
           MOVE 'M'                 TO PP50.
           PERFORM WRITE-OUTPUT.

      *****************************************************************
      *** Print the CICS DSA storage statistics for above the 2GB   ***
      *** bar, calculating various fields as required.              ***
      *****************************************************************
           MOVE '-'               TO PRINT-CONTROL.
           MOVE '         GCDSA            GUDSA            GSDSA
      -    '    Totals                  ' TO PP36-118.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE '_______________________________________________________
      -    '___________                 ' TO PP36-118.
           PERFORM WRITE-OUTPUT.

           MOVE ' '    TO PRINT-CONTROL.
           MOVE 'Current DSA Size. . . . . . . :' TO PP3-33.
           MOVE SMSDSASZ(10) TO PP40-49.
           MOVE 'M'          TO PP50.
           MOVE SMSDSASZ(11) TO PP57-66.
           MOVE 'M'          TO PP67.
           MOVE SMSDSASZ(12) TO PP74-83.
           MOVE 'M'          TO PP84.

           COMPUTE DSA-SIZE = (GCDSA-SIZE + GUDSA-SIZE + GSDSA-SIZE).
           MOVE DSA-SIZE     TO PP88-100.
           MOVE 'M'          TO PP101.
           PERFORM WRITE-OUTPUT.

           MOVE 'Current DSA Used. . . . . . . :' TO PP3-33.
           COMPUTE RESULT = (SMSDSASZ(10) - SMSFSTG(10)).
           MOVE RESULT       TO DSA-USED.
           MOVE RESULT       TO PP40-49.
           MOVE 'M'          TO PP50.
           COMPUTE RESULT = (SMSDSASZ(11) - SMSFSTG(11)).
           ADD  RESULT       TO DSA-USED.
           MOVE RESULT       TO PP57-66.
           MOVE 'M'          TO PP67.
           COMPUTE RESULT = (SMSDSASZ(12) - SMSFSTG(12)).
           ADD  RESULT       TO DSA-USED.
           MOVE RESULT       TO PP74-83.
           MOVE 'M'          TO PP84.

           MOVE DSA-USED     TO PP91-100.
           MOVE 'M'          TO PP101.
           PERFORM WRITE-OUTPUT.

           MOVE 'Current DSA Used as % of DSA. :' TO PP3-33.
           IF SMSDSASZ(10) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                   ((SMSDSASZ(10) - SMSFSTG(10)) / SMSDSASZ(10))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP40-49.
           MOVE '%'        TO PP50.
           IF SMSDSASZ(11) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                   ((SMSDSASZ(11) - SMSFSTG(11)) / SMSDSASZ(11))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP57-66.
           MOVE '%'        TO PP67.
           IF SMSDSASZ(12) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                   ((SMSDSASZ(12) - SMSFSTG(12)) / SMSDSASZ(12))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP74-83.
           MOVE '%'        TO PP84.
           PERFORM WRITE-OUTPUT.

           MOVE '*'    TO PP1.
           MOVE 'Peak DSA Used . . . . . . . . :' TO PP3-33.
           COMPUTE RESULT = (SMSDSASZ(10) - SMSLWMFSTG(10)).
           MOVE RESULT       TO PP40-49.
           MOVE 'M'          TO PP50.
           COMPUTE RESULT = (SMSDSASZ(11) - SMSLWMFSTG(11)).
           MOVE RESULT       TO PP57-66.
           MOVE 'M'          TO PP67.
           COMPUTE RESULT = (SMSDSASZ(12) - SMSLWMFSTG(12)).
           MOVE RESULT       TO PP74-83.
           MOVE 'M'          TO PP84.
           PERFORM WRITE-OUTPUT.

           MOVE 'Peak DSA Size . . . . . . . . :' TO PP3-33.
           MOVE SMSHWMDSASZ(10) TO PP40-49.
           MOVE 'M'             TO PP50.
           MOVE SMSHWMDSASZ(11) TO PP57-66.
           MOVE 'M'             TO PP67.
           MOVE SMSHWMDSASZ(12) TO PP74-83.
           MOVE 'M'             TO PP84.
           PERFORM WRITE-OUTPUT.

           MOVE 'Cushion Size. . . . . . . . . :' TO PP3-33.
           MOVE SMSCSIZE(10) TO PP40-49.
           MOVE 'M'          TO PP50.
           MOVE SMSCSIZE(11) TO PP57-66.
           MOVE 'M'          TO PP67.
           MOVE SMSCSIZE(12) TO PP74-83.
           MOVE 'M'          TO PP84.
           PERFORM WRITE-OUTPUT.

           MOVE 'Free Storage (inc. Cushion) . :' TO PP3-33.
           MOVE SMSFSTG(10) TO PP40-49.
           MOVE 'M'         TO PP50.
           MOVE SMSFSTG(11) TO PP57-66.
           MOVE 'M'         TO PP67.
           MOVE SMSFSTG(12) TO PP74-83.
           MOVE 'M'         TO PP84.
           PERFORM WRITE-OUTPUT.

           MOVE '*'    TO PP1.
           MOVE 'Peak Free Storage . . . . . . :' TO PP3-33.
           MOVE SMSHWMFSTG(10) TO PP40-49.
           MOVE 'M'            TO PP50.
           MOVE SMSHWMFSTG(11) TO PP57-66.
           MOVE 'M'            TO PP67.
           MOVE SMSHWMFSTG(12) TO PP74-83.
           MOVE 'M'            TO PP84.
           PERFORM WRITE-OUTPUT.

           MOVE '*'    TO PP1.
           MOVE 'Lowest Free Storage . . . . . :' TO PP3-33.
           MOVE SMSLWMFSTG(10) TO PP40-49.
           MOVE 'M'            TO PP50.
           MOVE SMSLWMFSTG(11) TO PP57-66.
           MOVE 'M'            TO PP67.
           MOVE SMSLWMFSTG(12) TO PP74-83.
           MOVE 'M'            TO PP84.
           PERFORM WRITE-OUTPUT.

           MOVE 'Largest Free Area . . . . . . :' TO PP3-33.
           MOVE SMSLFA(10) TO PP40-49.
           MOVE 'M'        TO PP50.
           MOVE SMSLFA(11) TO PP57-66.
           MOVE 'M'        TO PP67.
           MOVE SMSLFA(12) TO PP74-83.
           MOVE 'M'        TO PP84.
           PERFORM WRITE-OUTPUT.

           MOVE 'Largest Free Area as % of DSA :' TO PP3-33.
           IF SMSDSASZ(10) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                               (SMSLFA(10) / SMSDSASZ(10))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP40-49.
           MOVE '%'        TO PP50.
           IF SMSDSASZ(11) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                               (SMSLFA(11) / SMSDSASZ(11))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP57-66.
           MOVE '%'        TO PP67.
           IF SMSDSASZ(12) > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                               (SMSLFA(12) / SMSDSASZ(12))
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE TO PP74-83.
           MOVE '%'        TO PP84.
           PERFORM WRITE-OUTPUT.

           MOVE 'Largest Free/Free Storage . . :' TO PP3-33.
           IF SMSFSTG(10) > 0 THEN
              COMPUTE FREE-STORAGE-FACTOR = (SMSLFA(10) / SMSFSTG(10))
           ELSE
               MOVE 0 TO FREE-STORAGE-FACTOR
           END-IF.
           MOVE FREE-STORAGE-FACTOR TO PP44-49.
           IF SMSFSTG(11) > 0 THEN
              COMPUTE FREE-STORAGE-FACTOR = (SMSLFA(11) / SMSFSTG(11))
           ELSE
               MOVE 0 TO FREE-STORAGE-FACTOR
           END-IF.
           MOVE FREE-STORAGE-FACTOR TO PP61-66N.
           IF SMSFSTG(12) > 0 THEN
              COMPUTE FREE-STORAGE-FACTOR = (SMSLFA(12) / SMSFSTG(12))
           ELSE
               MOVE 0 TO FREE-STORAGE-FACTOR
           END-IF.
           MOVE FREE-STORAGE-FACTOR TO PP78-83.
           PERFORM WRITE-OUTPUT.

           MOVE '0' TO PRINT-CONTROL.
           MOVE 'Current number of extents . . :' TO PP3-33.
           MOVE SMSEXTS(10)                       TO PP40-49.
           MOVE SMSEXTS(11)                       TO PP57-66.
           MOVE SMSEXTS(12)                       TO PP74-83.
           COMPUTE RESULT = (SMSEXTS(10) + SMSEXTS(11) +
                             SMSEXTS(12)).
           MOVE RESULT                            TO PP91-100.
           PERFORM WRITE-OUTPUT.

           MOVE 'Number of extents added . . . :' TO PP3-33.
           MOVE SMSEXTSA(10)                      TO PP40-49.
           MOVE SMSEXTSA(11)                      TO PP57-66.
           MOVE SMSEXTSA(12)                      TO PP74-83.
           PERFORM WRITE-OUTPUT.

           MOVE 'Number of extents released. . :' TO PP3-33.
           MOVE SMSEXTSR(10)                      TO PP40-49.
           MOVE SMSEXTSR(11)                      TO PP57-66.
           MOVE SMSEXTSR(12)                      TO PP74-83.
           PERFORM WRITE-OUTPUT.

           MOVE '0' TO PRINT-CONTROL.
           MOVE 'Getmain Requests. . . . . . . :' TO PP3-33.
           MOVE SMSGMREQ(10)                      TO PP37-49.
           MOVE SMSGMREQ(11)                      TO PP54-66.
           MOVE SMSGMREQ(12)                      TO PP71-83.
           PERFORM WRITE-OUTPUT.

           MOVE 'Freemain Requests . . . . . . :' TO PP3-33.
           MOVE SMSFMREQ(10)                      TO PP37-49.
           MOVE SMSFMREQ(11)                      TO PP54-66.
           MOVE SMSFMREQ(12)                      TO PP71-83.
           PERFORM WRITE-OUTPUT.

           MOVE '0'        TO PRINT-CONTROL.
           MOVE 'Current number of Subpools. . :' TO PP3-33.
           MOVE SMSCSUBP(10)                      TO PP40-49.
           MOVE SMSCSUBP(11)                      TO PP57-66.
           MOVE SMSCSUBP(12)                      TO PP74-83.
           COMPUTE RESULT = (SMSCSUBP(10) + SMSCSUBP(11) +
                             SMSCSUBP(12)).
           MOVE RESULT                            TO PP91-100.
           PERFORM WRITE-OUTPUT.

           MOVE 'Add Subpool Requests. . . . . :' TO PP3-33.
           MOVE SMSASR(10)                        TO PP37-49.
           MOVE SMSASR(11)                        TO PP54-66.
           MOVE SMSASR(12)                        TO PP71-83.
           PERFORM WRITE-OUTPUT.

           MOVE 'Delete Subpool Requests . . . :' TO PP3-33.
           MOVE SMSDSR(10)                        TO PP37-49.
           MOVE SMSDSR(11)                        TO PP54-66.
           MOVE SMSDSR(12)                        TO PP71-83.
           PERFORM WRITE-OUTPUT.

           MOVE '0'        TO PRINT-CONTROL.
           MOVE 'Times no storage returned . . :' TO PP3-33.
           MOVE SMSCRISS(10)                      TO PP40-49.
           MOVE SMSCRISS(11)                      TO PP57-66.
           MOVE SMSCRISS(12)                      TO PP74-83.
           PERFORM WRITE-OUTPUT.

           MOVE 'Times request suspended . . . :' TO PP3-33.
           MOVE SMSUCSS(10)                       TO PP40-49.
           MOVE SMSUCSS(11)                       TO PP57-66.
           MOVE SMSUCSS(12)                       TO PP74-83.
           PERFORM WRITE-OUTPUT.

           MOVE 'Current requests suspended. . :' TO PP3-33.
           MOVE SMSCSS(10)                        TO PP40-49.
           MOVE SMSCSS(11)                        TO PP57-66.
           MOVE SMSCSS(12)                        TO PP74-83.
           PERFORM WRITE-OUTPUT.

           MOVE 'Peak requests suspended . . . :' TO PP3-33.
           MOVE SMSHWMSS(10)                      TO PP40-49.
           MOVE SMSHWMSS(11)                      TO PP57-66.
           MOVE SMSHWMSS(12)                      TO PP74-83.
           PERFORM WRITE-OUTPUT.

           MOVE 'Requests purged while waiting :' TO PP3-33.
           MOVE SMSPWWS(10)                       TO PP40-49.
           MOVE SMSPWWS(11)                       TO PP57-66.
           MOVE SMSPWWS(12)                       TO PP74-83.
           PERFORM WRITE-OUTPUT.

           MOVE '0'        TO PRINT-CONTROL.
           MOVE 'Times Cushion released. . . . :' TO PP3-33.
           MOVE SMSCREL(10)                       TO PP40-49.
           MOVE SMSCREL(11)                       TO PP57-66.
           MOVE SMSCREL(12)                       TO PP74-83.
           COMPUTE RESULT = (SMSCREL(10) + SMSCREL(11) +
                             SMSCREL(12)).
           MOVE RESULT                            TO PP91-100.
           PERFORM WRITE-OUTPUT.

           MOVE 'Times Short-On-Storage. . . . :' TO PP3-33.
           MOVE SMSSOS(10)                        TO PP40-49.
           MOVE SMSSOS(11)                        TO PP57-66.
           MOVE SMSSOS(12)                        TO PP74-83.
           COMPUTE RESULT = (SMSSOS(10) + SMSSOS(11) +
                             SMSSOS(12)).
           MOVE RESULT                            TO PP91-100.
           PERFORM WRITE-OUTPUT.

           MOVE 'Total time Short-On-Storage . :' TO PP3-33.
           MOVE SMSTSOS(10) TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP36-49.
           MOVE SMSTSOS(11) TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP53-66.
           MOVE SMSTSOS(12) TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP70-83.
           PERFORM WRITE-OUTPUT.

           MOVE 'Average Short-On-Storage time :' TO PP3-33.
           IF SMSSOS(10) > 0 THEN
               MOVE SMSTSOS(10) TO CLOCK-FIELD
               COMPUTE CLOCK-FIELD-S = (CLOCK-FIELD-S / SMSSOS(10))
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP36-49.
           IF SMSSOS(11) > 0 THEN
               MOVE SMSTSOS(11) TO CLOCK-FIELD
               COMPUTE CLOCK-FIELD-S = (CLOCK-FIELD-S / SMSSOS(11))
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP53-66.
           IF SMSSOS(12) > 0 THEN
               MOVE SMSTSOS(12) TO CLOCK-FIELD
               COMPUTE CLOCK-FIELD-S = (CLOCK-FIELD-S / SMSSOS(12))
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH  TO PP70-83.
           PERFORM WRITE-OUTPUT.

           MOVE '0'        TO PRINT-CONTROL.
           MOVE 'Storage Violations. . . . . . :' TO PP3-33.
           MOVE SMSSV(10)                         TO PP40-49.
           MOVE SMSSV(11)                         TO PP57-66.
           MOVE SMSSV(12)                         TO PP74-83.
           PERFORM WRITE-OUTPUT.

           MOVE '0'        TO PRINT-CONTROL.
           MOVE 'Access. . . . . . . . . . . . :' TO PP3-33.
           EVALUATE TRUE
               WHEN SMSCICS(10)
                   MOVE '    CICS' TO PP42-49
               WHEN SMSUSER(10)
                   MOVE '    USER' TO PP42-49
               WHEN SMSREADONLY(10)
                   MOVE 'READONLY' TO PP42-49
               WHEN SMSTRUSTED(10)
                   MOVE ' TRUSTED' TO PP42-49
           END-EVALUATE.
           EVALUATE TRUE
               WHEN SMSCICS(11)
                   MOVE '    CICS' TO PP59-66
               WHEN SMSUSER(11)
                   MOVE '    USER' TO PP59-66
               WHEN SMSREADONLY(11)
                   MOVE 'READONLY' TO PP59-66
               WHEN SMSTRUSTED(11)
                   MOVE ' TRUSTED' TO PP59-66
           END-EVALUATE.
           EVALUATE TRUE
               WHEN SMSCICS(12)
                   MOVE '    CICS' TO PP76-83
               WHEN SMSUSER(12)
                   MOVE '    USER' TO PP76-83
               WHEN SMSREADONLY(12)
                   MOVE 'READONLY' TO PP76-83
               WHEN SMSTRUSTED(12)
                   MOVE ' TRUSTED' TO PP76-83
           END-EVALUATE.
           PERFORM WRITE-OUTPUT.

           MOVE '0'        TO PRINT-CONTROL.
           MOVE '''*'' indicates values reset on last DSA Size change'
               TO PP3-52.
           PERFORM WRITE-OUTPUT.

       STORAGE-STATISTICS-EXIT.
           EXIT.
           EJECT
      *****************************************************************
      * CALCULATE MEMLIMIT                                            *
      *                                                               *
      *    REGION=0K/0M, the MEMLIMIT is set to NOLIMIT               *
      *                                                               *
      *    MEMLIMIT=NOLIMIT                                           *
      *        When MEMLIMIT=NOLIMIT is set to a special value of     *
      *        '00000FFFFFFFF000'X (decimal 17,592,186,040,320).      *
      *                                                               *
      *    MEMLIMIT=nnnnnM                                            *
      *    MEMLIMIT=nnnnnG                                            *
      *    MEMLIMIT=nnnnnT                                            *
      *    MEMLIMIT=nnnnnP                                            *
      *        Specifies a value from 0 to 99999, with a maximum      *
      *        value of 16384P, to be used as the limit on the total  *
      *        size of usable virtual storage above the bar in a      *
      *        single address space.                                  *
      *        This routine calculates the MEMLIMIT value from the    *
      *        number of xxxxbytes as each 99999 level is passed.     *
      *                                                               *
      *****************************************************************
       CALCULATE-MEMLIMIT SECTION.

      *    if MEMLIMIT > 99999 Megabytes, convert to Gigabytes.
           IF SMS-MEMLIMIT > 99999 THEN
               DIVIDE SMS-MEMLIMIT BY 1024
                   GIVING BIG-RESULT
               END-DIVIDE
      *        if MEMLIMIT > 99999 Gigabytes, convert to Terabytes.
               IF BIG-RESULT > 99999 THEN
                   DIVIDE BIG-RESULT BY 1024
                       GIVING BIG-RESULT
                   END-DIVIDE
      *            if MEMLIMIT > 99999 Terabytes, convert to Petabytes.
                   IF BIG-RESULT > 99999 THEN
                       DIVIDE BIG-RESULT BY 1024
                           GIVING BIG-RESULT
                       END-DIVIDE
                       MOVE BIG-RESULT TO MEMLIMIT-SIZE
                       MOVE 'P' TO MEMLIMIT-UNITS
      *            else MEMLIMIT is in Terabytes.
                   ELSE
                       MOVE BIG-RESULT TO MEMLIMIT-SIZE
                       MOVE 'T'        TO MEMLIMIT-UNITS
                   END-IF
      *        else MEMLIMIT is in Gigabytes.
               ELSE
                   MOVE BIG-RESULT TO MEMLIMIT-SIZE
                   MOVE 'G' TO MEMLIMIT-UNITS
               END-IF
      *    else MEMLIMIT is in Megabytes.
           ELSE
               MOVE SMS-MEMLIMIT TO MEMLIMIT-SIZE
               MOVE 'M'          TO MEMLIMIT-UNITS
           END-IF.

       CALCULATE-MEMLIMIT-EXIT.
           EXIT.
           EJECT
       STG-SUBPOOL-STATISTICS SECTION.

      *****************************************************************
      *** Get the Storage Manager DSA statistics and store the DSA  ***
      *** Limit values and sizes of the DSA's                       ***
      *****************************************************************
           EXEC CICS EXTRACT STATISTICS STORAGE
               SET(ADDRESS OF DFHSMSDS)
           END-EXEC.

           MOVE SMSDSALIMIT  TO DSA-LIMIT.
           MOVE SMSEDSALIMIT TO EDSA-LIMIT.

           MOVE SMSDSASZ(1)  TO CDSA-SIZE.
           MOVE SMSDSASZ(2)  TO UDSA-SIZE.
           MOVE SMSDSASZ(3)  TO SDSA-SIZE.
           MOVE SMSDSASZ(4)  TO RDSA-SIZE.
           MOVE SMSDSASZ(5)  TO ECDSA-SIZE.
           MOVE SMSDSASZ(6)  TO EUDSA-SIZE.
           MOVE SMSDSASZ(7)  TO ESDSA-SIZE.
           MOVE SMSDSASZ(8)  TO ERDSA-SIZE.
           MOVE SMSDSASZ(9)  TO ETDSA-SIZE.
           MOVE SMSDSASZ(10) TO GCDSA-SIZE.
           MOVE SMSDSASZ(11) TO GUDSA-SIZE.
           MOVE SMSDSASZ(12) TO GSDSA-SIZE.

      *****************************************************************
      *** Storage Manager - Domain Subpools                         ***
      *****************************************************************

           PERFORM PAGE-HEADINGS.
           MOVE PAGENO TO STG-DOMAIN-SUBPOOLS-PAGENO.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'Storage - Domain Subpools' TO PP1-25.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP1-25.
           PERFORM WRITE-OUTPUT.

      *****************************************************************
      ***  Browse the Storage Domain Subpools Statistics - Pass 1.  ***
      *****************************************************************
           EXEC CICS INQUIRE SUBPOOL START
           END-EXEC.

           EXEC CICS INQUIRE SUBPOOL(SUBPOOL-NAME) NEXT
               RESP(INQUIRE-RESP)
           END-EXEC.

           PERFORM WITH TEST BEFORE
               UNTIL INQUIRE-RESP = DFHRESP(END)

               IF LINE-COUNT > LINES-PER-PAGE THEN
                   PERFORM PAGE-HEADINGS
               END-IF

               IF SUB-HEADINGS = 'Y' THEN
                   PERFORM DOMAIN-SUBPOOL-HEADINGS-1
               END-IF

               EXEC CICS EXTRACT STATISTICS SUBPOOL
                   RESID(SUBPOOL-NAME)
                   SET(ADDRESS OF DFHSMDDS)
                   NOHANDLE
               END-EXEC

               PERFORM DOMAIN-SUBPOOL-STATS-1

               EXEC CICS INQUIRE SUBPOOL(SUBPOOL-NAME) NEXT
                   RESP(INQUIRE-RESP)
               END-EXEC

           END-PERFORM.

           EXEC CICS INQUIRE SUBPOOL END
           END-EXEC.

      *****************************************************************
      ***  Browse the Storage Domain Subpools Statistics - Pass 2.  ***
      *****************************************************************

           PERFORM PAGE-HEADINGS.

           MOVE '-'     TO PRINT-CONTROL.
           MOVE 'Storage - Domain Subpools' TO PP1-25.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP1-25.
           PERFORM WRITE-OUTPUT.

           EXEC CICS INQUIRE SUBPOOL START
           END-EXEC.

           EXEC CICS INQUIRE SUBPOOL(SUBPOOL-NAME) NEXT
               RESP(INQUIRE-RESP)
           END-EXEC.

           PERFORM WITH TEST BEFORE
               UNTIL INQUIRE-RESP = DFHRESP(END)

               IF LINE-COUNT > LINES-PER-PAGE THEN
                   PERFORM PAGE-HEADINGS
               END-IF

               IF SUB-HEADINGS = 'Y' THEN
                   PERFORM DOMAIN-SUBPOOL-HEADINGS-2
               END-IF

               EXEC CICS EXTRACT STATISTICS SUBPOOL
                   RESID(SUBPOOL-NAME)
                   SET(ADDRESS OF DFHSMDDS)
                   NOHANDLE
               END-EXEC

               PERFORM DOMAIN-SUBPOOL-STATS-2

               EXEC CICS INQUIRE SUBPOOL(SUBPOOL-NAME) NEXT
                   RESP(INQUIRE-RESP)
               END-EXEC

           END-PERFORM.

           EXEC CICS INQUIRE SUBPOOL END
           END-EXEC.

      *****************************************************************
      *** Storage Manager - Domain Subpool Totals                   ***
      *****************************************************************

           PERFORM PAGE-HEADINGS.

           MOVE '-'     TO PRINT-CONTROL.
           MOVE 'Storage - Domain Subpool Totals' TO PP1-31.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP1-31.
           PERFORM WRITE-OUTPUT.

      *****************************************************************
      *** Storage Manager - DSA Domain Subpool Totals               ***
      *****************************************************************
           MOVE 1 TO SUB1.
           PERFORM WITH TEST BEFORE
               UNTIL SUB1 > 3

               EVALUATE SUB1
                   WHEN(1)
                       PERFORM SUBPOOL-TOTALS-HEADINGS-1
                   WHEN OTHER
                       CONTINUE
               END-EVALUATE

               EVALUATE SUB1
                   WHEN(1)
                       MOVE 'CDSA    '    TO PP3-10
                   WHEN(2)
                       MOVE 'SDSA    '    TO PP3-10
                   WHEN(3)
                       MOVE 'RDSA    '    TO PP3-10
                   WHEN OTHER
                       CONTINUE
               END-EVALUATE

               MOVE DOMAIN-SUBPOOLS(SUB1)            TO PP13-22
               MOVE DOMAIN-SUBPOOL-GETMAINS(SUB1)    TO PP25-37
               MOVE DOMAIN-SUBPOOL-FREEMAINS(SUB1)   TO PP40-52
               MOVE DOMAIN-SUBPOOL-ELEMENTS(SUB1)    TO PP55-64
               MOVE DOMAIN-SUBPOOL-ELEMENT-STG(SUB1) TO PP67-79
               COMPUTE RESULT = (DOMAIN-SUBPOOL-PAGE-STG(SUB1) / 1024)
               END-COMPUTE
               MOVE RESULT TO PP82-91
               MOVE 'K'    TO PP92
               MOVE 0 TO PERCENTAGE PERCENTAGE-WORK

               EVALUATE SUB1
                   WHEN(1)
                      IF CDSA-SIZE > 0 THEN
                         COMPUTE PERCENTAGE-WORK ROUNDED =
                           (DOMAIN-SUBPOOL-PAGE-STG(SUB1) / CDSA-SIZE)
                         END-COMPUTE
                      END-IF
                   WHEN(2)
                      IF SDSA-SIZE > 0 THEN
                         COMPUTE PERCENTAGE-WORK ROUNDED =
                           (DOMAIN-SUBPOOL-PAGE-STG(SUB1) / SDSA-SIZE)
                         END-COMPUTE
                      END-IF
                   WHEN(3)
                      IF RDSA-SIZE > 0 THEN
                         COMPUTE PERCENTAGE-WORK ROUNDED =
                           (DOMAIN-SUBPOOL-PAGE-STG(SUB1) / RDSA-SIZE)
                         END-COMPUTE
                      END-IF
                   WHEN OTHER
                      CONTINUE
               END-EVALUATE
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
               END-COMPUTE
               MOVE PERCENTAGE TO PP95-100
               MOVE '%'        TO PP101
               MOVE 0 TO PERCENTAGE PERCENTAGE-WORK
               EVALUATE SUB1
                   WHEN(1)
                      COMPUTE PERCENTAGE-WORK ROUNDED =
                        (DOMAIN-SUBPOOL-PAGE-STG(SUB1) / DSA-LIMIT)
                      END-COMPUTE
                   WHEN(2)
                      COMPUTE PERCENTAGE-WORK ROUNDED =
                        (DOMAIN-SUBPOOL-PAGE-STG(SUB1) / DSA-LIMIT)
                      END-COMPUTE
                   WHEN(3)
                      COMPUTE PERCENTAGE-WORK ROUNDED =
                        (DOMAIN-SUBPOOL-PAGE-STG(SUB1) / DSA-LIMIT)
                       END-COMPUTE
                   WHEN OTHER
                      CONTINUE
               END-EVALUATE
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
               END-COMPUTE
               MOVE PERCENTAGE TO PP105-110
               MOVE '%'        TO PP111

               PERFORM WRITE-OUTPUT
               ADD 1 TO SUB1

           END-PERFORM.

      *****************************************************************
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP3-37
                           PP38-72
                           PP73-102.
           MOVE '__________                    ' TO PP103-132.
           PERFORM WRITE-OUTPUT.
           MOVE 'Totals' TO PP3-8.
           COMPUTE RESULT = (DOMAIN-SUBPOOLS(1) +
                             DOMAIN-SUBPOOLS(2) +
                             DOMAIN-SUBPOOLS(3))
           END-COMPUTE.
           MOVE RESULT TO PP13-22.
           COMPUTE BIG-RESULT = (DOMAIN-SUBPOOL-GETMAINS(1) +
                                 DOMAIN-SUBPOOL-GETMAINS(2) +
                                 DOMAIN-SUBPOOL-GETMAINS(3))
           END-COMPUTE.
           MOVE BIG-RESULT TO PP25-37.
           COMPUTE BIG-RESULT = (DOMAIN-SUBPOOL-FREEMAINS(1) +
                                 DOMAIN-SUBPOOL-FREEMAINS(2) +
                                 DOMAIN-SUBPOOL-FREEMAINS(3))
           END-COMPUTE.
           MOVE BIG-RESULT TO PP40-52.
           COMPUTE RESULT = (DOMAIN-SUBPOOL-ELEMENTS(1) +
                             DOMAIN-SUBPOOL-ELEMENTS(2) +
                             DOMAIN-SUBPOOL-ELEMENTS(3))
           END-COMPUTE.
           MOVE RESULT TO PP55-64.
           COMPUTE RESULT = ((DOMAIN-SUBPOOL-PAGE-STG(1) / 1024) +
                             (DOMAIN-SUBPOOL-PAGE-STG(2) / 1024) +
                             (DOMAIN-SUBPOOL-PAGE-STG(3) / 1024))
           END-COMPUTE.
           MOVE RESULT TO PP82-91.
           MOVE 'K'    TO PP92.
           MOVE 0      TO PERCENTAGE PERCENTAGE-WORK.
           COMPUTE PERCENTAGE-WORK ROUNDED =
                       ((DOMAIN-SUBPOOL-PAGE-STG(1) +
                         DOMAIN-SUBPOOL-PAGE-STG(2) +
                         DOMAIN-SUBPOOL-PAGE-STG(3)) / DSA-LIMIT)
           END-COMPUTE.
           COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           END-COMPUTE.
           MOVE PERCENTAGE TO PP105-110.
           MOVE '%'        TO PP111.
           PERFORM WRITE-OUTPUT.
           MOVE '-'        TO PRINT-CONTROL.

      *****************************************************************
      *** Storage Manager - EDSA Domain Subpool Totals              ***
      *****************************************************************
           MOVE 4 TO SUB1.
           PERFORM WITH TEST BEFORE
               UNTIL SUB1 > 7

               EVALUATE SUB1
                   WHEN(4)
                       PERFORM SUBPOOL-TOTALS-HEADINGS-1
                   WHEN OTHER
                       CONTINUE
               END-EVALUATE

               EVALUATE SUB1
                   WHEN(4)
                       MOVE 'ECDSA   '    TO PP3-10
                   WHEN(5)
                       MOVE 'ESDSA   '    TO PP3-10
                   WHEN(6)
                       MOVE 'ERDSA   '    TO PP3-10
                   WHEN(7)
                       MOVE 'ETDSA   '    TO PP3-10
                   WHEN OTHER
                       CONTINUE
               END-EVALUATE

               MOVE DOMAIN-SUBPOOLS(SUB1)            TO PP13-22
               MOVE DOMAIN-SUBPOOL-GETMAINS(SUB1)    TO PP25-37
               MOVE DOMAIN-SUBPOOL-FREEMAINS(SUB1)   TO PP40-52
               MOVE DOMAIN-SUBPOOL-ELEMENTS(SUB1)    TO PP55-64
               MOVE DOMAIN-SUBPOOL-ELEMENT-STG(SUB1) TO PP67-79
               COMPUTE RESULT = (DOMAIN-SUBPOOL-PAGE-STG(SUB1) / 1024)
               END-COMPUTE
               MOVE RESULT TO PP82-91
               MOVE 'K'    TO PP92
               MOVE 0 TO PERCENTAGE PERCENTAGE-WORK

               EVALUATE SUB1
                   WHEN(4)
                      IF ECDSA-SIZE > 0 THEN
                         COMPUTE PERCENTAGE-WORK ROUNDED =
                           (DOMAIN-SUBPOOL-PAGE-STG(SUB1) / ECDSA-SIZE)
                         END-COMPUTE
                      END-IF
                   WHEN(5)
                      IF ESDSA-SIZE > 0 THEN
                         COMPUTE PERCENTAGE-WORK ROUNDED =
                           (DOMAIN-SUBPOOL-PAGE-STG(SUB1) / ESDSA-SIZE)
                         END-COMPUTE
                      END-IF
                   WHEN(6)
                      IF ERDSA-SIZE > 0 THEN
                         COMPUTE PERCENTAGE-WORK ROUNDED =
                           (DOMAIN-SUBPOOL-PAGE-STG(SUB1) / ERDSA-SIZE)
                         END-COMPUTE
                      END-IF
                   WHEN(7)
                      IF ETDSA-SIZE > 0 THEN
                         COMPUTE PERCENTAGE-WORK ROUNDED =
                           (DOMAIN-SUBPOOL-PAGE-STG(SUB1) / ETDSA-SIZE)
                         END-COMPUTE
                      END-IF
                   WHEN OTHER
                      CONTINUE
               END-EVALUATE
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
               END-COMPUTE
               MOVE PERCENTAGE TO PP95-100
               MOVE '%'        TO PP101
               MOVE 0 TO PERCENTAGE PERCENTAGE-WORK
               EVALUATE SUB1
                   WHEN(4)
                      COMPUTE PERCENTAGE-WORK ROUNDED =
                        (DOMAIN-SUBPOOL-PAGE-STG(SUB1) / EDSA-LIMIT)
                      END-COMPUTE
                   WHEN(5)
                      COMPUTE PERCENTAGE-WORK ROUNDED =
                        (DOMAIN-SUBPOOL-PAGE-STG(SUB1) / EDSA-LIMIT)
                      END-COMPUTE
                   WHEN(6)
                      COMPUTE PERCENTAGE-WORK ROUNDED =
                        (DOMAIN-SUBPOOL-PAGE-STG(SUB1) / EDSA-LIMIT)
                      END-COMPUTE
                   WHEN(7)
                      COMPUTE PERCENTAGE-WORK ROUNDED =
                        (DOMAIN-SUBPOOL-PAGE-STG(SUB1) / EDSA-LIMIT)
                      END-COMPUTE
                   WHEN OTHER
                      CONTINUE
               END-EVALUATE
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
               END-COMPUTE
               MOVE PERCENTAGE TO PP105-110
               MOVE '%'        TO PP111

               PERFORM WRITE-OUTPUT
               ADD 1 TO SUB1

           END-PERFORM.

      *****************************************************************
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP3-37
                           PP38-72
                           PP73-102.
           MOVE '__________                    ' TO PP103-132.
           PERFORM WRITE-OUTPUT.
           MOVE 'Totals' TO PP3-8.
           COMPUTE RESULT = (DOMAIN-SUBPOOLS(4) +
                             DOMAIN-SUBPOOLS(5) +
                             DOMAIN-SUBPOOLS(6) +
                             DOMAIN-SUBPOOLS(7))
           END-COMPUTE.
           MOVE RESULT TO PP13-22.
           COMPUTE BIG-RESULT = (DOMAIN-SUBPOOL-GETMAINS(4) +
                                 DOMAIN-SUBPOOL-GETMAINS(5) +
                                 DOMAIN-SUBPOOL-GETMAINS(6) +
                                 DOMAIN-SUBPOOL-GETMAINS(7))
           END-COMPUTE.
           MOVE BIG-RESULT TO PP25-37.
           COMPUTE BIG-RESULT = (DOMAIN-SUBPOOL-FREEMAINS(4) +
                                 DOMAIN-SUBPOOL-FREEMAINS(5) +
                                 DOMAIN-SUBPOOL-FREEMAINS(6) +
                                 DOMAIN-SUBPOOL-FREEMAINS(7))
           END-COMPUTE.
           MOVE BIG-RESULT TO PP40-52.
           COMPUTE RESULT = (DOMAIN-SUBPOOL-ELEMENTS(4) +
                             DOMAIN-SUBPOOL-ELEMENTS(5) +
                             DOMAIN-SUBPOOL-ELEMENTS(6) +
                             DOMAIN-SUBPOOL-ELEMENTS(7))
           END-COMPUTE.
           MOVE RESULT TO PP55-64.
           COMPUTE RESULT = ((DOMAIN-SUBPOOL-PAGE-STG(4) / 1024) +
                             (DOMAIN-SUBPOOL-PAGE-STG(5) / 1024) +
                             (DOMAIN-SUBPOOL-PAGE-STG(6) / 1024) +
                             (DOMAIN-SUBPOOL-PAGE-STG(7) / 1024))
           END-COMPUTE.
           MOVE RESULT TO PP82-91.
           MOVE 'K'    TO PP92.
           MOVE 0      TO PERCENTAGE PERCENTAGE-WORK.
           COMPUTE PERCENTAGE-WORK ROUNDED =
                       ((DOMAIN-SUBPOOL-PAGE-STG(4) +
                         DOMAIN-SUBPOOL-PAGE-STG(5) +
                         DOMAIN-SUBPOOL-PAGE-STG(6) +
                         DOMAIN-SUBPOOL-PAGE-STG(7)) / EDSA-LIMIT)
           END-COMPUTE.
           COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           END-COMPUTE.
           MOVE PERCENTAGE TO PP105-110.
           MOVE '%'        TO PP111.
           PERFORM WRITE-OUTPUT.
           MOVE '-'        TO PRINT-CONTROL.

      *****************************************************************
      *** Storage Manager - GDSA Domain Subpool Totals              ***
      *****************************************************************
           MOVE 8 TO SUB1.
           PERFORM WITH TEST BEFORE
               UNTIL SUB1 > 9

               EVALUATE SUB1
                   WHEN(8)
                       PERFORM SUBPOOL-TOTALS-HEADINGS-2
                   WHEN OTHER
                       CONTINUE
               END-EVALUATE

               EVALUATE SUB1
                   WHEN(8)
                       MOVE 'GCDSA   '    TO PP3-10
                   WHEN(9)
                       MOVE 'GSDSA   '    TO PP3-10
                   WHEN OTHER
                       CONTINUE
               END-EVALUATE

               MOVE DOMAIN-SUBPOOLS(SUB1)            TO PP13-22
               MOVE DOMAIN-SUBPOOL-GETMAINS(SUB1)    TO PP25-37
               MOVE DOMAIN-SUBPOOL-FREEMAINS(SUB1)   TO PP40-52
               MOVE DOMAIN-SUBPOOL-ELEMENTS(SUB1)    TO PP55-64
               MOVE DOMAIN-SUBPOOL-ELEMENT-STG(SUB1) TO PP67-79
               MOVE DOMAIN-SUBPOOL-PAGE-STG(SUB1)    TO PP82-91
               MOVE 'M'                              TO PP92

               MOVE 0      TO PERCENTAGE PERCENTAGE-WORK
               EVALUATE SUB1
                   WHEN(8)
                      IF GCDSA-SIZE > 0 THEN
                         COMPUTE PERCENTAGE-WORK ROUNDED =
                           (DOMAIN-SUBPOOL-PAGE-STG(SUB1) / GCDSA-SIZE)
                         END-COMPUTE
                      END-IF
                   WHEN(9)
                      IF GSDSA-SIZE > 0 THEN
                         COMPUTE PERCENTAGE-WORK ROUNDED =
                           (DOMAIN-SUBPOOL-PAGE-STG(SUB1) / GSDSA-SIZE)
                         END-COMPUTE
                      END-IF
                   WHEN OTHER
                      CONTINUE
               END-EVALUATE
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
               END-COMPUTE
               MOVE PERCENTAGE TO PP95-100
               MOVE '%'        TO PP101

               PERFORM WRITE-OUTPUT

               ADD 1 TO SUB1

           END-PERFORM.

      *****************************************************************
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP3-37
                           PP38-72
                           PP73-102.
           PERFORM WRITE-OUTPUT.
           MOVE 'Totals' TO PP3-8.
           COMPUTE RESULT = (DOMAIN-SUBPOOLS(8) +
                             DOMAIN-SUBPOOLS(9))
           END-COMPUTE.
           MOVE RESULT TO PP13-22.
           COMPUTE BIG-RESULT = (DOMAIN-SUBPOOL-GETMAINS(8) +
                                 DOMAIN-SUBPOOL-GETMAINS(9))
           END-COMPUTE.
           MOVE BIG-RESULT TO PP25-37.
           COMPUTE BIG-RESULT = (DOMAIN-SUBPOOL-FREEMAINS(8) +
                                 DOMAIN-SUBPOOL-FREEMAINS(9))
           END-COMPUTE.
           MOVE BIG-RESULT TO PP40-52.
           COMPUTE RESULT = (DOMAIN-SUBPOOL-ELEMENTS(8) +
                             DOMAIN-SUBPOOL-ELEMENTS(9))
           END-COMPUTE.
           MOVE RESULT TO PP55-64.
           COMPUTE RESULT = (DOMAIN-SUBPOOL-PAGE-STG(8) +
                             DOMAIN-SUBPOOL-PAGE-STG(9))
           END-COMPUTE.
           MOVE RESULT TO PP82-91.
           MOVE 'M'    TO PP92.
           PERFORM WRITE-OUTPUT.

      *****************************************************************
      *** Storage Manager - Task Subpools                           ***
      *****************************************************************

           PERFORM PAGE-HEADINGS.
           MOVE PAGENO TO STG-TASK-SUBPOOLS-PAGENO.

           MOVE '-'     TO PRINT-CONTROL.
           MOVE 'Storage - Task Subpools' TO PP1-23.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP1-23.
           PERFORM WRITE-OUTPUT.

           PERFORM TASK-SUBPOOL-HEADINGS.

      *****************************************************************
      *** Collect the Storage Manager Task Subpool statistics.      ***
      *****************************************************************
           EXEC CICS EXTRACT STATISTICS TASKSUBPOOL
               SET(ADDRESS OF DFHSMTDS)
           END-EXEC.

           MOVE 1 TO SUB1.

           PERFORM WITH TEST BEFORE
               UNTIL SUB1 > SMTNTASK

                   IF SUB1 = 3 OR SUB1 = 5 THEN
                       MOVE '0'          TO PRINT-CONTROL
                   END-IF
                   MOVE SMTDSANAME(SUB1) TO PP3-10
                   EVALUATE TRUE
                       WHEN SMTCICS(SUB1)
                           MOVE 'CICS'   TO PP14-17
                       WHEN SMTUSER(SUB1)
                           MOVE 'USER'   TO PP14-17
                       WHEN OTHER
                           CONTINUE
                   END-EVALUATE
                   MOVE SMTGMREQ(SUB1)   TO PP21-33
                   MOVE SMTFMREQ(SUB1)   TO PP36-48
                   MOVE SMTCNE(SUB1)     TO PP51-60
                   MOVE SMTCES(SUB1)     TO PP63-75
                   IF SMTCNE(SUB1) > 0 THEN
                       COMPUTE RESULT = (SMTCES(SUB1) / SMTCNE(SUB1))
                       END-COMPUTE
                   ELSE
                       MOVE 0 TO RESULT
                   END-IF
                   MOVE RESULT           TO PP79-88
                   IF SMTABOVEBAR(SUB1) THEN
                       MOVE SMTCPS(SUB1) TO PP92-101
                   ELSE
                       COMPUTE RESULT = (SMTCPS(SUB1) / 1024)
                       END-COMPUTE
                       MOVE RESULT       TO PP92-101
                   END-IF

                   MOVE 0 TO PERCENTAGE PERCENTAGE-WORK
                   EVALUATE SMTDSANAME(SUB1)
                       WHEN 'CDSA    '
                           IF CDSA-SIZE > 0 THEN
                               COMPUTE PERCENTAGE-WORK ROUNDED =
                                           (SMTCPS(SUB1) / CDSA-SIZE)
                               END-COMPUTE
                           END-IF
                      WHEN 'UDSA    '
                           IF UDSA-SIZE > 0 THEN
                               COMPUTE PERCENTAGE-WORK ROUNDED =
                                           (SMTCPS(SUB1) / UDSA-SIZE)
                               END-COMPUTE
                           END-IF
                      WHEN 'ECDSA   '
                           IF ECDSA-SIZE > 0 THEN
                               COMPUTE PERCENTAGE-WORK ROUNDED =
                                           (SMTCPS(SUB1) / ECDSA-SIZE)
                               END-COMPUTE
                           END-IF
                      WHEN 'EUDSA   '
                           IF EUDSA-SIZE > 0 THEN
                               COMPUTE PERCENTAGE-WORK ROUNDED =
                                           (SMTCPS(SUB1) / EUDSA-SIZE)
                               END-COMPUTE
                           END-IF
                      WHEN 'GCDSA   '
                           IF GCDSA-SIZE > 0 THEN
                               COMPUTE PERCENTAGE-WORK ROUNDED =
                                           (SMTCPS(SUB1) / GCDSA-SIZE)
                               END-COMPUTE
                           END-IF
                      WHEN 'GUDSA   '
                           IF GUDSA-SIZE > 0 THEN
                                COMPUTE PERCENTAGE-WORK ROUNDED =
                                           (SMTCPS(SUB1) / GUDSA-SIZE)
                               END-COMPUTE
                           END-IF
                      WHEN OTHER
                          CONTINUE
                   END-EVALUATE
                   COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
                   END-COMPUTE
                   MOVE PERCENTAGE TO PP105-110
                   MOVE '%'        TO PP111
                   IF SMTABOVEBAR(SUB1) THEN
                       MOVE SMTHWMPS(SUB1) TO PP114-123
                   ELSE
                       COMPUTE RESULT = (SMTHWMPS(SUB1) / 1024)
                       END-COMPUTE
                       MOVE RESULT   TO PP114-123
                   END-IF
                   EVALUATE TRUE
                       WHEN SMTBELOW(SUB1)
                           MOVE 'K'  TO PP102 PP124
                       WHEN SMTABOVE(SUB1)
                           MOVE 'K'  TO PP102 PP124
                       WHEN SMTABOVEBAR(SUB1)
                           MOVE 'M'  TO PP102 PP124
                       WHEN OTHER
                           CONTINUE
                   END-EVALUATE
                   PERFORM WRITE-OUTPUT

                   ADD 1 TO SUB1
           END-PERFORM.

       STG-SUBPOOL-STATISTICS-EXIT.
           EXIT.
           EJECT
       DOMAIN-SUBPOOL-STATS-1 SECTION.

           MOVE SMDSPN             TO PP3-10.
           MOVE SMDDSANAME         TO PP13-20.
           EVALUATE TRUE
               WHEN SMDCICS
                   MOVE 'CICS    ' TO PP23-30
               WHEN SMDUSER
                   MOVE 'USER    ' TO PP23-30
               WHEN SMDREADONLY
                   MOVE 'READONLY' TO PP23-30
               WHEN SMDTRUSTED
                   MOVE 'TRUSTED ' TO PP23-30
               WHEN OTHER
                   CONTINUE
           END-EVALUATE.
           EVALUATE TRUE
               WHEN SMDFIXED
                   MOVE 'FIXED   ' TO PP33-40
               WHEN SMDVARIABLE
                   MOVE 'VARIABLE' TO PP33-40
               WHEN OTHER
                   CONTINUE
           END-EVALUATE.
           MOVE SMDFLEN            TO PP43-52.
           COMPUTE RESULT = (SMDIFREE / 1024)
           END-COMPUTE.
           MOVE RESULT             TO PP55-64.
           MOVE 'K'                TO PP65.
           MOVE SMDCELEM           TO PP68-77.
           MOVE SMDCES             TO PP80-92.
           IF SMDABOVEBAR THEN
               MOVE SMDCPS TO PP95-104
           ELSE
               COMPUTE RESULT = (SMDCPS / 1024)
               END-COMPUTE
               MOVE RESULT TO PP95-104
           END-IF.
           MOVE 0                  TO PERCENTAGE.
           EVALUATE SMDDSANAME
               WHEN 'CDSA    '
                   IF CDSA-SIZE > 0 THEN
                       COMPUTE PERCENTAGE-WORK ROUNDED =
                                   (SMDCPS / CDSA-SIZE)
                       END-COMPUTE
                   END-IF
               WHEN 'SDSA    '
                   IF SDSA-SIZE > 0 THEN
                       COMPUTE PERCENTAGE-WORK ROUNDED =
                                   (SMDCPS / SDSA-SIZE)
                       END-COMPUTE
                   END-IF
               WHEN 'RDSA    '
                   IF RDSA-SIZE > 0 THEN
                       COMPUTE PERCENTAGE-WORK ROUNDED =
                                   (SMDCPS / RDSA-SIZE)
                       END-COMPUTE
                   END-IF
               WHEN 'ECDSA   '
                   IF ECDSA-SIZE > 0 THEN
                       COMPUTE PERCENTAGE-WORK ROUNDED =
                                   (SMDCPS / ECDSA-SIZE)
                       END-COMPUTE
                   END-IF
               WHEN 'ESDSA   '
                   IF ESDSA-SIZE > 0 THEN
                       COMPUTE PERCENTAGE-WORK ROUNDED =
                                   (SMDCPS / ESDSA-SIZE)
                       END-COMPUTE
                   END-IF
               WHEN 'ERDSA   '
                   IF ERDSA-SIZE > 0 THEN
                       COMPUTE PERCENTAGE-WORK ROUNDED =
                                   (SMDCPS / ERDSA-SIZE)
                       END-COMPUTE
                   END-IF
               WHEN 'ETDSA   '
                   IF ETDSA-SIZE > 0 THEN
                       COMPUTE PERCENTAGE-WORK ROUNDED =
                                   (SMDCPS / ETDSA-SIZE)
                       END-COMPUTE
                   END-IF
               WHEN 'GCDSA   '
                   IF GCDSA-SIZE > 0 THEN
                       COMPUTE PERCENTAGE-WORK ROUNDED =
                                   (SMDCPS / GCDSA-SIZE)
                       END-COMPUTE
                   END-IF
               WHEN 'GSDSA   '
                   IF GSDSA-SIZE > 0 THEN
                       COMPUTE PERCENTAGE-WORK ROUNDED =
                                   (SMDCPS / GSDSA-SIZE)
                       END-COMPUTE
                   END-IF
               WHEN OTHER
                   CONTINUE
           END-EVALUATE.
           COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           END-COMPUTE.
           MOVE PERCENTAGE TO PP108-113N.
           MOVE '%'        TO PP114.
           IF SMDABOVEBAR THEN
               MOVE SMDHWMPS TO PP117-126
           ELSE
               COMPUTE RESULT = (SMDHWMPS / 1024)
               END-COMPUTE
               MOVE RESULT   TO PP117-126
           END-IF.
           EVALUATE TRUE
               WHEN SMDBELOW
                   MOVE 'K' TO PP105 PP127
               WHEN SMDABOVE
                   MOVE 'K' TO PP105 PP127
               WHEN SMDABOVEBAR
                   MOVE 'M' TO PP105 PP127
               WHEN OTHER
                   CONTINUE
           END-EVALUATE.
           PERFORM WRITE-OUTPUT.

       DOMAIN-SUBPOOL-STATS-1-EXIT.
           EXIT.

       DOMAIN-SUBPOOL-STATS-2 SECTION.

           MOVE SMDSPN     TO PP3-10.
           MOVE SMDDSANAME TO PP13-20.
           MOVE SMDGMREQ   TO PP23-35.
           MOVE SMDFMREQ   TO PP38-50.
           MOVE SMDCELEM   TO PP53-62.
           MOVE SMDCES     TO PP65-77.
           IF SMDABOVEBAR THEN
               MOVE SMDCPS   TO PP80-89
               MOVE SMDHWMPS TO PP93-102
           ELSE
               COMPUTE RESULT = (SMDCPS / 1024)
               END-COMPUTE
               MOVE RESULT TO PP80-89
               COMPUTE RESULT = (SMDHWMPS / 1024)
               END-COMPUTE
               MOVE RESULT TO PP93-102
           END-IF.
           EVALUATE TRUE
               WHEN SMDBELOW
                   MOVE 'K' TO PP90 PP103
               WHEN SMDABOVE
                   MOVE 'K' TO PP90 PP103
               WHEN SMDABOVEBAR
                   MOVE 'M' TO PP90 PP103
               WHEN OTHER
                   CONTINUE
           END-EVALUATE.
           PERFORM WRITE-OUTPUT.

      *
      *** Maintain the Domain Subpool Totals                        ***
      *
           EVALUATE TRUE
               WHEN SMDCDSA
                   MOVE 1 TO SUB2
                   PERFORM UPDATE-SUBPOOL-STATS
               WHEN SMDSDSA
                   MOVE 2 TO SUB2
                   PERFORM UPDATE-SUBPOOL-STATS
               WHEN SMDRDSA
                   MOVE 3 TO SUB2
                   PERFORM UPDATE-SUBPOOL-STATS
               WHEN SMDECDSA
                   MOVE 4 TO SUB2
                   PERFORM UPDATE-SUBPOOL-STATS
               WHEN SMDESDSA
                   MOVE 5 TO SUB2
                   PERFORM UPDATE-SUBPOOL-STATS
               WHEN SMDERDSA
                   MOVE 6 TO SUB2
                   PERFORM UPDATE-SUBPOOL-STATS
               WHEN SMDETDSA
                   MOVE 7 TO SUB2
                   PERFORM UPDATE-SUBPOOL-STATS
               WHEN SMDGCDSA
                   MOVE 8 TO SUB2
                   PERFORM UPDATE-SUBPOOL-STATS
               WHEN SMDGSDSA
                   MOVE 9 TO SUB2
                   PERFORM UPDATE-SUBPOOL-STATS
               WHEN OTHER
                   CONTINUE
           END-EVALUATE.

       DOMAIN-SUBPOOL-STATS-2-EXIT.
           EXIT.

       UPDATE-SUBPOOL-STATS SECTION.

           ADD 1 TO DOMAIN-SUBPOOLS(SUB2).
           ADD SMDGMREQ TO DOMAIN-SUBPOOL-GETMAINS(SUB2).
           ADD SMDFMREQ TO DOMAIN-SUBPOOL-FREEMAINS(SUB2).
           ADD SMDCELEM TO DOMAIN-SUBPOOL-ELEMENTS(SUB2).
           ADD SMDCES   TO DOMAIN-SUBPOOL-ELEMENT-STG(SUB2).
           ADD SMDCPS   TO DOMAIN-SUBPOOL-PAGE-STG(SUB2).

       UPDATE-SUBPOOL-STATS-EXIT.
           EXIT.
           EJECT
       DOMAIN-SUBPOOL-HEADINGS-1 SECTION.

           MOVE '0' TO PRINT-CONTROL.
           PERFORM WRITE-OUTPUT.

           MOVE 'Subpool                       Eleme' TO PP3-37.
           MOVE 'nt     Element      Initial    Curr' TO PP38-72.
           MOVE 'ent       Current       Curren'      TO PP73-102.
           MOVE 't     % of       Peak         '      TO PP103-132.
           PERFORM WRITE-OUTPUT.
           MOVE '  Name    Location  Access     Type' TO PP3-37.
           MOVE '       Length         Free     Elem' TO PP38-72.
           MOVE 'ents    Element Stg    Page St'      TO PP73-102.
           MOVE 'g      DSA     Page Stg       '      TO PP103-132.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP3-37
                           PP38-72
                           PP73-102.
           MOVE '_________________________     '      TO PP103-132.
           PERFORM WRITE-OUTPUT.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'N'     TO SUB-HEADINGS.

       DOMAIN-SUBPOOL-HEADINGS-1-EXIT.
           EXIT.

       DOMAIN-SUBPOOL-HEADINGS-2 SECTION.

           MOVE '0' TO PRINT-CONTROL.
           PERFORM WRITE-OUTPUT.

           MOVE 'Subpool                Getmain     ' TO PP3-37.
           MOVE '   Freemain     Current       Curre' TO PP38-72.
           MOVE 'nt       Current       Peak   '      TO PP73-102.
           PERFORM WRITE-OUTPUT.
           MOVE '  Name    Location     Requests    ' TO PP3-37.
           MOVE '   Requests     Elements    Element' TO PP38-72.
           MOVE ' Stg    Page Stg     Page Stg '      TO PP73-102.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP3-37
                           PP38-72
                           PP73-102.
           PERFORM WRITE-OUTPUT.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'N'     TO SUB-HEADINGS.

       DOMAIN-SUBPOOL-HEADINGS-2-EXIT.
           EXIT.
           EJECT
       SUBPOOL-TOTALS-HEADINGS-1 SECTION.

           MOVE '0' TO PRINT-CONTROL.
           PERFORM WRITE-OUTPUT.

           MOVE '           Number of     Getmain   ' TO PP3-37.
           MOVE '    Freemain      Current       Cur' TO PP38-72.
           MOVE 'rent       Current     % of   '      TO PP73-102.
           MOVE '   % of                       '      TO PP103-132.
           PERFORM WRITE-OUTPUT.
           MOVE 'DSA Name   Subpools      Requests  ' TO PP3-37.
           MOVE '    Requests      Elements    Eleme' TO PP38-72.
           MOVE 'nt Stg    Page Stg      DSA   '      TO PP73-102.
           MOVE ' DSA Limit                    '      TO PP103-132.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP3-37
                           PP38-72
                           PP73-102.
           MOVE '__________                    '      TO PP103-132.
           PERFORM WRITE-OUTPUT.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'N'     TO SUB-HEADINGS.

       SUBPOOL-TOTALS-HEADINGS-1-EXIT.
           EXIT.

       SUBPOOL-TOTALS-HEADINGS-2 SECTION.

           MOVE '0' TO PRINT-CONTROL.
           PERFORM WRITE-OUTPUT.

           MOVE '           Number of     Getmain   ' TO PP3-37.
           MOVE '    Freemain      Current       Cur' TO PP38-72.
           MOVE 'rent       Current     % of   '      TO PP73-102.
           MOVE '                              '      TO PP103-132.
           PERFORM WRITE-OUTPUT.
           MOVE 'DSA Name   Subpools      Requests  ' TO PP3-37.
           MOVE '    Requests      Elements    Eleme' TO PP38-72.
           MOVE 'nt Stg    Page Stg      DSA   '      TO PP73-102.
           MOVE '                              '      TO PP103-132.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP3-37
                           PP38-72
                           PP73-102.
           MOVE '                              ' TO PP103-132.
           PERFORM WRITE-OUTPUT.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'N'     TO SUB-HEADINGS.

       SUBPOOL-TOTALS-HEADINGS-2-EXIT.
           EXIT.
           EJECT
       TASK-SUBPOOL-HEADINGS SECTION.

           MOVE '0' TO PRINT-CONTROL.
           PERFORM WRITE-OUTPUT.

           MOVE 'Subpool              Getmain       ' TO PP3-37.
           MOVE ' Freemain     Current       Current' TO PP38-72.
           MOVE '       Average       Current  '      TO PP73-102.
           MOVE '   % of       Peak            '      TO PP103-132.
           PERFORM WRITE-OUTPUT.
           MOVE '  Name    Access     Requests      ' TO PP3-37.
           MOVE ' Requests     Elements    Element S' TO PP38-72.
           MOVE 'tg   Element Size   Page Stg  '      TO PP73-102.
           MOVE '    DSA     Page Stg          '      TO PP103-132.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP3-37
                           PP38-72
                           PP73-102.
           MOVE '______________________        '      TO PP103-132.
           PERFORM WRITE-OUTPUT.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'N'     TO SUB-HEADINGS.

       TASK-SUBPOOL-HEADINGS-EXIT.
           EXIT.
           EJECT
      *****************************************************************
      *** LOADER-STATISTICS SECTION                                 ***
      ***                                                           ***
      ***   Collect the Loader Global statistics                    ***
      ***   Print heading and Loader statistics                     ***
      ***                                                           ***
      *****************************************************************
       LOADER-STATISTICS SECTION.

           PERFORM PAGE-HEADINGS.
           MOVE PAGENO TO LOADER-PAGENO.

      *****************************************************************
      *** Collect the Loader Global statistics.                     ***
      *****************************************************************
           EXEC CICS EXTRACT STATISTICS PROGRAM
               SET(ADDRESS OF DFHLDGDS)
           END-EXEC.

      *****************************************************************
      ***   Print heading and Loader statistics                     ***
      ***       calculating fields as required                      ***
      *****************************************************************
           MOVE '-'      TO PRINT-CONTROL.
           MOVE 'Loader' TO PP1-6.
           PERFORM WRITE-OUTPUT.
           MOVE '+'      TO PRINT-CONTROL.
           MOVE '______' TO PP1-6.
           PERFORM WRITE-OUTPUT.

           MOVE '0'       TO PRINT-CONTROL.
           MOVE 'LIBRARY Load requests. . . . . . . . . . . . . :'
                          TO PP3-50.
           MOVE LDGLLR    TO PP54-66.
           MOVE 'LIBRARY Load Rate per second . . . . . . . . . :'
                          TO PP69-116.
           IF ELAPSED-SECONDS > 0 THEN
               COMPUTE PROGRAM-LOAD-RATE = (LDGLLR / ELAPSED-SECONDS)
               END-COMPUTE
           ELSE
               MOVE LDGLLR TO PROGRAM-LOAD-RATE
           END-IF.
           MOVE PROGRAM-LOAD-RATE TO PP124-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Total LIBRARY Load time. . . . . . . . . . . . :'
                          TO PP3-50.
           MOVE LDGLLT    TO CLOCK-FIELD-S.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH TO PP53-66.
           PERFORM WRITE-OUTPUT.

           MOVE 'Average LIBRARY Load time. . . . . . . . . . . :'
                          TO PP3-50.
           IF LDGLLR > 0 THEN
               COMPUTE CLOCK-FIELD-S = (LDGLLT / LDGLLR)
           ELSE
               MOVE 0     TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH TO PP53-66.
           MOVE 'Total Program Uses . . . . . . . . . . . . . . :'
                          TO PP69-116.
           MOVE LDGPUSES  TO PP120-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Program Use to Load Ratio. . . . . . . . . . . :'
                          TO PP69-116.
           IF LDGLLR > 0 THEN
               COMPUTE PROGRAM-USE-LOAD-RATIO = (LDGPUSES / LDGLLR)
           ELSE
               MOVE LDGPUSES TO PROGRAM-USE-LOAD-RATIO
           END-IF.
           MOVE PROGRAM-USE-LOAD-RATIO TO PP121-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'LIBRARY Load requests on the RO TCB. . . . . . :'
                          TO PP3-50.
           MOVE LDGLLRRO  TO PP54-66.
           PERFORM WRITE-OUTPUT.

           MOVE 'Total LIBRARY Load time on the RO TCB. . . . . :'
                          TO PP3-50.
           MOVE LDGLLTRO  TO CLOCK-FIELD-S.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH TO PP53-66.
           PERFORM WRITE-OUTPUT.

           MOVE 'Average LIBRARY Load time on the RO TCB. . . . :'
                          TO PP3-50.
           IF LDGLLRRO > 0 THEN
               COMPUTE CLOCK-FIELD-S = (LDGLLTRO / LDGLLRRO)
           ELSE
               MOVE 0     TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH TO PP53-66.
           PERFORM WRITE-OUTPUT.

           PERFORM WRITE-OUTPUT.

           MOVE 'LIBRARY Load requests that waited. . . . . . . :'
                          TO PP3-50.
           MOVE LDGWTDLR  TO PP57-66.
           PERFORM WRITE-OUTPUT.

           MOVE 'Total LIBRARY Load request wait time . . . . . :'
                          TO PP3-50.
           MOVE LDGTTW    TO CLOCK-FIELD-S.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH TO PP53-66.
           MOVE 'Times LIBRARY secondary extents detected . . . :'
                          TO PP69-116.
           MOVE LDGDREBS  TO PP123-132N.
           PERFORM WRITE-OUTPUT.

           MOVE 'Average LIBRARY Load request wait time . . . . :'
                          TO PP3-50.
           IF LDGWTDLR > 0 THEN
               COMPUTE CLOCK-FIELD-S = (LDGTTW / LDGWTDLR)
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH TO PP53-66.
           PERFORM WRITE-OUTPUT.

           MOVE 'Current Waiting LIBRARY Load requests. . . . . :'
                          TO PP3-50.
           MOVE LDGWLR    TO PP57-66.
           PERFORM WRITE-OUTPUT.

           MOVE 'Peak Waiting LIBRARY Load requests . . . . . . :'
                          TO PP3-50.
           MOVE LDGWLRHW  TO PP57-66.
           PERFORM WRITE-OUTPUT.

           MOVE 'Times at Peak. . . . . . . . . . . . . . . . . :'
                          TO PP3-50.
           MOVE LDGHWMT   TO PP57-66.
           MOVE 'Average Not-In-Use program size. . . . . . . . :'
                          TO PP69-116.
           COMPUTE WORK-FIELD = (LDGPROGNIU(1) + LDGPROGNIU(2) +
                                 LDGPROGNIU(3) + LDGPROGNIU(4) +
                                 LDGPROGNIU(5) + LDGPROGNIU(6))
           END-COMPUTE.
           IF WORK-FIELD > 0 THEN
               COMPUTE RESULT = (((LDGSTGNIU(1) + LDGSTGNIU(2) +
                       LDGSTGNIU(3) + LDGSTGNIU(4) + LDGSTGNIU(5) +
                       LDGSTGNIU(6)) / 1024) / WORK-FIELD)
           ELSE
               MOVE 0 TO RESULT
           END-IF.
           MOVE RESULT    TO PP122-131.
           MOVE 'K'       TO PP132.
           PERFORM WRITE-OUTPUT.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'LIBRARY search order updates . . . . . . . . . :'
                          TO PP3-50.
           MOVE LDGLBSOU  TO PP57-66.
           MOVE 'Load requests waited - search order update . . :'
                          TO PP69-116.
           MOVE LDGLWSOU  TO PP120-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Total LIBRARY search order update time . . . . :'
                          TO PP3-50.
           MOVE LDGLSORT  TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH TO PP53-66.
           PERFORM WRITE-OUTPUT.

           MOVE 'Average LIBRARY search order update time . . . :'
                          TO PP3-50.
           MOVE LDGLSORT  TO STCK-WORK-A.
           IF LDGLBSOU > 0 THEN
               MOVE STCK-WORK-NUM-A TO RESULT-WORK
               COMPUTE STCK-WORK-NUM-A = (RESULT-WORK / LDGLBSOU)
           END-IF.
           MOVE STCK-WORK-A TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH    TO PP53-66.
           PERFORM WRITE-OUTPUT.
           EJECT
      *****************************************************************
      ***   Print the Loader DSA statistics.                        ***
      *****************************************************************

           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'CDSA'  TO PP3-6.
           MOVE 'ECDSA' TO PP69-73.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP3-6
                           PP69-73.
           PERFORM WRITE-OUTPUT.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'Programs Removed by compression. . . . . . . . :'
                            TO PP3-50.
           MOVE LDGDPSCR(1) TO PP57-66.
           MOVE 'Programs Removed by compression. . . . . . . . :'
                            TO PP69-116.
           MOVE LDGDPSCR(2) TO PP123-132N.
           PERFORM WRITE-OUTPUT.

           MOVE 'Time on the Not-In-Use Queue . . . . . . . . . :'
                            TO PP3-50.
           MOVE LDGDPSCT(1) TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH   TO PP53-66.
           MOVE 'Time on the Not-In-Use Queue . . . . . . . . . :'
                            TO PP69-116.
           MOVE LDGDPSCT(2) TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH   TO PP119-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Average Time on the Not-In-Use Queue . . . . . :'
                          TO PP3-50.
           IF LDGDPSCR(1) > 0 THEN
               MOVE LDGDPSCT(1) TO CLOCK-WORK-FIELD
               DIVIDE CLOCK-WORK-FIELD-S BY LDGDPSCR(1)
                               GIVING CLOCK-FIELD-S
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH TO PP53-66.
           MOVE 'Average Time on the Not-In-Use Queue . . . . . :'
                          TO PP69-116.
           IF LDGDPSCR(2) > 0 THEN
               MOVE LDGDPSCT(2) TO CLOCK-WORK-FIELD
               DIVIDE CLOCK-WORK-FIELD-S BY LDGDPSCR(2)
                               GIVING CLOCK-FIELD-S
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH TO PP119-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Programs Reclaimed from the Not-In-Use Queue . :'
                             TO PP3-50.
           MOVE LDGRECNIU(1) TO PP54-66.
           MOVE 'Programs Reclaimed from the Not-In-Use Queue . :'
                             TO PP69-116.
           MOVE LDGRECNIU(2) TO PP120-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Programs Loaded - now on the Not-In-Use Queue. :'
                              TO PP3-50.
           MOVE LDGPROGNIU(1) TO PP54-66.
           MOVE 'Programs Loaded - now on the Not-In-Use Queue. :'
                              TO PP69-116.
           MOVE LDGPROGNIU(2) TO PP120-132.
           PERFORM WRITE-OUTPUT.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'SDSA'  TO PP3-6.
           MOVE 'ESDSA' TO PP69-73.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP3-6
                           PP69-73.
           PERFORM WRITE-OUTPUT.

           MOVE '0' TO PRINT-CONTROL.
           MOVE 'Programs Removed by compression. . . . . . . . :'
                            TO PP3-50.
           MOVE LDGDPSCR(3) TO PP57-66.
           MOVE 'Programs Removed by compression. . . . . . . . :'
                            TO PP69-116.
           MOVE LDGDPSCR(4) TO PP123-132N.
           PERFORM WRITE-OUTPUT.

           MOVE 'Time on the Not-In-Use Queue . . . . . . . . . :'
                            TO PP3-50.
           MOVE LDGDPSCT(3) TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH   TO PP53-66.
           MOVE 'Time on the Not-In-Use Queue . . . . . . . . . :'
                            TO PP69-116.
           MOVE LDGDPSCT(4) TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH   TO PP119-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Average Time on the Not-In-Use Queue . . . . . :'
                          TO PP3-50.
           IF LDGDPSCR(3) > 0 THEN
               MOVE LDGDPSCT(3) TO CLOCK-WORK-FIELD
               DIVIDE CLOCK-WORK-FIELD-S BY LDGDPSCR(3)
                               GIVING CLOCK-FIELD-S
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH TO PP53-66.
           MOVE 'Average Time on the Not-In-Use Queue . . . . . :'
                          TO PP69-116.
           IF LDGDPSCR(4) > 0 THEN
               MOVE LDGDPSCT(4) TO CLOCK-WORK-FIELD
               DIVIDE CLOCK-WORK-FIELD-S BY LDGDPSCR(4)
                               GIVING CLOCK-FIELD-S
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH TO PP119-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Programs Reclaimed from the Not-In-Use Queue . :'
                             TO PP3-50.
           MOVE LDGRECNIU(3) TO PP54-66.
           MOVE 'Programs Reclaimed from the Not-In-Use Queue . :'
                             TO PP69-116.
           MOVE LDGRECNIU(4) TO PP120-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Programs Loaded - now on the Not-In-Use Queue. :'
                              TO PP3-50.
           MOVE LDGPROGNIU(3) TO PP54-66.
           MOVE 'Programs Loaded - now on the Not-In-Use Queue. :'
                              TO PP69-116.
           MOVE LDGPROGNIU(4) TO PP120-132.
           PERFORM WRITE-OUTPUT.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'RDSA'  TO PP3-6.
           MOVE 'ERDSA' TO PP69-73.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP3-6
                           PP69-73.
           PERFORM WRITE-OUTPUT.

           MOVE '0' TO PRINT-CONTROL.
           MOVE 'Programs Removed by compression. . . . . . . . :'
                            TO PP3-50.
           MOVE LDGDPSCR(5) TO PP57-66.
           MOVE 'Programs Removed by compression. . . . . . . . :'
                            TO PP69-116.
           MOVE LDGDPSCR(6) TO PP123-132N.
           PERFORM WRITE-OUTPUT.

           MOVE 'Time on the Not-In-Use Queue . . . . . . . . . :'
                            TO PP3-50.
           MOVE LDGDPSCT(5) TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH   TO PP53-66.
           MOVE 'Time on the Not-In-Use Queue . . . . . . . . . :'
                            TO PP69-116.
           MOVE LDGDPSCT(6) TO CLOCK-FIELD.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH   TO PP119-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Average Time on the Not-In-Use Queue . . . . . :'
                          TO PP3-50.
           IF LDGDPSCR(5) > 0 THEN
               MOVE LDGDPSCT(5) TO CLOCK-WORK-FIELD
               DIVIDE CLOCK-WORK-FIELD-S BY LDGDPSCR(5)
                               GIVING CLOCK-FIELD-S
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH TO PP53-66.
           MOVE 'Average Time on the Not-In-Use Queue . . . . . :'
                          TO PP69-116.
           IF LDGDPSCR(6) > 0 THEN
               MOVE LDGDPSCT(6) TO CLOCK-WORK-FIELD
               DIVIDE CLOCK-WORK-FIELD-S BY LDGDPSCR(6)
                               GIVING CLOCK-FIELD-S
           ELSE
               MOVE 0 TO CLOCK-FIELD-S
           END-IF.
           PERFORM STOPWATCH-CONVERT.
           MOVE STOPWATCH TO PP119-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Programs Reclaimed from the Not-In-Use Queue . :'
                             TO PP3-50.
           MOVE LDGRECNIU(5) TO PP54-66.
           MOVE 'Programs Reclaimed from the Not-In-Use Queue . :'
                             TO PP69-116.
           MOVE LDGRECNIU(6) TO PP120-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Programs Loaded - now on the Not-In-Use Queue. :'
                              TO PP3-50.
           MOVE LDGPROGNIU(5) TO PP54-66.
           MOVE 'Programs Loaded - now on the Not-In-Use Queue. :'
                              TO PP69-116.
           MOVE LDGPROGNIU(6) TO PP120-132.
           PERFORM WRITE-OUTPUT.
           EJECT
      *****************************************************************
      ***  Print heading and Program Storage Subpools               ***
      *****************************************************************
           MOVE PAGENO TO PROGRAM-STORAGE-PAGENO.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'Program Storage' TO PP1-15.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP1-15.
           PERFORM WRITE-OUTPUT.

           MOVE '0'       TO PRINT-CONTROL.
           MOVE 'Nucleus Program Storage (CDSA) . . . . . . . . :'
                          TO PP3-50.
           COMPUTE RESULT = ((LD-NRS + LD-NUC) / 1024).
           MOVE RESULT    TO PP55-64.
           MOVE 'K'       TO PP65.
           MOVE 'Nucleus Program Storage (ECDSA). . . . . . . . :'
                          TO PP69-116.
           COMPUTE RESULT = ((LD-ENRS + LD-ENUC) / 1024).
           MOVE RESULT    TO PP122-131.
           MOVE 'K'       TO PP132.
           PERFORM WRITE-OUTPUT.

           MOVE '0' TO PRINT-CONTROL.
           MOVE 'Program Storage (SDSA) . . . . . . . . . . . . :'
                          TO PP3-50.
           COMPUTE RESULT = (LD-PGM / 1024).
           MOVE RESULT    TO PP55-64.
           MOVE 'K'       TO PP65.
           MOVE 'Program Storage (ESDSA). . . . . . . . . . . . :'
                          TO PP69-116.
           COMPUTE RESULT = (LD-EPGM / 1024).
           MOVE RESULT    TO PP122-131.
           MOVE 'K'       TO PP132.
           PERFORM WRITE-OUTPUT.
           MOVE 'Resident Program Storage (SDSA). . . . . . . . :'
                          TO PP3-50.
           COMPUTE RESULT = (LD-RES / 1024).
           MOVE RESULT    TO PP55-64.
           MOVE 'K'       TO PP65.
           MOVE 'Resident Program Storage (ESDSA) . . . . . . . :'
                          TO PP69-116.
           COMPUTE RESULT = (LD-ERES / 1024).
           MOVE RESULT    TO PP122-131.
           MOVE 'K'       TO PP132.
           PERFORM WRITE-OUTPUT.

           MOVE '0' TO PRINT-CONTROL.
           MOVE 'Read-Only Nucleus Program Storage (RDSA) . . . :'
                          TO PP3-50.
           COMPUTE RESULT = ((LD-NRSRO + LD-NUCRO) / 1024).
           MOVE RESULT    TO PP55-64.
           MOVE 'K'       TO PP65.
           MOVE 'Read-Only Nucleus Program Storage (ERDSA). . . :'
                          TO PP69-116.
           COMPUTE RESULT = ((LD-ENRSRO + LD-ENUCRO) / 1024).
           MOVE RESULT    TO PP122-131.
           MOVE 'K'       TO PP132.
           PERFORM WRITE-OUTPUT.
           MOVE 'Read-Only Program Storage (RDSA) . . . . . . . :'
                          TO PP3-50.
           COMPUTE RESULT = (LD-PGMRO / 1024).
           MOVE RESULT    TO PP55-64.
           MOVE 'K'       TO PP65.
           MOVE 'Read-Only Program Storage (ERDSA). . . . . . . :'
                          TO PP69-116.
           COMPUTE RESULT = (LD-EPGMRO / 1024).
           MOVE RESULT    TO PP122-131.
           MOVE 'K'       TO PP132.
           PERFORM WRITE-OUTPUT.
           MOVE 'Read-Only Resident Program Storage (RDSA). . . :'
                          TO PP3-50.
           COMPUTE RESULT = (LD-RESRO / 1024).
           MOVE RESULT    TO PP55-64.
           MOVE 'K'       TO PP65.
           MOVE 'Read-Only Resident Program Storage (ERDSA) . . :'
                          TO PP69-116.
           COMPUTE RESULT = (LD-ERESRO / 1024).
           MOVE RESULT    TO PP122-131.
           MOVE 'K'       TO PP132
           PERFORM WRITE-OUTPUT.

           MOVE '0' TO PRINT-CONTROL.
           MOVE 'CDSA used by Not-In-Use programs. :' TO PP3-37.
           COMPUTE RESULT ROUNDED = (LDGSTGNIU(1) / 1024).
           MOVE RESULT      TO PP39-48N.
           MOVE 'K'         TO PP49.
           IF CDSA-SIZE > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                           (LDGSTGNIU(1) / CDSA-SIZE)
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE   TO PP51-56.
           MOVE '% of CDSA ' TO PP57-66X.
           MOVE 'ECDSA used by Not-In-Use programs :' TO PP69-103.
           COMPUTE RESULT ROUNDED = (LDGSTGNIU(2) / 1024).
           MOVE RESULT      TO PP105-114.
           MOVE 'K'         TO PP115.
           IF ECDSA-SIZE > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                           (LDGSTGNIU(2) / ECDSA-SIZE)
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE   TO PP117-122.
           MOVE '% of ECDSA' TO PP123-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'SDSA used by Not-In-Use programs. :' TO PP3-37.
           COMPUTE RESULT ROUNDED = (LDGSTGNIU(3) / 1024).
           MOVE RESULT      TO PP39-48N.
           MOVE 'K'         TO PP49.
           IF SDSA-SIZE > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                           (LDGSTGNIU(3) / SDSA-SIZE)
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE   TO PP51-56.
           MOVE '% of SDSA ' TO PP57-66X.
           MOVE 'ESDSA used by Not-In-Use programs :' TO PP69-103.
           COMPUTE RESULT ROUNDED = (LDGSTGNIU(4) / 1024).
           MOVE RESULT      TO PP105-114.
           MOVE 'K'         TO PP115.
           IF ESDSA-SIZE > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                           (LDGSTGNIU(4) / ESDSA-SIZE)
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE   TO PP117-122.
           MOVE '% of ESDSA' TO PP123-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'RDSA used by Not-In-Use programs. :' TO PP3-37.
           COMPUTE RESULT ROUNDED = (LDGSTGNIU(5) / 1024).
           MOVE RESULT      TO PP39-48N.
           MOVE 'K'         TO PP49.
           IF RDSA-SIZE > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                           (LDGSTGNIU(5) / RDSA-SIZE)
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE   TO PP51-56.
           MOVE '% of RDSA ' TO PP57-66X.
           MOVE 'ERDSA used by Not-In-Use programs :' TO PP69-103.
           COMPUTE RESULT ROUNDED = (LDGSTGNIU(6) / 1024).
           MOVE RESULT      TO PP105-114.
           MOVE 'K'         TO PP115.
           IF ERDSA-SIZE > 0 THEN
               COMPUTE PERCENTAGE-WORK ROUNDED =
                           (LDGSTGNIU(6) / ERDSA-SIZE)
               COMPUTE PERCENTAGE = (PERCENTAGE-WORK * 100)
           ELSE
               MOVE 0 TO PERCENTAGE
           END-IF.
           MOVE PERCENTAGE   TO PP117-122.
           MOVE '% of ERDSA' TO PP123-132.
           PERFORM WRITE-OUTPUT.
           EJECT
      *****************************************************************
      *** Loader Domain - Program Subpools                          ***
      *****************************************************************

           PERFORM PAGE-HEADINGS.
           MOVE PAGENO TO STG-PROGRAM-SUBPOOLS-PAGENO.

           MOVE '-'     TO PRINT-CONTROL.
           MOVE 'Storage - Program Subpools' TO PP1-26.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP1-26.
           PERFORM WRITE-OUTPUT.

           MOVE '0' TO PRINT-CONTROL.
           MOVE 'Subpool   Subpool     Current      ' TO PP3-37.
           MOVE ' Peak                              ' TO PP38-72.
           PERFORM WRITE-OUTPUT.
           MOVE '  Name    Location    Storage      ' TO PP3-37.
           MOVE 'Storage                            ' TO PP38-72.
           PERFORM WRITE-OUTPUT.
           MOVE '+' TO PRINT-CONTROL.
           MOVE ALL '_' TO PP3-37.
           MOVE '_________                          ' TO PP38-72.
           PERFORM WRITE-OUTPUT.

           MOVE '0' TO PRINT-CONTROL.
           MOVE 1 TO SUB1.
           PERFORM WITH TEST BEFORE
               UNTIL SUB1 > 16

                   IF SM-SUBPOOL-NAME(SUB1) = 'LDENRS  '
                       MOVE '0' TO PRINT-CONTROL
                   END-IF
                   MOVE SM-SUBPOOL-NAME(SUB1)    TO PP3-10
                   MOVE SM-SUBPOOL-DSANAME(SUB1) TO PP13-20
                   COMPUTE RESULT = (SM-SUBPOOL-STG(SUB1) / 1024)
                   END-COMPUTE
                   MOVE RESULT TO PP23-32
                   MOVE 'K'    TO PP33
                   COMPUTE RESULT = (SM-SUBPOOL-STG-HWM(SUB1) / 1024)
                   END-COMPUTE
                   MOVE RESULT TO PP36-45
                   MOVE 'K'    TO PP46
                   PERFORM WRITE-OUTPUT

                   ADD 1 TO SUB1
           END-PERFORM.

       LOADER-STATISTICS-EXIT.
           EXIT.
           EJECT
      *****************************************************************
      *** LIBRARY-STATISTICS SECTION                                ***
      ***                                                           ***
      ***   Print heading and LIBRARY statistics                    ***
      ***                                                           ***
      *****************************************************************
       LIBRARY-STATISTICS SECTION.

           PERFORM PAGE-HEADINGS.
           MOVE PAGENO TO LIBRARY-PAGENO.

      *****************************************************************
      ***   Print heading and LIBRARY statistics                    ***
      *****************************************************************
           MOVE '-'       TO PRINT-CONTROL.
           MOVE 'LIBRARYs' TO PP1-8.
           PERFORM WRITE-OUTPUT.
           MOVE '+'       TO PRINT-CONTROL.
           MOVE '________' TO PP1-8.
           PERFORM WRITE-OUTPUT.

           EXEC CICS INQUIRE LIBRARY START
           END-EXEC.

           EXEC CICS INQUIRE LIBRARY(LIBRARY-NAME) NEXT
               CRITICALST(LIBRARY-CRITICAL)
               ENABLESTATUS(LIBRARY-ENABLE-STATUS)
               NUMDSNAMES(LIBRARY-NUMBER-OF-DSNAMES)
               RANKING(LIBRARY-RANKING)
               SEARCHPOS(LIBRARY-SEARCH-POSITION)
               RESP(INQUIRE-RESP)
           END-EXEC.

           PERFORM WITH TEST BEFORE
               UNTIL INQUIRE-RESP = DFHRESP(END)

               IF LINE-COUNT > (LINES-PER-PAGE - 4) THEN
                   PERFORM PAGE-HEADINGS
               END-IF

               IF SUB-HEADINGS = 'Y' THEN
                   PERFORM LIBRARY-SUB-HEADINGS-1
               END-IF

               EXEC CICS EXTRACT STATISTICS LIBRARY
                   RESID(LIBRARY-NAME)
                   SET(ADDRESS OF DFHLDBDS)
                   RESP(COLLECT-RESP)
               END-EXEC

               EVALUATE COLLECT-RESP
                   WHEN DFHRESP(NORMAL)
                       PERFORM PRINT-LIBRARY-STATISTICS
                   WHEN OTHER
                       CONTINUE
               END-EVALUATE

               EXEC CICS INQUIRE LIBRARY(LIBRARY-NAME) NEXT
                   CRITICALST(LIBRARY-CRITICAL)
                   ENABLESTATUS(LIBRARY-ENABLE-STATUS)
                   NUMDSNAMES(LIBRARY-NUMBER-OF-DSNAMES)
                   RANKING(LIBRARY-RANKING)
                   SEARCHPOS(LIBRARY-SEARCH-POSITION)
                   RESP(INQUIRE-RESP)
               END-EXEC

           END-PERFORM.

           EXEC CICS INQUIRE LIBRARY END
           END-EXEC.

      *****************************************************************
           PERFORM PAGE-HEADINGS.
           MOVE PAGENO TO LIBRARY-DSNAME-PAGENO.

      *****************************************************************
      ***   Print heading and LIBRARY Dataset Concatenation.        ***
      *****************************************************************
           MOVE '-'     TO PRINT-CONTROL.
           MOVE 'LIBRARY Dataset Concatenation' TO PP1-29.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP1-29.
           PERFORM WRITE-OUTPUT.

           MOVE 0 TO CONCAT-NUMBER.

           EXEC CICS INQUIRE LIBRARY START
           END-EXEC.

           EXEC CICS INQUIRE LIBRARY(LIBRARY-NAME) NEXT
               CRITICALST(LIBRARY-CRITICAL)
               ENABLESTATUS(LIBRARY-ENABLE-STATUS)
               NUMDSNAMES(LIBRARY-NUMBER-OF-DSNAMES)
               RANKING(LIBRARY-RANKING)
               SEARCHPOS(LIBRARY-SEARCH-POSITION)
               RESP(INQUIRE-RESP)
           END-EXEC.

           PERFORM WITH TEST BEFORE
               UNTIL INQUIRE-RESP = DFHRESP(END)

               IF LINE-COUNT > (LINES-PER-PAGE - 4) THEN
                   PERFORM PAGE-HEADINGS
               END-IF

               IF SUB-HEADINGS = 'Y' THEN
                   PERFORM LIBRARY-SUB-HEADINGS-2
               END-IF

               EXEC CICS EXTRACT STATISTICS LIBRARY
                   RESID(LIBRARY-NAME)
                   SET(ADDRESS OF DFHLDBDS)
                   RESP(COLLECT-RESP)
               END-EXEC

               IF COLLECT-RESP = DFHRESP(NORMAL) AND
                 LIBRARY-ENABLE-STATUS = DFHVALUE(ENABLED) THEN
                   PERFORM PRINT-LIBRARY-DSNAMES
               END-IF

               EXEC CICS INQUIRE LIBRARY(LIBRARY-NAME) NEXT
                   CRITICALST(LIBRARY-CRITICAL)
                   ENABLESTATUS(LIBRARY-ENABLE-STATUS)
                   NUMDSNAMES(LIBRARY-NUMBER-OF-DSNAMES)
                   RANKING(LIBRARY-RANKING)
                   SEARCHPOS(LIBRARY-SEARCH-POSITION)
                   RESP(INQUIRE-RESP)
               END-EXEC

           END-PERFORM.

           EXEC CICS INQUIRE LIBRARY END
           END-EXEC.

       LIBRARY-STATISTICS-EXIT.
           EXIT.
           EJECT
      *****************************************************************
       PRINT-LIBRARY-STATISTICS SECTION.

           MOVE '0' TO PRINT-CONTROL.
           MOVE LIBRARY-NAME            TO PP3-10.
           MOVE LIBRARY-SEARCH-POSITION TO PP15-18.
           MOVE LIBRARY-RANKING         TO PP24-25.

           EVALUATE LIBRARY-CRITICAL
               WHEN DFHVALUE(NONCRITICAL)
                   MOVE 'No '           TO PP32-34
               WHEN DFHVALUE(CRITICAL)
                   MOVE 'Yes'           TO PP32-34
               WHEN OTHER
                   CONTINUE
           END-EVALUATE.

           EVALUATE LIBRARY-ENABLE-STATUS
               WHEN DFHVALUE(ENABLED)
                   MOVE 'Enabled   '    TO PP39-48
               WHEN DFHVALUE(ENABLING)
                   MOVE 'Enabling  '    TO PP39-48
               WHEN DFHVALUE(DISABLING)
                   MOVE 'Disabling '    TO PP39-48
               WHEN DFHVALUE(DISABLED)
                   MOVE 'Disabled  '    TO PP39-48
               WHEN DFHVALUE(DISCARDING)
                   MOVE 'Discarding'    TO PP39-48
               WHEN OTHER
                   CONTINUE
           END-EVALUATE.

           MOVE LDB-LIBRARY-PROG-LOADS  TO PP51-60.
           MOVE LDB-LIBRARY-NUM-DSNAMES TO PP65-67N.

           IF LIBRARY-NAME = 'DFHRPL  ' THEN
               MOVE LIBRARY-NUMBER-OF-DSNAMES TO SUB2
           ELSE
               MOVE 16  TO SUB2
           END-IF.

           MOVE '0' TO PRINT-CONTROL.
           MOVE 1   TO SUB1.
           MOVE 0   TO SUB3.
           PERFORM WITH TEST BEFORE
               UNTIL SUB1 > SUB2

                   IF LDB-LIBRARY-DSNAME(SUB1) NOT = LOW-VALUES THEN
                       MOVE SUB3                     TO PP74-76
                       ADD  1                        TO SUB3
                       MOVE LDB-LIBRARY-DSNAME(SUB1) TO PP81-124
                       IF LIBRARY-NAME NOT = 'DFHRPL  ' THEN
                          MOVE SUB1                  TO PP129-130
                       END-IF
                       PERFORM WRITE-OUTPUT
                   END-IF

                   ADD 1 TO SUB1
           END-PERFORM.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE ALL '-' TO PP1-132.
           PERFORM WRITE-OUTPUT.

       PRINT-LIBRARY-STATISTICS-EXIT.
           EXIT.
           EJECT
      *****************************************************************
       PRINT-LIBRARY-DSNAMES SECTION.

           MOVE LIBRARY-NAME            TO PP66-73.
           MOVE LIBRARY-RANKING         TO PP79-80.

           EVALUATE LIBRARY-CRITICAL
               WHEN DFHVALUE(NONCRITICAL)
                   MOVE 'No '           TO PP88-90
               WHEN DFHVALUE(CRITICAL)
                   MOVE 'Yes'           TO PP88-90
               WHEN OTHER
                   CONTINUE
           END-EVALUATE.

           IF LIBRARY-NAME = 'DFHRPL  ' THEN
               MOVE LIBRARY-NUMBER-OF-DSNAMES TO SUB2
           ELSE
               MOVE 16  TO SUB2
           END-IF.

           MOVE 1   TO SUB1.
           PERFORM WITH TEST BEFORE
               UNTIL SUB1 > SUB2

                   IF LDB-LIBRARY-DSNAME(SUB1) NOT = LOW-VALUES THEN
                       MOVE CONCAT-NUMBER            TO PP4-7
                       ADD  1                        TO CONCAT-NUMBER
                       MOVE LDB-LIBRARY-DSNAME(SUB1) TO PP12-55
                       IF LIBRARY-NAME NOT = 'DFHRPL  ' THEN
                           MOVE SUB1                 TO PP60-61
                       END-IF
                       PERFORM WRITE-OUTPUT
                   END-IF

                   ADD 1 TO SUB1
           END-PERFORM.

           MOVE ALL '-' TO PP3-9.
           PERFORM WRITE-OUTPUT.

       PRINT-LIBRARY-DSNAMES-EXIT.
           EXIT.
           EJECT
      *****************************************************************
       LIBRARY-SUB-HEADINGS-1 SECTION.

           MOVE '0' TO PRINT-CONTROL.
           MOVE 'LIBRARY    Search   Rank           ' TO PP3-37.
           MOVE '   Enable      Program   Number   C' TO PP38-72.
           MOVE 'oncat-                     '      TO PP73-102.
           MOVE '                        Dsname'      TO PP103-132.
           PERFORM WRITE-OUTPUT.
           MOVE '  Name    Position  -ing  Critical ' TO PP3-37.
           MOVE '   Status       Loads    Dsnames  e' TO PP38-72.
           MOVE 'nation  Dataset Name          '      TO PP73-102.
           MOVE '                        Number'      TO PP103-132.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP3-37
                           PP38-72
                           PP73-102
                           PP103-132.
           PERFORM WRITE-OUTPUT.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'N'     TO SUB-HEADINGS.

       LIBRARY-SUB-HEADINGS-1-EXIT.
           EXIT.

       LIBRARY-SUB-HEADINGS-2 SECTION.

           MOVE '0' TO PRINT-CONTROL.
           MOVE 'Concat-                            ' TO PP3-37.
           MOVE '                    Dsname  LIBRARY' TO PP38-72.
           MOVE '                              '      TO PP73-102.
           MOVE '                              '      TO PP103-132.
           PERFORM WRITE-OUTPUT.
           MOVE 'enation  Dataset Name              ' TO PP3-37.
           MOVE '                    Number    Name ' TO PP38-72.
           MOVE '   Ranking  Critical          '      TO PP73-102.
           MOVE '                              '      TO PP103-132.
           PERFORM WRITE-OUTPUT.
           MOVE '+'     TO PRINT-CONTROL.
           MOVE ALL '_' TO PP3-37
                           PP38-72.
           MOVE '____________________          '      TO PP73-102.
           MOVE '                              '      TO PP103-132.
           PERFORM WRITE-OUTPUT.

           MOVE '0'     TO PRINT-CONTROL.
           MOVE 'N'     TO SUB-HEADINGS.

       LIBRARY-SUB-HEADINGS-2-EXIT.
           EXIT.
           EJECT
      *****************************************************************
      *** TOTALS-INITIALISE                                         ***
      *****************************************************************
       TOTALS-INITIALISE SECTION.

           MOVE 1 TO SUB1.

           PERFORM WITH TEST BEFORE
               UNTIL SUB1 > 9

               MOVE 0 TO DOMAIN-SUBPOOLS(SUB1)
                         DOMAIN-SUBPOOL-GETMAINS(SUB1)
                         DOMAIN-SUBPOOL-FREEMAINS(SUB1)
                         DOMAIN-SUBPOOL-ELEMENTS(SUB1)
                         DOMAIN-SUBPOOL-ELEMENT-STG(SUB1)
                         DOMAIN-SUBPOOL-PAGE-STG(SUB1)

               ADD 1 TO SUB1

           END-PERFORM.

       TOTALS-INITIALISE-EXIT.
           EXIT.
           EJECT
      *****************************************************************
      *** PAGE-HEADINGS                                             ***
      ***   Increment page                                          ***
      ***   Write new heading line to spool                         ***
      *****************************************************************
       PAGE-HEADINGS SECTION.

           ADD 1       TO PAGENO.
           MOVE PAGENO TO PAGE-NUMBER.
           MOVE 1      TO LINE-COUNT.

           MOVE '1'          TO PRINT-CONTROL.
           MOVE HEADING-LINE TO PP1-132.
           PERFORM WRITE-OUTPUT.
           MOVE '+'          TO PRINT-CONTROL.
           MOVE ALL '_'      TO PP1-132.
           PERFORM WRITE-OUTPUT.

           MOVE 'Y' TO SUB-HEADINGS.

       PAGE-HEADINGS-EXIT.
           EXIT.
           EJECT
      *****************************************************************
      *** STOPWATCH-CONVERT                                         ***
      *** Call program DFH$STCN to convert S/370 format TOD to      ***
      ***   EBCDIC date and time                                    ***
      *****************************************************************
       STOPWATCH-CONVERT SECTION.

           MOVE 'S'    TO CLOCK-TYPE.
           MOVE SPACES TO CLOCK-OUTPUT.

           MOVE LENGTH OF CLOCK-FIELDS TO STCN-COMMAREA.

           EXEC CICS LINK PROGRAM('DFH$STCN')
               COMMAREA(CLOCK-FIELDS)
               LENGTH(STCN-COMMAREA)
           END-EXEC.

           MOVE LOW-VALUES TO CLOCK-FIELD.

       STOPWATCH-CONVERT-EXIT.
           EXIT.
           EJECT
      *****************************************************************
      *** WRITE-OUTPUT                                              ***
      ***   Write current print line to report output destination.  ***
      *****************************************************************
       WRITE-OUTPUT SECTION.

           PERFORM WRITE-SPOOL.

       WRITE-OUTPUT-EXIT.
           EXIT.
           EJECT
      *****************************************************************
      *** WRITE-SPOOL                                               ***
      *** Write current print line to spool                         ***
      *** Increment line-count                                      ***
      *** IF CICS exceptional condition is raised THEN              ***
      ***    call error routine                                     ***
      *****************************************************************
       WRITE-SPOOL SECTION.

           EXEC CICS SPOOLWRITE TOKEN(OUTPUT-TOKEN)
               FROM(PRINT-LINE) FLENGTH(LINE-LENGTH)
               LINE
               NOHANDLE
           END-EXEC.

           EVALUATE PRINT-CONTROL
               WHEN ' '
                   ADD 1 TO LINE-COUNT
               WHEN '0'
                   ADD 2 TO LINE-COUNT
               WHEN '-'
                   ADD 3 TO LINE-COUNT
               WHEN '+'
                   ADD 0 TO LINE-COUNT
               WHEN '1'
                   MOVE 1 TO LINE-COUNT
           END-EVALUATE.

      *                                       Check return code
           IF EIBRESP NOT = DFHRESP(NORMAL) THEN
               MOVE 'SPOOLWRITE' TO CICS-COMMAND
               PERFORM ERROR-ROUTINE
           ELSE
               MOVE ' '    TO PRINT-CONTROL
               MOVE SPACES TO PP1-132
           END-IF.

       WRITE-SPOOL-EXIT.
           EXIT.
           EJECT
      *****************************************************************
      ***  ERROR ROUTINE                                            ***
      ***  Error routine produces appropriate responses to CICS     ***
      ***  spool commands. To ensure this the resp and resp2 values ***
      ***  are returned to the main program DFH0STAT for appropriate***
      ***  outputing of the messages.                               ***
      *****************************************************************
       ERROR-ROUTINE SECTION.

      *  If an error occurs which is not due to the users input or if
      *  the program is not being run from a terminal then a general
      *  message is sent to the screen/console and the RESP and RESP2
      *  fields are given along with the spool command which failed.
           MOVE 'Y'      TO ERROR-FOUND.
           MOVE EIBRESP  TO STCM-RESP.
           MOVE EIBRESP2 TO STCM-RESP2.

      *  Whatever happens ensure we return to DFH0STAT quickly.
           EXEC CICS RETURN
           END-EXEC.

       ERROR-ROUTINE-EXIT.
           EXIT.
