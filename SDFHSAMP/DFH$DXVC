 #pragma XOPTS(EXCI)

 /********************************************************************/
 /*                                                                  */
 /* MODULE NAME = DFH$DXVC                                           */
 /*                                                                  */
 /* DESCRIPTIVE NAME = CICS TS  (component) ....                     */
 /**                                                                 */
 /**   This is a EXCI client program similar to java command in JVM  */
 /**   environment to invoke a java program.                         */
 /**                                                                 */
 /**    %PRODUCT is the global symbol for the CICS product and       */
 /**             must not be replaced by the current product name.   */
 /**                                                                 */
 /**    'component' is a mnemonic name corresponding to the CICS     */
 /**             functional area. It should match the 2 character    */
 /**             code specified at NEWMOD time. Valid functional     */
 /**             areas are listed in the LCS file CICS COMPONEN.     */
 /*                                                                  */
 /*                                                                  */
 /*                                                                  */
 /*      Licensed Materials - Property of IBM                        */
 /*                                                                  */
 /*      "Restricted Materials of IBM"                               */
 /*                                                                  */
 /*      5655-Y04                                                    */
 /*                                                                  */
 /*      (C) Copyright IBM Corp. 1998"                               */
 /*                                                                  */
 /*                                                                  */
 /*                                                                  */
 /*                                                                  */
 /**                                                                 */
 /* STATUS = 7.2.0                                                   */
 /**     Global symbol for the CICS level. Leave set to the level at */
 /**     which the object was created; it is replaced with the last  */
 /**     updated level automatically at Build time.                  */
 /*                                                                  */
 /* TRANSACTION NAME = HPJC                                          */
 /*     LINKS to DFH$AXVS using this tranid.                         */
 /*                                                                  */
 /* FUNCTION =  Sample                                               */
 /*                                                                  */
 /* NOTES :                                                          */
 /*  DEPENDENCIES = S/390                                            */
 /**       List any dependencies on the CICS tables, bring-up,       */
 /**       or SYSGEN.                                                */
 /*  RESTRICTIONS =                                                  */
 /**       List any restrictions, such as the maximum record length  */
 /*  REGISTER CONVENTIONS =                                          */
 /**       These can be listed here, or a named section of code      */
 /**       defines the registers can be referenced.  Where possible  */
 /**       PLS code should avoid explicit register use.              */
 /*  PATCH LABEL = Standard C/370 patch Area                         */
 /*  MODULE TYPE = Executable | Table                                */
 /*  PROCESSOR = C/370                                               */
 /*  ATTRIBUTES = Read only, Serially Reusable, <Authorized>         */
 /*                                                                  */
 /*------------------------------------------------------------------*/
 /*                                                                  */
 /* ENTRY POINT = main                                               */
 /*                                                                  */
 /*   PURPOSE =                                                      */
 /*       Sample EXCI server accessing DFH$AXVS.A37                  */
 /*                    (hpjcics)                                     */
 /*                                                                  */
 /*   LINKAGE =                                                      */
 /*           C                                                      */
 /*                                                                  */
 /*                                                                  */
 /*   INPUT =                                                        */
 /*     PARM='ENVAR(HPJCICS_SUBSYSTEM=IYK2Z051)/DFH$AXVS DFH$AXCS'   */
 /*   The 1st. parameter is the CICS progamme to link to             */
 /*   The 2nd. parameter is the CICS programme to be set             */
 /*    EXEC CICS SET PROGRAM(PROGNAME) PHASEIN                       */
 /*                                                                  */
 /*                                                                  */
 /*   OUTPUT =                                                       */
 /*         printf messages                                          */
 /*------------------------------------------------------------------*/
 /*                                                                  */
 /*                                                                  */
 /*   CONTROL BLOCKS =                                               */
 /*         Common area to communicate with DFH$AXVS                 */
 /*                                                                  */
 /*------------------------------------------------------------------*/
 /*                                                                  */
 /* DESCRIPTION                                                      */
 /*                                                                  */
 /*            main                                                  */
 /*            linkrets - EXCI link fails routine                    */
 /*                                                                  */
 /* Bring up CICS and install the group DFH$EXCI                     */
 /* then start this programme :-                                     */
 /*                                                                  */
 /* In Open Edition :-                                               */
 /*  export HPJCICS_SUBSYSTEM=IYK2Z051                               */
 /*  export STEPLIB=....SDFHEXCI:$STEPLIB                            */
 /*  DFH\$DXVC DFH\$AXVS DFHIIOP                                     */
 /*                                                                  */
 /* in MVS :-                                                        */
 /* //GO     EXEC PGM=DFH$DXVC,                                      */
 /* //  PARM='ENVAR(HPJCICS_SUBSYSTEM=IYK2Z051)/DFH$AXVS DFH$AXCS'   */
 /* //STEPLIB  DD  DSN=....SDFHEXCI,DISP=SHR                         */
 /* //SYSPRINT DD  SYSOUT=*                                          */
 /* //CEEDUMP  DD  SYSOUT=*                                          */
 /* //SYSUDUMP DD  SYSOUT=*                                          */
 /*                                                                  */
 /* Where '....SDFHEXCI' is the CICS external interface library      */
 /*                                                                  */
 /*------------------------------------------------------------------*/
 /*                                                                  */
 /* CHANGE ACTIVITY :                                                */
 /**                                                                 */
 /*      $MOD(DFH$DXVC),COMP(SAMPLES),PROD(CICS TS ):                */
 /*                                                                  */
 /*   PN= REASON REL YYMMDD HDXXIII : REMARKS                        */
 /*  $L0= 753    530 981113 HD5LL   : Samples DFH$DXVC DFH$AXVS      */
 /**      This PN= line ensures that when this object is ALTERed    **/
 /**      within a non-test MPU, a change flag is allocated and a   **/
 /**      change descriptor line added.                             **/
 /**      DO NOT DELETE THE PN= line                                **/
 /**                                                                **/
 /**      All code changes, after initial creation of the object,   **/
 /**      should be flagged using the allocated change flag.        **/
 /**                                                                **/
 /**      See HELP LCSFLAG for an explanation of the change         **/
 /**      descriptor fields.                                        **/
 /*                                                                  */
 /********************************************************************/

 /*==================================================================*/
 /*   Include standard libraries.                                    */
 /*==================================================================*/
 #include <string.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <ctype.h>
 #include "dfhxcplh.h"             /* parm list */

 #define no_abort   0
 #define yes        1

 /*==================================================================*/
 /*   Define the error code returned from hpjcics                    */
 /*==================================================================*/
 #define Invalid_Subsystem_Name_Error  4001
 #define Invalid_Program_Name_Error    4002
 #define No_Storage_Error              4003
 #define LINK_FAIL_ERROR               4004

 /*==================================================================*/
 /*   Define datatypes for return areas, and commareas               */
 /*==================================================================*/

 typedef struct { int    count;
                  char   string[256];
                } arg_T;

                                             /* Commarea Map         */
 typedef struct { char   key[8];             /*  eyecatcher          */
                  int    retcode;            /*  HPJ  retcode        */
                  arg_T  args;               /*  hpj args            */
                } comms;                     /*                      */
                                             /*======================*/

 /*==================================================================*/
 /*   Define internal function prototypes.                           */
 /*==================================================================*/

 void linkrets(exci_exec_return_code *pRet_Area);

 int main(int argc, char *argv[])
 {

    short  target_arglen;
    char*  target_argstring;
    char   target_transid[4];
    char   target_program[8];
    char   target_system[8];
    char*  env_HPJCICS_SUBSYSTEM;
    int    parm_len;
    int    i,index,j,len;
    int    hpj_rc;                       /* Return code area         */
    comms* link_commarea;                /* EXEC Commarea            */
    short  link_commlength;              /* Length of Commarea       */

    exci_exec_return_code link_retarea;  /* EXEC Return area.        */

    /* get CICS Subsystem Name                                       */

    env_HPJCICS_SUBSYSTEM = getenv("HPJCICS_SUBSYSTEM");
    if (env_HPJCICS_SUBSYSTEM == 0)
     {
       printf("                                                  \n");
       printf("Error, no CICS subsystem name is defined.         \n");
       printf("Please define environment var HPJCICS_SUBSYSTEM   \n");
       printf("                                                  \n");
       return Invalid_Subsystem_Name_Error;
     }

    len = strlen(env_HPJCICS_SUBSYSTEM);
    if (len > 8) len = 8;
    memcpy(target_system,"        ",8);
    memcpy(target_system,env_HPJCICS_SUBSYSTEM,len);

    /*   Get program name and arg string from input                 */

    if (argc < 2 )
     {
      printf("Error, no program name is specified in hpjcics \n");
      printf("                                               \n");
      printf("Syntax : hpjcics  pgmname <arguments>          \n");
      printf("                                               \n");
      return Invalid_Program_Name_Error;
     }

    memset(target_program,' ',sizeof(target_program));
    memcpy(target_program,argv[1],strlen(argv[1]));

    /* calculate arglen                                             */
    target_arglen = 0;
    for (i=2; i< argc ; ++i)
     {
      target_arglen = target_arglen + strlen(argv[i]) + 1;
     }

    link_commlength = sizeof(link_commarea->key)
      + sizeof(link_commarea->retcode)
      + sizeof(link_commarea->args.count) + target_arglen;

    /* acquire commarea                                              */
    link_commarea = (comms*) malloc(link_commlength);

    if (link_commarea==0)
      return No_Storage_Error;

    /* prepare commarea                                              */
    memcpy(&link_commarea->key,"_HPJCICS ",8);
    link_commarea->retcode = 999;
    link_commarea->args.count = argc - 2;

    index = 0;

    for (i=2; i< argc ; ++i)
     {
      len = strlen(argv[i]) + 1;
      memcpy(&link_commarea->args.string[index], argv[i], len);
      if (i == 2)
       {
        for (j=index; j<index+len; j++) /* Force to uppercase        */
         link_commarea->args.string[j] =
          toupper(link_commarea->args.string[j]);
       }
      index = index + len;
     };

 /*==================================================================*/
 /* Initialise Target information to point to a file residing on the */
 /* target_system, where the correct connection, session, & program  */
 /* definitions have been installed.  The target_transaction should  */
 /* point to the DFHMIRS program.  The target_program is the CICS    */
 /* application server which is to be invoked by the DPL call.       */
 /*==================================================================*/

    memcpy(target_transid,"HPJC",4);

 /*==================================================================*/
 /*   Set up the Outbound Commarea for transmission.                 */
 /*==================================================================*/
 /*==================================================================*/
 /*                                                                  */
 /*   Perform the Link Request.                                      */
 /*                                                                  */
 /*==================================================================*/
    EXEC CICS LINK PROGRAM(target_program)
                   APPLID(target_system)
                   RETCODE(&link_retarea)
                   COMMAREA(link_commarea)
                   LENGTH(link_commlength)
                   DATALENGTH(link_commlength)
                   TRANSID(target_transid)
                   SYNCONRETURN;
 /*==================================================================*/
 /*                                                                  */
 /*   Check on how successful the call was.                          */
 /*                                                                  */
 /*==================================================================*/

   if (link_retarea.exec_resp==0)  /* Check high lvl response        */
    {
      printf("Link successful\n");
      hpj_rc=link_commarea->retcode;
      printf("hpj program under CICS return code : %i\n",hpj_rc);
    }
   else
    {
      printf("Link has failed\n");
      linkrets(&link_retarea);     /* Output response codes          */
      hpj_rc = LINK_FAIL_ERROR;
    }                              /*                                */

   return (hpj_rc);
 }

 /*==================================================================*/
 /*                                                                  */
 /*   linkrets:     If the EXEC level EXCI link fails in any way,    */
 /*                 this routine will display in decimal all high    */
 /*                 level return codes produced.  If a message was   */
 /*                 received from the target CICS system, this       */
 /*                 will also be displayed.                          */
 /*                                                                  */
 /*==================================================================*/
 void linkrets(exci_exec_return_code *pRet_Area)
 {
   char     *pMsg_String;
   short int Msg_Len;

   /* output response, reason, subreason                             */
   printf("*     Response = %d   Response2 = %d   Abend Code = %4.4s"
          "                      *\n",
              pRet_Area->exec_resp,
              pRet_Area->exec_resp2,
              pRet_Area->exec_abcode);

   /* output message if one exists                                   */
   if (pRet_Area->exec_msg_ptr != NULL)
    {
     /* get message length                                           */
     Msg_Len = pRet_Area->exec_msg_len;

     /* allocate memory for message                                  */
     if ((pMsg_String = (char *)malloc(Msg_Len+1)) != NULL)  /*      */
      {
       /* malloc successful - copy contents of message into string   */

       memcpy(pMsg_String, pRet_Area->exec_msg_ptr, Msg_Len); /*     */

       /* null terminate our message string */
       *(pMsg_String + Msg_Len) = '\0';

       /* output message */
       printf("%80.120s\n", pMsg_String);

      }
     else printf("malloc - failed No Memory For Message String\n");

    }

   return;
 }
