//*******************************************************************
//
// Module Name: ICC$PRG1
//
// Description:
//    This sample program demonstrates how to use the IccProgram
//    class.
//
//
//
//     Licensed Materials - Property of IBM
//
//     "Restricted Materials of IBM"
//
//     5655-Y04
//
//     (C) Copyright IBM Corp. 1998"
//
//
//
//
// Status = %SP00
//
//-------------------------------------------------------------------
//
// Change Activity:
//
//   $MOD(ICC$PRG1),COMP(CEZANNE),PROD(CICS TS ):
//
//   PN= REASON REL YYMMDD HDXIII : REMARKS
//  $P0= M30492 530 981109 HDGYBS : Creation
//  $P1= M30696 530 981218 HDGYBS  : Fix sample c++ programs
//
//*******************************************************************
#include "icceh.hpp"  //CICS C++ Foundation Classes header files
#include "iccmain.hpp"  //CICS C++ Foundation Classes main() stub

void IccUserControl::run()
{
  IccTerminal* term = terminal();  //access terminal.
  term->erase();  //clear terminal.
  term->sendLine("This is program 'icc$prg1'...");

  IccSysId sysId( "ICC2" );  //remote system id
  IccProgram iccprg2( "ICC$PRG2" );  //program object.
  IccProgram remoteProg( "ICC$PRG3" );  //program object.
  IccBuf commArea( 100, IccBuf::fixed );  //buffer object.

  iccprg2.load();  //load program
  if (iccprg2.condition() == IccCondition::NORMAL)
  {
    term->sendLine( "Loaded program: %s <%s> Length=%ld Address=%x",
                    iccprg2.name(),
                    iccprg2.conditionText(),
                    iccprg2.length(),
                    iccprg2.address() );
    term->sendLine( "Unloading program: %s", iccprg2.name() );
    iccprg2.unload();
    term->sendLine( 35, "<%s>", iccprg2.conditionText() );
    term->sendLine( " - Hit ENTER to continue..." );
    term->waitForAID();
    term->erase();
  }
  else
    term->sendLine( "Load failed: <%s>", iccprg2.conditionText() );

  commArea = "DATA SET BY ICC$PRG1";  //set data in commArea

  term->sendLine( "About to link to program '%s'",
                   iccprg2.name() );
  term->sendLine( " - commArea before link is [%s]",
                  (const char*) commArea );
  term->sendLine( " - Hit ENTER to continue..." );
  term->waitForAID();

  term->setNewLine();

  iccprg2.link( &commArea );  //link to program icc$prg2

  term->setNewLine();

  term->sendLine( " - link call returned <%s>",
  iccprg2.conditionText() );
  term->sendLine( " - commArea after link is [%s]",
                  (const char*) commArea );


  remoteProg.setRouteOption( sysId );  //remote link request
  commArea = "DATA SET BY ICC$PRG1";  //set data in commArea

  term->setNewLine( 2 );
  term->sendLine( "About to link to program '%s' on system '%s'",
                  remoteProg.name(), remoteProg.routeOption().name() );
  term->sendLine( " - commArea before link is [%s]",
                  (const char*) commArea );
  term->sendLine( " - Hit ENTER to continue..." );
  term->waitForAID();

  remoteProg.link( &commArea );  //link to program icc$prg3

  term->sendLine( " - link call returned <%s>",
  remoteProg.conditionText() );
  term->sendLine( " - commArea after link is [%s]",
                  (const char*) commArea );

  term->send( 24,1,"Program 'icc$prg1' complete: Hit PF12 to End");
  term->waitForAID( IccTerminal::PF12 );
  term->erase();
  term->freeKeyboard();

  return;  //Return control to CICS.
};
