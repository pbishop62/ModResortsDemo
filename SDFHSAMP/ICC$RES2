//*******************************************************************
//
// Module Name: ICC$RES2
//
// Description:
//    This sample program demonstrates how to use the virtual methods
//    put(), get() & clear() in class IccResource to achieve some
//    level of polymorphism for CICS Resource objects.
//
//    To execute this sample you must install group DFH$CFCS and
//    also an intra-partition TDQ called ICCQ. The sample transaction
//    for this program is IRS2.
//
//
//
//
//
//     Licensed Materials - Property of IBM
//
//     "Restricted Materials of IBM"
//
//     5655-Y04
//
//     (C) Copyright IBM Corp. 1998, 2005"
//
//
//
//
// Status = %SP00
//
//-------------------------------------------------------------------
//
// Change Activity:
//
//   $MOD(ICC$RES2),COMP(CEZANNE),PROD(CICS TS ):
//
//   PN= REASON REL YYMMDD HDXIII : REMARKS
//  $P0= M30492 530 981109 HDGYBS : Creation
//  $P1= M30696 530 981218 HDGYBS : Fix sample c++ programs
//  $P2= M12734 640 041224 HD6KRAH: Language level
//  $P3= M10725 640 050202 HD6KRAH: delete clear message
//  $P4= D14524 650 051006 HDIKTG : CCN C/C++ Compiler errors
//
//*******************************************************************
#include "icceh.hpp"  //CICS C++ Foundation Classes header files
#include "iccmain.hpp"  //CICS C++ Foundation Classes main() stub

char* dataItems[] =
{
  "Hello World - item 1",
  "Hello World - item 2",
  "Hello World - item 3"
};

void IccUserControl::run()
{
  short index;                                                 //@P4A
  IccTerminal* term = terminal();  //Access terminal.
  term->erase();  //Clear terminal.
  term->sendLine("This is program 'icc$res2'...");
  term->setNewLine();  //skip line

  IccBuf buffer( 50 );  //50 byte buffer.
  IccResource* pObj[2];  //pointers to IccResource objs

  pObj[0] = new IccDataQueue("ICCQ");
  pObj[1] = new IccTempStore("ICCTEMPS");

  for ( index=0; index <= 1 ; index++ )                        //@P4C
  {
    term->sendLine( "invoking clear() method for %s object",
                    pObj[index]->className() );

    pObj[index]->clear();  //'clear' the object
  }

  for ( index=0; index <= 1 ; index++ )
  {
    for (short j=1 ; j <= 3 ; j++)
    {
      buffer = dataItems[j-1];
      term->sendLine( "put() item #%d in %s object",
                       j, pObj[index]->className() );
      pObj[index]->put( buffer );  //Put buffer into Resource object
    }
  }

  for ( index=0; index <= 1 ; index++ )
  {
    term->sendLine( "Now get items from %s object",
    pObj[index]->className() );
    buffer = pObj[index]->get();  //get data from Resource
    while (pObj[index]->condition() == IccCondition::NORMAL)
    {
      term->sendLine( "get() from %s object returned '%s'",
                      pObj[index]->className(), (const char*)buffer );
      buffer = pObj[index]->get();  //get data from Resource
    }

    delete pObj[index];  //delete object
    term->setNewLine();  //skip line
  }

  term->send( 24,1,"Program 'icc$res2' complete: Hit PF12 to End");
  term->waitForAID( IccTerminal::PF12 );
  term->erase();
  term->freeKeyboard();

  return;  //Return control to CICS
}
