//*******************************************************************
//
// Module Name: ICC$DAT
//
// Description:
//    This sample program demonstrates how to use the IccDataQueue
//    class.
//
//
//
//     Licensed Materials - Property of IBM
//
//     "Restricted Materials of IBM"
//
//     5655-Y04
//
//     (C) Copyright IBM Corp. 1998, 2004"
//
//
//
//
// Status = %SP00
//
//-------------------------------------------------------------------
//
// Change Activity:
//
//   $MOD(ICC$DAT),COMP(CEZANNE),PROD(CICS TS ):
//
//   PN= REASON REL YYMMDD HDXIII : REMARKS
//  $P0= M30492 530 981106 HDGYBS : Creation
//  $P1= M30696 530 981218 HDGYBS : Fix sample c++ programs
//  $P2= D12734 640 041230 HD6KRAH: Language Level
//
//*******************************************************************
#include "icceh.hpp"  //CICS C++ Foundation Classes header files
#include "iccmain.hpp"  //CICS C++ Foundation Classes main() stub

const char* queueItems[] =
{
  "Hello World - item 1",
  "Hello World - item 2",
  "Hello World - item 3"
};

void IccUserControl::run()
{
  IccTerminal* term = terminal();  //Access terminal object
  term->erase();  //Clear terminal
  term->sendLine("This is program 'icc$dat'...");

  short itemNum =1;
  IccBuf buffer( 50 );  //Buffer for queue items
  IccDataQueueId id( "ICCQ" );  //Queue identifier object
  IccDataQueue queue( id );  //Queue object

  queue.empty();  //delete any queue items

  term->sendLine("Writing records to '%s'...", queue.name() );
  for (short i=0 ; i<3 ; i++)
  {
    buffer = queueItems[i];  //assign buffer
    term->sendLine( " - writing record #%d: '%s'",
    i+1, (const char*)buffer );
    queue.writeItem( buffer );  //write buffer object to queue
    term->sendLine( 46, "<%s>", queue.conditionText() );
  }

  term->sendLine("Reading records back in...");

  buffer = queue.readItem();  //read queue & copy into buffer object
  while ( queue.condition() == IccCondition::NORMAL )
  {
    term->sendLine( " - reading record #%d: '%s' <%s>", itemNum++,
                  (const char*)buffer, queue.conditionText() );
    buffer = queue.readItem();  //read queue & copy into buffer object
  }

  term->send(24,1,"Program 'icc$dat' complete: Hit PF12 to End");
  term->waitForAID(IccTerminal::PF12 );
  term->erase();
  term->freeKeyboard();

  return;  //Return control to CICS
}
