//*******************************************************************
//
// Module Name: ICC$JRN
//
// Description:
//    This sample program demonstrates how to use the IccJournal
//    class.
//
//
//
//     Licensed Materials - Property of IBM
//
//     "Restricted Materials of IBM"
//
//     5655-Y04
//
//     (C) Copyright IBM Corp. 1998"
//
//
//
//
// Status = %SP00
//
//-------------------------------------------------------------------
//
// Change Activity:
//
//   $MOD(ICC$JRN),COMP(CEZANNE),PROD(CICS TS ):
//
//   PN= REASON REL YYMMDD HDXIII : REMARKS
//  $P0= M30492 530 981109 HDGYBS : Creation
//  $P1= M30696 530 981209 HDGYBS : Fix sample c++ programs
//
//*******************************************************************
#include "icceh.hpp"
#include "iccmain.hpp"  //CICS C++ Foundation Classes main() stub

const char* journalDataItems[] =
{
  "Hello World - item 1",
  "Hello World - item 2",
  "Hello World - item 3"
};

void IccUserControl::run()
{
  IccTerminal* term = terminal();  //Access terminal
  term->erase();  //Clear terminal
  term->sendLine("This is program 'icc$jrn'...");

  IccBuf buffer( 50 );  //Buffer for journal records
  IccBuf prefix( 10 );  //Buffer for prefix
  IccJournalId id( 77 ) ;  //Journal Identifier object
  IccJournalTypeId jtid( "RB" ) ;  //Journal Type (2 byte) id
  IccJournal journal( id );  //Journal object

  prefix = "ICCPRFX:";  //Assign journal prefix

  journal.setJournalTypeId( jtid );  //Set journal type
  journal.setPrefix( prefix );  //Set prefix buffer

  term->sendLine("Writing  3 records to  journal number %s...",
  journal.name());

  //Write out 3 records to journal...
  for (short j=0 ; j<3 ; j++)
  {
    buffer = journalDataItems[j];
    terminal()->sendLine( " - writing record %d: [%s] ",
                           j+1, (const char*)buffer );

    journal.writeRecord( buffer );  //Write journal record
    term->sendLine( 50, "<%s>", journal.conditionText() );

    journal.wait();  //Wait until write is complete
  }

  term->send( 24,1,"Program 'icc$jrn' complete: Hit PF12 to End");
  term->waitForAID( IccTerminal::PF12 );
  term->erase();
  term->freeKeyboard();

  return;
}
