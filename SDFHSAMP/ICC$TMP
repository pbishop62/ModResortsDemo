//*******************************************************************
//
// Module Name: ICC$TMP
//
// Description:
//    This sample program demonstrates how to use the IccTempStore
//    class.
//
//
//
//     Licensed Materials - Property of IBM
//
//     "Restricted Materials of IBM"
//
//     5655-Y04
//
//     (C) Copyright IBM Corp. 1998"
//
//
//
//
// Status = %SP00
//
//-------------------------------------------------------------------
//
// Change Activity:                                                *
//                                                                 *
//   $MOD(ICC$TMP),COMP(CEZANNE),PROD(CICS TS ):                   *
//
//   PN= REASON REL YYMMDD HDXIII : REMARKS
//  $P0= M30492 530 981109 HDGYBS : Creation
//  $P1= M30696 530 981218 HDGYBS : Fix sample c++ programs
//
//*******************************************************************
#include "icceh.hpp"  //CICS C++ Foundation Classes header files
#include "iccmain.hpp"  //CICS C++ Foundation Classes main() stub
#include <stdlib.h>

const char* bufferItems[] =
{
  "Hello World - item 1",
  "Hello World - item 2",
  "Hello World - item 3"
};

void IccUserControl::run()
{
  IccTerminal* term = terminal();  //Gain access to terminal object
  term->erase();  //Clear the terminal
  term->sendLine( "This is program 'icc$tmp'..." );

  short itemNum = 1;
  IccTempStoreId id("ICCSTORE");  //create identification object
  IccTempStore store( id );  //TS "ICCSTORE"
  IccBuf buffer( 50 );  //50 byte buffer object.

  store.empty();  //empty the store store

  term->sendLine( "Writing 3 records to %s object '%s'...",
                   store.className(), store.name() );

  for (short j=1 ; j <= 3 ; j++)
  {
    buffer = bufferItems[j-1];  //assign data to buffer object

    term->sendLine(
    " - writing record #%d: '%s'", j, (const char*)buffer );

    store.writeItem( buffer );  //write buffer to TS object

    term->sendLine( 50, "<%s>", store.conditionText() );
  }

  term->sendLine(
  "Reading records back in & rewriting new buffer contents...");

  buffer = store.readItem( itemNum );  //read buffer from TS object
  while ( store.condition() == IccCondition::NORMAL )
  {
    term->sendLine( " - record #%d = [%s]",
    itemNum, (const char*)buffer );

    buffer.insert( 9, "Modified " );  //change data in buffer object.

    //now overwrite buffer number itemNum ...
    term->sendLine( 50, " - rewriteItem #%d", itemNum );

    store.rewriteItem( itemNum, buffer );

    term->sendLine( 70, "<%s>", store.conditionText() );
    itemNum++;  //increment item number.
    buffer = store.readItem( itemNum );  //read next buffer item
  }

  term->sendLine( "Reading records back in one last time..." );

  itemNum = 1;
  buffer = store.readItem( itemNum );  //read buffer from TS object
  while ( store.condition() == IccCondition::NORMAL )
  {
    term->sendLine( " - record #%d = [%s]",
    itemNum, (const char*)buffer );

    buffer = store.readNextItem();  //read next buffer item
  }

  term->send( 24,1, "Program 'icc$tmp' complete: Hit PF12 to end" );
  term->waitForAID(IccTerminal::PF12 );  //wait until user presses PF12
  term->erase();  //clear the terminal
  term->freeKeyboard();

  return;  //return control to CICS
}
