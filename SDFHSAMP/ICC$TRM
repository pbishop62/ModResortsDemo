//*******************************************************************
//
// Module Name: ICC$TRM
//
// Description:
//    This sample program demonstrates how to use the IccTerminal
//    class.
//
//
//
//     Licensed Materials - Property of IBM
//
//     "Restricted Materials of IBM"
//
//     5655-Y04
//
//     (C) Copyright IBM Corp. 1998, 2005"
//
//
//
//
// Status = %SP00
//
//-------------------------------------------------------------------
//
// Change Activity:
//
//   $MOD(ICC$TRM),COMP(CEZANNE),PROD(CICS TS ):
//
//   PN= REASON REL YYMMDD HDXIII : REMARKS
//  $P0= M30492 530 981109 HDGYBS : Creation
//  $P1= M30696 530 981218 HDGYBS : Fix sample c++ programs
//  $P2= D14524 650 050916 HDIKTG : CCN C/C++ Compiler errors
//
//*******************************************************************
#include "icceh.hpp"  //CICS C++ Foundation Classes header files
#include "iccmain.hpp"  //CICS C++ Foundation Classes main() stub

void IccUserControl::run()
{
  IccTerminal* term = terminal();
  term->erase();
  term->sendLine("This is program 'icc$trm'...");

  //send and sendLine methods...
  //all of these methods can take const IccBuf& instead of const char*
  term->sendLine( "First part of the line..." );
  term->send( "... a continuation of the line." );

  term->sendLine( "Start this on the next line" );
  term->sendLine( 40, "Send this to col 40 of current line" );

  term->send( 5, 10, "Send this to row 5, column 10" );
  term->send( 6, 40, "Send this to row 6, column 40" );

  term->setNewLine();  //send a blank line

  //Color and highlighting....
  term->setColor( IccTerminal::red );
  term->sendLine( "A Red line!");
  term->setColor( IccTerminal::blue );
  term->setHighlight( IccTerminal::reverse );
  term->sendLine( "A Blue, reverse video line!");

  term->setNewLine();  //send a blank line
  term->setColor( IccTerminal::yellow );
  term->setHighlight( IccTerminal::defaultHighlight );

  //Stream operators style...
  //endl will cause next data to start on next line
  //flush will force the data to be sent to screen.
  //Note: all 'operator<<' methods buffer data in the terminal object
  //      until the 'flush' function is invoked.
  //      (The reason for buffering is to improve performance.)
  *term << "A cout style interface... " << endl;
  *term << "you can " << "chain input together; "
        << "use different types, eg numbers: " << (short)123 << " "
        << (long)4567890 << " " << (double)123456.7891234 << endl;
  *term << "... and everything is buffered till you issue a flush."
        << flush;

  term->send( 24,1, "Program 'icc$trm' complete: Hit PF12 to End" );
  term->waitForAID( IccTerminal::PF12 );
  term->erase();
  term->freeKeyboard();

  return;
}
