//*******************************************************************
//
// Module Name: ICC$SRQ2
//
// Description:
//    This sample program demonstrates how to use the IccStartRequestQ
//    class. It is used in conjunction with the ICC$SRQ1 program (see
//    prologue for ICC$SRQ1)
//
//
//
//     Licensed Materials - Property of IBM
//
//     "Restricted Materials of IBM"
//
//     5655-Y04
//
//     (C) Copyright IBM Corp. 1998"
//
//
//
//
// Status = %SP00
//
//-------------------------------------------------------------------
//
// Change Activity:
//
//   $MOD(ICC$SRQ2),COMP(CEZANNE),PROD(CICS TS ):
//
//   PN= REASON REL YYMMDD HDXIII : REMARKS
//  $P0= M30492 530 981109 HDGYBS : Creation
//  $P1= M30696 530 981211 HDGYBS : Fix sample c++ programs
//
//*******************************************************************
#include "icceh.hpp"  //CICS C++ Foundation Classes header files
#include "iccmain.hpp"  //CICS C++ Foundation Classes main() stub

void IccUserControl::run()
{
  IccTerminal* term = terminal();  //access terminal.
  term->erase();  //clear terminal.
  term->sendLine("This is program 'icc$srq2'...");

  IccBuf buffer;  //buffer object.
  IccRequestId req("REQUESTX");  //request object.
  IccTimeInterval ti(0,0,5);  //5 second interval.

  IccStartRequestQ* startQ = startRequestQ();  //access start queue

  //Check we were started via a start request queue...
  if ( task()->startType() != IccTask::startRequest )
  {
    term->sendLine(
    "This program should only be started via the StartRequestQ");
    task()->abend( "OOPS" );
  }

  //Retrieve our start information...
  term->sendLine( "retrieveData()...");
  startQ->retrieveData();
  term->sendLine( 20, "<%s>", startQ->conditionText() );
  buffer = startQ->data();
  term->sendLine( "Start buffer contents = [%s]", buffer.dataArea() );
  term->sendLine( "Start queue= [%s]", startQ->queueName() );
  term->sendLine( "Start rtrn = [%s]", startQ->returnTransId().name());
  term->sendLine( "Start rtrm = [%s]", startQ->returnTermId().name() );

  //Now sleep for 5 seconds...
  term->sendLine( "Sleeping for %ld seconds...", ti.timeInSeconds() );
  task()->delay( ti );

  //Start another task on calling task's terminal...
  term->sendLine(
  "Starting tran '%s' on terminal '%s' on system ICC1...",
                   startQ->returnTransId().name(),
                   startQ->returnTermId().name() );

  startQ->setRouteOption( "ICC1" );  //Start request on system 'ICC1'

  startQ->start( startQ->returnTransId(),
                &(startQ->returnTermId()) );                    //@P1A
  term->sendLine( 60, "<%s>", startQ->conditionText() );

  term->send( 24,1, "Program 'icc$srq2' complete: Hit PF12 to end" );
  term->waitForAID( IccTerminal::PF12 );
  term->erase();
  term->freeKeyboard();

  return;  //Return control to CICS.
}
