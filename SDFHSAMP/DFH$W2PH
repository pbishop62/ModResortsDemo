??=ifdef __COMPILER_VER__
??=pragma filetag ("IBM-1047")
??=endif
??=pragma margins(1,72) sequence(73,80)
/* ---------------------------------------- */
/* Note - the above pragma statement allows */
/* this file to be used by either C or C++  */
/* compilers irrespective of file attributes*/
/* of fixed/variable, and inc/exclusion of  */
/* sequence numbers.                        */
/* ---------------------------------------- */
#ifndef __DFH$W2PH__                                                    00001000
#define __DFH$W2PH__ 1                                                  00002000
#include <stdint.h>                                                     00003000
 /* ***************************************************************** */00004000
 /*                                                                   */00005000
 /*  MODULE NAME = DFH$W2PC                                           */00006000
 /*                                                                   */00007000
 /*  DESCRIPTIVE NAME = Web 2.0 Sample - ATOMPARAMETERS container     */00008000
 /*                                                                   */00009000
 /*     Licensed Materials - Property of IBM                          */00010000
 /*                                                                   */00011000
 /*     CICS SupportPac CA8K                                          */00012000
 /*                                                                   */00013000
 /*     (c) Copyright IBM Corporation 2008 All Rights Reserved        */00014000
 /*     US Government Users Restricted Rights - Use, duplication      */00015000
 /*     or disclosure restricted by GSA ADP Schedule Contract         */00016000
 /*     with IBM Corporation                                          */00017000
 /*                                                                   */00018000
 /*  STATUS = 7.2.0                                                   */00019000
 /*                                                                   */00020000
 /*  DESCRIPTION                                                      */00021000
 /*                                                                   */00022000
 /*   This copybook maps the parameters passed in the ATOMPARAMETERS  */00023000
 /*   container from DFH$W2FD to the resource service routine.        */00024000
 /*                                                                   */00025000
 /*   Each parameter passed in this container is a pointer to an      */00026000
 /*   eight byte area. The first parameter is a pointer to a          */00027000
 /*   64-bit options string, whose definition is mapped by the        */00028000
 /*   ATMP_OPTIONS_BITS dsect. The second parameter is a pointer to   */00029000
 /*   two fullwords in which the response and reason code can be      */00030000
 /*   returned. The remaining parameters are pointers to              */00031000
 /*   pointer+length structures, in which the first word contains a   */00032000
 /*   pointer to the parameter's value and the second word contains   */00033000
 /*   its length.                                                     */00034000
 /*                                                                   */00035000
 /*   The parameters in the containmer are as follows:                */00036000
 /*                                                                   */00037000
 /*    ATMP_OPTIONS                                                   */00038000
 /*       Address of a double word containing 64 option bits.         */00039000
 /*       The first word is used to send options to the service       */00040000
 /*       routine, and the second word is used to receive             */00041000
 /*       options from the service routine.                           */00042000
 /*    ATMP_RESPONSE                                                  */00043000
 /*       Address of a double word in which the response and          */00044000
 /*       reason code can be returned. These are both                 */00045000
 /*       initialized to zero, indicating successful completion.      */00046000
 /*    ATMP_RESNAME                                                   */00047000
 /*       Address of a double word containing a pointer to the        */00048000
 /*       CICS resource name, followed by its length.                 */00049000
 /*    ATMP_RESTYPE                                                   */00050000
 /*       Address of a double word containing a pointer to the        */00051000
 /*       CICS resource type name in uppercase, followed by           */00052000
 /*       its length. The type can be PROGRAM, TSQUEUE, or FILE.      */00053000
 /*    ATMP_ATOMTYPE                                                  */00054000
 /*       Address of a double word containing a pointer to the        */00055000
 /*       type of Atom document being processed, in lowercase,        */00056000
 /*       followed by its length. It is either entry or feed.         */00057000
 /*    ATMP_ATOMID                                                    */00058000
 /*       Address of a double word containing a pointer to the        */00059000
 /*       unique Atom request identifier (from the atom:id            */00060000
 /*       element), followed by its length.                           */00061000
 /*    ATMP_SELECTOR                                                  */00062000
 /*       Address of a double word containing a pointer to the        */00063000
 /*       selector value from the URL, followed by its length.        */00064000
 /*       This parameter is used to select the record within          */00065000
 /*       the CICS resource that is to be accessed. In this           */00066000
 /*       implementation, the selector is the operand of              */00067000
 /*       the "s=" keyword within the querystring section             */00068000
 /*       of the URL.                                                 */00069000
 /*    ATMP_HTTPMETH                                                  */00070000
 /*       Address of a double word containing a pointer to the        */00071000
 /*       the HTTP method padded, followed by its length              */00072000
 /*       It is GET, POST, PUT or DELETE.                             */00073000
 /*    ATMP_RLM                                                       */00074000
 /*       Address of a double word containing a pointer to the        */00075000
 /*       Resource Layout Mapping area, followed by its length.       */00076000
 /*    ATMP_MTYPEIN                                                   */00077000
 /*       Address of a double word containing a pointer to the        */00078000
 /*       the mediatype of the incoming HTTP request body,            */00079000
 /*       if any, followed by its length. It is only meaningful       */00080000
 /*       if the HTTP method is POST or PUT, otherwise the            */00081000
 /*       pointer and length are both zero.                           */00082000
 /*    ATMP_MTYPEOUT                                                  */00083000
 /*       Address of a double word containing a pointer to an         */00084000
 /*       area in which the routine must return the mediatype of      */00085000
 /*       the data being returned in the ATOMCONTENT container,       */00086000
 /*       followed by the length of that area (56 bytes).             */00087000
 /*    ATMP_UPDATED                                                   */00088000
 /*       Address of a double word containing a pointer to an         */00089000
 /*       area in which the routine must return the date and          */00090000
 /*       time at which the returned document was last updated,       */00091000
 /*       followed by the length of that area (32 bytes).             */00092000
 /*       The value must be returned in xs:dateTime format,           */00093000
 /*       which is the same as RFC3339 format, namely                 */00094000
 /*       yyyy-mm-ddThh:mm:ss.fffZ, or as spaces. (The .fff           */00095000
 /*       fractional seconds are optional, and may be omitted.)       */00096000
 /*       If spaces are returned, the currect time is assumed.        */00097000
 /*    ATMP_ETAGVAL                                                   */00098000
 /*       Address of a double word containing a pointer to the        */00099000
 /*       Etag value for the selected record, followed by its         */00100000
 /*       length. The Etag (or entity tag) is any string              */00101000
 /*       that can be used to identify the record instance            */00102000
 /*       uniquely. It could be based on an accurate timestamp        */00103000
 /*       or version number, but in this implementation it is         */00104000
 /*       the hexadecimal value of the binary checksum of the         */00105000
 /*       record derived by the CKSM machine instruction.             */00106000
 /*       The checksum may theoretically sometimes be the same        */00107000
 /*       for different record instances, but this is likely to       */00108000
 /*       be rare. It is "probably good enough" for its primary       */00109000
 /*       purposeof guarding against the updating of data in a        */00110000
 /*       PUT operation that was derived from data that was           */00111000
 /*       previously obtained in a GET operation but is now           */00112000
 /*       stale (i.e. it was updated by someone else since the        */00113000
 /*       GET request had completed).                                 */00114000
 /*    ATMP_WINSIZE                                                   */00115000
 /*       Address of a double word containing a pointer to the        */00116000
 /*       feed window size, followed by its length. The value         */00117000
 /*       is a numeric string that contains the default number        */00118000
 /*       of entries to be returned in each feed,                     */00119000
 /*    ATMP_NEXTSEL                                                   */00120000
 /*       Address of a double word into which the service             */00121000
 /*       routine should set a pointer and length of a selector       */00122000
 /*       value for the next record in the resource, if any.          */00123000
 /*    ATMP_PREVSEL                                                   */00124000
 /*       Address of a double word into which the service             */00125000
 /*       routine should set a pointer and length of a selector       */00126000
 /*       value for the previous record in the resource, if any.      */00127000
 /*    ATMP_FIRSTSEL                                                  */00128000
 /*       Address of a double word into which the service             */00129000
 /*       routine should set a pointer and length of a selector       */00130000
 /*       value for the first (newest) record in the resource,        */00131000
 /*       if any.                                                     */00132000
 /*    ATMP_LASTSEL                                                   */00133000
 /*       Address of a double word into which the service             */00134000
 /*       routine should set a pointer and length of a selector       */00135000
 /*       value for the last (oldest) record in the resource,         */00136000
 /*       if any.                                                     */00137000
 /*    ATMP_ID_FLD                                                    */00138000
 /*       Address of a double word containing a pointer to the        */00139000
 /*       NAME OF THE FIELD within the resource that contains         */00140000
 /*       the atom identifier (from the atom:id element), if          */00141000
 /*       present, followed by its length. If it is present,          */00142000
 /*       the service routine should use this named field to          */00143000
 /*       store the contents of the atom:id element.                  */00144000
 /*    ATMP_UPDATED_FLD                                               */00145000
 /*       Address of a double word containing a pointer to            */00146000
 /*       the NAME OF THE FIELD within the resource that              */00147000
 /*       contains the time when the resource was last updated,       */00148000
 /*       if present, followed by its length. If no such field        */00149000
 /*       exists, the pointer and length are both zero.               */00150000
 /*       If it is present, the service routine should use this       */00151000
 /*       named field to locate the value of the timestamp that       */00152000
 /*       can be used to construct the value returned in the          */00153000
 /*       UPDATED parameter. This may be all spaces if the            */00154000
 /*       resource does not contain such a field.                     */00155000
 /*    ATMP_KEY_FLD                                                   */00156000
 /*       Address of a double word containing a pointer to the        */00157000
 /*       NAME OF THE FIELD within the resource that contains         */00158000
 /*       the key (RIDFLD) for File Control operations, if any,       */00159000
 /*       followed by its length. Only relevant when the              */00160000
 /*       resource type is FILE.                                      */00161000
 /*    ATMP_TITLE_FLD                                                 */00162000
 /*       Address of a double word containing a pointer to            */00163000
 /*       the NAME OF THE FIELD within the resource that              */00164000
 /*       contains the Atom title of the represented entry,           */00165000
 /*       if present, followed by its length.                         */00166000
 /*       If it is present, the service routine should use this       */00167000
 /*       named field to locate the entry title, and return it        */00168000
 /*       in the ATOMTITLE container.                                 */00169000
 /*    ATMP_SUBTITLE_FLD                                              */00170000
 /*       Address of a double word containing a pointer to            */00171000
 /*       the NAME OF THE FIELD within the resource that              */00172000
 /*       contains the Atom subtitle of the represented entry,        */00173000
 /*       if present, followed by its length.                         */00174000
 /*       If it is present, the service routine should use this       */00175000
 /*       named field to locate the entry subtitle, and return        */00176000
 /*       it in the ATOMSUBTITLE container.                           */00177000
 /*    ATMP_SUMMARY_FLD                                               */00178000
 /*       Address of a double word containing a pointer to            */00179000
 /*       the NAME OF THE FIELD within the resource that              */00180000
 /*       contains the Atom summary of the represented entry,         */00181000
 /*       if present, followed by its length.                         */00182000
 /*       If it is present, the service routine should use this       */00183000
 /*       named field to locate the entry summary, and return         */00184000
 /*       it in the ATOMSUMMARY container.                            */00185000
 /*                                                                   */00186000
 /* ***************************************************************** */00187000
                                                                        00188000
 typedef                                                                00189000
 struct {                                                               00190000
   void * __ptr32 atmp_options;   /* Address of 64-bit options          00191000
                                     bitmap                           */00192000
   void * __ptr32 atmp_response;  /* Address of response/reason         00193000
                                     doubleword                       */00194000
   void * __ptr32 atmp_resname;   /* Address of resource name           00195000
                                     ptr/length                       */00196000
   void * __ptr32 atmp_restype;   /* Address of resource type           00197000
                                     ptr/length                       */00198000
   void * __ptr32 atmp_atomtype;  /* Address of atom document type      00199000
                                     ptr/len                          */00200000
   void * __ptr32 atmp_atomid;    /* Address of atom id ptr/length    */00201000
   void * __ptr32 atmp_selector;  /* Address of entry selector          00202000
                                     ptr/length                       */00203000
   void * __ptr32 atmp_httpmeth;  /* Address of HTTP mathod             00204000
                                     ptr/length                       */00205000
   void * __ptr32 atmp_rlm;       /* Address of Resource Layout         00206000
                                     Mapping pt/ln                    */00207000
   void * __ptr32 atmp_mtypein;   /* Address of inbound mediatype       00208000
                                     ptr/length                       */00209000
   void * __ptr32 atmp_mtypeout;  /* Address of outbound mediatype      00210000
                                     ptr/len                          */00211000
   void * __ptr32 atmp_updated;   /* Address of updated timestamp       00212000
                                     ptr/len                          */00213000
   void * __ptr32 atmp_etagval;   /* Address of Etag value ptr/len    */00214000
   void * __ptr32 atmp_winsize;   /* Address of window size ptr/len   */00215000
   void * __ptr32 atmp_nextsel;   /* Address of next feed selector      00216000
                                     ptr/len                          */00217000
   void * __ptr32 atmp_prevsel;   /* Address of prev feed selector      00218000
                                     ptr/len                          */00219000
   void * __ptr32 atmp_firstsel;  /* Address of first feed selector     00220000
                                     ptr/len                          */00221000
   void * __ptr32 atmp_lastsel;   /* Address of last feed selector      00222000
                                     ptr/len                          */00223000
   void * __ptr32 atmp_id_fld;    /* Address of atom id fieldname       00224000
                                     ptr/len                          */00225000
   void * __ptr32 atmp_updated_fld; /* Address of updated fieldname     00226000
                                     ptr/len                          */00227000
   void * __ptr32 atmp_key_fld;   /* Address of key fieldname           00228000
                                     ptr/length                       */00229000
   void * __ptr32 atmp_title_fld; /* Address of title fieldname         00230000
                                     ptr/length                       */00231000
   void * __ptr32 atmp_subtitle_fld; /* Address of subtitle fieldname   00232000
                                      ptr/len                         */00233000
   void * __ptr32 atmp_summary_fld; /* Address of summary fieldname     00234000
                                     ptr/len                          */00235000
   void * __ptr32 atmp_parameter_25; /* Address of URM parameter 25     00236000
                                     (unused)                         */00237000
 } atmp_parameter_list;                                                 00238000
                                                                        00239000
 typedef                                                                00240000
 struct {                                                               00241000
   uint32_t atmp_response_code;   /* Response code                    */00242000
   uint32_t atmp_reason_code;     /* Reason code                      */00243000
 } atmp_responses;                /* Addressed by ATMP_RESPONSE       */00244000
                                                                        00245000
 typedef                                                                00246000
 struct {                                                               00247000
   void * __ptr32 atmp_parameter_ptr; /* Parameter address            */00248000
   int32_t atmp_parameter_len;    /* Parameter length                 */00249000
 } atmp_parameter;                /* Parameter locator double word    */00250000
                                                                        00251000
 typedef                                                                00252000
 struct {                                                               00253000
   unsigned atmp_options_inbit :32;                                     00254000
   struct {                                                             00255000
     unsigned atmp_outopt_byte0 :8; /* High byte not usable in COBOL  */00256000
     struct {                                                           00257000
       unsigned opttitle :1;      /* ATOMTITLE container returned     */00258000
       unsigned optsubti :1;      /* ATOMSUBTITLE container returned  */00259000
       unsigned optsumma :1;      /* ATOMSUMMARY container returned   */00260000
       unsigned filler__001 :5;                                         00261000
     } atmp_outopt_byte1;                                               00262000
     unsigned atmp_outopt_byte2 :8;                                     00263000
     unsigned atmp_outopt_byte3 :8;                                     00264000
   } atmp_options_outbit;                                               00265000
 } atmp_options_bits;             /* Bits addressed by ATMP_OPTIONS   */00266000
                                                                        00267000
 typedef                                                                00268000
 struct {                                                               00269000
   uint32_t atmp_options_in;      /* Input request bits (not used)    */00270000
   uint32_t atmp_options_out;     /* Output response bits             */00271000
 } atmp_options_words;            /* Words addressed by ATMP_OPTIONS  */00272000
#endif                                                                  00273000
