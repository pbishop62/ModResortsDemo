      CBL CICS('COBOL3,SP')
      *****************************************************************
      *                                                               *
      * MODULE NAME = DFH0BAT3                                        *
      *                                                               *
      * DESCRIPTIVE NAME = Batch Enabling Sample BAT3                 *
      *                    Force Retained Locks Coordinator           *
      *                                                               *
      *                                                               *
      *                                                               *
      *     Licensed Materials - Property of IBM                      *
      *                                                               *
      *     "Restricted Materials of IBM"                             *
      *                                                               *
      *     5655-Y04                                                  *
      *                                                               *
      *     (C) Copyright IBM Corp. 1994, 2001"                       *
      *                                                               *
      *                                                               *
      *                                                               *
      *                                                               *
      * STATUS = 7.2.0                                                *
      *                                                               *
      *---------------------------------------------------------------*
      *                                                               *
      * OVERVIEW                                                      *
      *                                                               *
      *   To aid the customer in the preparation for running non-RLS  *
      *   VSAM batch jobs against a group of data sets, CICS          *
      *   provides a suite of sample COBOL2 programs called DFH0BATx. *
      *                                                               *
      *   For an overview of the DFH0BATx suite, refer to the         *
      *   prolog of program DFH0BAT1                                  *
      *   which also contains some general comments regarding the     *
      *   options which might be considered for the definition of     *
      *   the required TD queues.                                     *
      *                                                               *
      *---------------------------------------------------------------*
      *                                                               *
      * DESCRIPTION                                                   *
      *                                                               *
      *   This program is part of a suite of programs DFH0BATx which  *
      *   is intended to aid the user in the identification and       *
      *   resolution of VSAM RLS retained locks. It may be modified   *
      *   as required by the customer.                                *
      *                                                               *
      *   This program coordinates the forcible release of retained   *
      *   locks for a set of named data sets on a group of            *
      *   named CICS regions. It is the top-level                     *
      *   program for transaction BAT3. It should be run on one       *
      *   CICS region in the sysplex, and uses DPL to run programs    *
      *   DFH0BAT6 and DFH0BAT8 on the other CICS regions.            *
      *   DFH0BAT6 resolves indoubt units of work for a given data    *
      *   set, by forcibly backing them out. DFH0BAT8 forcibly        *
      *   releases retained locks for a given dataset. Any messages   *
      *   arising from the DFH0BAT6/8 invocations are received via    *
      *   a temporary storage queue DFH0BQ3 and are displayed using   *
      *   a BMS mapset DFH0BM3.                                       *
      *                                                               *
      *   The program is structured as a loop through all the data    *
      *   sets we are interested in. For each dataset, DFH0BAT6 is    *
      *   called to forcibly backout indoubts on each CICS region,    *
      *   then DFH0BAT8 is called to forcibly release retained locks  *
      *   on each CICS region, then any messages are displayed on     *
      *   the map. Then we do the same for the next data set.         *
      *                                                               *
      *   The names of the data sets that we are interested in are    *
      *   obtained by reading extra-partition TD queue 'BATD'.        *
      *   The specific applids of the CICS regions are obtained       *
      *   by reading extra-partition TD queue 'BATA'.                 *
      *                                                               *
      *   MRO links are assumed to exist from the coordinating CICS   *
      *   region, ie, that running DFH0BAT3, and all the other CICS   *
      *   regions, ie, those running DFH0BAT6/8.                      *
      *    these samples assume that there is only one connection     *
      *    associated with a given netname.                           *
      *    if there is a desire to say, have a LU6.2,                 *
      *    as well as a MRO, connection associated with a             *
      *    given netname then it will be necessary to modify          *
      *    THIS CODE.                                                 *
      *    One might, for instance, following an INQUIRE CONNECTION   *
      * with a response which is not 'normal', decide to brows the    *
      *    connections associated with the co-ordinating region,      *
      *    until one is found which has the required netname,         *
      *    is of type MRO and is available for use.                   *
      *                                                               *
      *   NOTE: It is important to resolve indoubt units of work      *
      *   first, because they may fail backout and therefore the      *
      *   retained locks will remain. This sample takes the decision  *
      *   to always backout indoubts - the customer can change this   *
      *   to always commit indoubts or to use the value specified on  *
      *   the ACTION parameter of the TRANSACTION definition. One     *
      *   advantage of specifying backout is that diagnostic          *
      *   information is written about the log records which are      *
      *   forced to backout.                                          *
      *                                                               *
      *   **********************************************************  *
      *   *** WARNING. RUNNING THIS PROGRAM CAN RESULT IN A LOSS ***  *
      *   *** OF DATA INTEGRITY AS RETAINED LOCKS WILL BE        ***  *
      *   *** FORCIBLY RELEASED !!                               ***  *
      *   **********************************************************  *
      *                                                               *
      *---------------------------------------------------------------*
      *                                                               *
      * CHANGE ACTIVITY :                                             *
      *                                                               *
      *  $MOD(DFH0BAT3),COMP(SAMPLES),PROD(CICS TS ):                 *
      *                                                               *
      *  PN= REASON REL YYMMDD HDXXIII : REMARKS                      *
      * $L0= 654    510 941010 HDMMFM  : Created                      *
      * $L1= 654    510 941202 HD9ZSMH : Use new INQ NETNAME for MRO  *
      * $L2= 654    510 950209 HDMMFM  : Code Review work             *
      * $P1= M93569 510 950105 HD9ZSMH : Correct comment              *
      * $P2= M95451 510 950925 HDAVCMM : Correct some comments        *
      * $P3= M95973 510 951212 HDMMFM  : PTM 95973                    *
      * $P4= M96436 510 960201 HD6ACPA : SMALL FIX TO SAMPLES.        *
      * $P5= M96562 510 960307 HDMMFM  : PTM 96562                    *
      * $D1= I07206 620 010430 HD7OPJW : Remove support for old compi *
      *                                                               *
      *****************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. DFH0BAT3.

       ENVIRONMENT DIVISION.
           EJECT.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
      *****************************************************************
      * Names for the extra-partition TD queues.
      * Two TD queues are used. One contains the data set names of
      * the data sets we are interested in. The other contains the
      * applids of the CICS regions which use the data sets.
      *****************************************************************
       77  TDQ-APPL-NAME             PIC X(4) VALUE 'BATA'.
       77  TDQ-DSET-NAME             PIC X(4) VALUE 'BATD'.
      *****************************************************************
      * Record for applids TD queue
      *****************************************************************
       01  TDQ-APPL-RECORD.
         03  TDQ-APPLID    PIC X(8).
         03  REST-OF-CHARS PIC X(72).
      *****************************************************************
      * Record for data sets TD queue
      *****************************************************************
       01  TDQ-DSET-RECORD.
         03  TDQ-DSNAME    PIC X(44).
         03  REST-OF-CHARS PIC X(36).
      *****************************************************************
      * Copy book for record for TS queue DFH0BQ3. A record is
      * written to this queue if any errors arise when forcing
      * indoubts and forcing retained locks.
      *****************************************************************
       COPY DFH0BC31.
      *****************************************************************
      * Various variables used throughout the program.
      *****************************************************************
       77  APPL-REMAINING            PIC X.
       77  DSET-REMAINING            PIC X.
       77  BMS-REMAINING             PIC X.
       77  ANY-BMS-OUTPUT            PIC X.
       77  CONNECTION-GOOD           PIC X.
       77  VALID-INPUT               PIC X.
       77  CONFIRM                   PIC X.

       77  REMOTE-APPLID             PIC X(8).
       77  REMOTE-SYSID              PIC X(4).
       77  COORD-SYSID               PIC X(4).
       77  COORD-APPLID              PIC X(8).
       77  NEXT-SYSID                PIC X(4).
       77  NEXT-APPLID               PIC X(8).
       77  CONN-STAT                 PIC S9(8) COMP.
       77  SERV-STAT                 PIC S9(8) COMP.

       77  TDQ-NAME                  PIC X(4).
       77  DPL-PROG-NAME             PIC X(8).
       77  LINK-RESP                 PIC S9(8) COMP.
       77  LINK-RESP2                PIC S9(8) COMP.
       77  INQ-RESP                  PIC S9(8) COMP.
       77  INQ-RESP2                 PIC S9(8) COMP.
       77  READQ-RESP                PIC S9(8) COMP.
       77  READQ-RESP2               PIC S9(8) COMP.

       77  MAPSET-NAME               PIC X(8).
       77  MAP-NAME                  PIC X(8).
       77  BMS-ELEMENTS              PIC 99 COMP.
       77  DSET-SCRN-COUNT           PIC S9(4) COMP.
       77  DSET-SCRN-TOTAL           PIC S9(4) COMP.
       77  NUM-ITEMS                 PIC S9(4) COMP.
       77  CURR-DSNAME               PIC X(44).
       77  MAP-MESSAGE               PIC X(20).
       77  MAP-MSG-COLOR             PIC X.
       77  MAP-APPLID                PIC X(8).
       77  MAP-RESP                  PIC X(12).
       77  MAP-RESP2                 PIC X(8).
      *****************************************************************
      * Screen output messages
      *****************************************************************
       77  ENDED-MESSAGE             PIC X(24)
               VALUE 'Force locks sample ended'.
       77  ABANDON-MESSAGE           PIC X(42)
               VALUE 'Force locks abandoned - no locks released'.
       77  INVALID-MESSAGE           PIC X(19)
               VALUE 'Invalid key pressed'.
       77  NO-ERRORS-MESSAGE         PIC X(43)
               VALUE 'No errors when releasing locks for data set'.
       77  PROCESSING-MESSAGE        PIC X(38)
               VALUE 'Processing next data set...please wait'.
      *****************************************************************
      * Copy books for BMS mapset DFH0BM3. Map BAM32 displays messages
      * that were written to TS queue DFH0BQ3. Map BAM31 asks for
      * confirmation that the customer understands that loss of
      * data integrity may occur.
      *****************************************************************
       COPY DFH0BM3O.
       COPY DFH0BM3O REPLACING ==BAM31I== BY ==TMP31I==
                               ==BAM31O== BY ==TMP31O==
                               ==BAM32I== BY ==TMP32I==
                               ==BAM32O== BY ==TMP32O==.
       COPY DFHAID.
       COPY DFHBMSCA.
      *****************************************************************
      * Copy book for commarea to be passed to DFH0BAT6/8.
      *****************************************************************
       COPY DFH0BC32.

       LINKAGE SECTION.
           EJECT.

      *****************************************************************
      ***                 Batch Enabling Sample 3                   ***
      ***             Force Retained Locks Coordinator              ***
      *****************************************************************
       PROCEDURE DIVISION USING DFHEIBLK.

      *---------------------------------------------------------------*
      * Main processing starts here.
      *---------------------------------------------------------------*

       MAIN-PROCESSING SECTION.

      *****************************************************************

      *****************************************************************
      * Carry out any initialization.
      *****************************************************************
           PERFORM INITIALIZATION.
      *****************************************************************
      * Display data integrity warning and get confirmation that the
      * customer understands that loss of data integrity may occur,
      * using mapset DFH0BM3 (map BAM31). If the customer
      * does not confirm positively, terminate immediately.
      *****************************************************************
           MOVE 'N' TO CONFIRM.
           PERFORM GET-CONFIRMATION.
           IF CONFIRM NOT = 'Y'
             EXEC CICS SEND TEXT
                  FROM(ABANDON-MESSAGE)
                  ERASE
             END-EXEC
           ELSE
      *****************************************************************
      * Otherwise the customer has confirmed positively.
      * Forcibly release retained locks for all datasets on all
      * CICS regions and display the results on the map.
      *****************************************************************
             MOVE 'Y' TO DSET-REMAINING
             PERFORM PROCESS-DATA-SETS
               UNTIL DSET-REMAINING = 'N'
      *****************************************************************
      * Output termination message.
      *****************************************************************
             EXEC CICS SEND TEXT
                  FROM(ENDED-MESSAGE)
                  ERASE
             END-EXEC
           END-IF.
      *****************************************************************
      * End the program and return to CICS.
      *****************************************************************
           EXEC CICS RETURN
           END-EXEC.

       MAIN-PROCESSING-EXIT.
           GOBACK.
           EJECT
      *---------------------------------------------------------------*
      * Procedures start here.
      *---------------------------------------------------------------*

      *---------------------------------------------------------------*
      * Procedure to carry out any initialization.
      *---------------------------------------------------------------*
       INITIALIZATION SECTION.
      *****************************************************************
      * Initialise the commarea to be passed to DFH0BAT6/8.
      *****************************************************************
           MOVE SPACES TO COMMAREA-3.
      *****************************************************************
      * Get the applid and sysid of our own CICS region.
      *****************************************************************
           EXEC CICS ASSIGN
                APPLID(COORD-APPLID)
                SYSID(COORD-SYSID)
           END-EXEC.
      *****************************************************************
      * Reset the data sets TD queue to the beginning. This TD queue
      * is only read locally.
      *****************************************************************
           MOVE TDQ-DSET-NAME TO TDQ-NAME.
           PERFORM RESET-TD-QUEUE.

       INITIALIZATION-EXIT.
           EXIT.
           EJECT
      *---------------------------------------------------------------*
      * Procedure to read the data set TD queue. For each data set
      * we force indoubts then forcibly release retained locks
      * on all the CICS regions.
      *---------------------------------------------------------------*
       PROCESS-DATA-SETS SECTION.
      *****************************************************************
      * Read the next data set name off the TD queue.
      *****************************************************************
           MOVE SPACES TO TDQ-DSET-RECORD.
           EXEC CICS READQ TD
                QUEUE(TDQ-DSET-NAME)
                INTO(TDQ-DSET-RECORD)
                LENGTH(LENGTH OF TDQ-DSET-RECORD)
                RESP(READQ-RESP)
                RESP2(READQ-RESP2)
           END-EXEC.
      *****************************************************************
      * If the read was successful, then force indoubts and forcibly
      * release retained locks for the data set.
      * Otherwise assume that we have reached the end of the data sets
      * TD queue. Any serious error will cause a message to be
      * written to the TS queue.
      *****************************************************************
           EVALUATE READQ-RESP
             WHEN DFHRESP(NORMAL)
               PERFORM RELEASE-RETLOCKS
             WHEN DFHRESP(LENGERR)
               PERFORM RELEASE-RETLOCKS
             WHEN DFHRESP(QZERO)
               MOVE 'N' TO DSET-REMAINING
             WHEN OTHER
               MOVE SPACES TO TSQ-APPLID
               MOVE 'BATD failure' TO TSQ-ERR-MSG
               MOVE TDQ-DSNAME TO TSQ-DSNAME
               MOVE READQ-RESP TO TSQ-RESP
               MOVE READQ-RESP2 TO TSQ-RESP2
               PERFORM WRITE-TSQ-RECORD
               MOVE 'N' TO DSET-REMAINING
           END-EVALUATE.

       PROCESS-DATA-SETS-EXIT.
           EXIT.
           EJECT
      *---------------------------------------------------------------*
      * Procedure to force indoubts and forcibly release retained
      * locks on each CICS region, for a given dataset.
      *---------------------------------------------------------------*
       RELEASE-RETLOCKS SECTION.
      *****************************************************************
      * Set the data set name in the commarea for DFH0BAT6/8.
      *****************************************************************
           MOVE TDQ-DSNAME TO CURR-DSNAME.
           MOVE TDQ-DSNAME TO CA-DSNAME.
      *****************************************************************
      * Output that we are starting processing for this dataset.
      *****************************************************************
           EXEC CICS SEND TEXT
                FROM(PROCESSING-MESSAGE)
                WAIT
                ERASE
           END-EXEC.
      *****************************************************************
      * Delete the TS queue to remove information for any previous
      * data set.
      *****************************************************************
           PERFORM DELETE-TSQ.
      *****************************************************************
      * Reset the applids TD queue to the beginning. This TD queue
      * is only read locally.
      *****************************************************************
           MOVE TDQ-APPL-NAME TO TDQ-NAME.
           PERFORM RESET-TD-QUEUE.
      *****************************************************************
      * Read all the applid records in the TD queue.
      * For each applid found perform a DPL link to DFH0BAT6 to
      * force indoubt units of work for the data set.
      * Any error messages will be written to the TS queue.
      *****************************************************************
           MOVE 'DFH0BAT6' TO DPL-PROG-NAME.
           MOVE 'Y' TO APPL-REMAINING.
           PERFORM PROCESS-APPLIDS
             UNTIL APPL-REMAINING = 'N'.
      *****************************************************************
      * Forcing indoubts is an asynchronous operation.
      * So delay for a short while to let this complete throughout
      * the sysplex. The customer can change this time if desired.
      *****************************************************************
           EXEC CICS DELAY
                FOR SECONDS(10)
           END-EXEC.
      *****************************************************************
      * Reset the applids TD queue to the beginning again.
      *****************************************************************
           MOVE TDQ-APPL-NAME TO TDQ-NAME.
           PERFORM RESET-TD-QUEUE.
      *****************************************************************
      * Read all the applid records in the TD queue.
      * For each applid found perform a DPL link to DFH0BAT8 to
      * forcibly release retained locks for the data set.
      * Any error messages will be written to the TS queue.
      *****************************************************************
           MOVE 'DFH0BAT8' TO DPL-PROG-NAME.
           MOVE 'Y' TO APPL-REMAINING.
           PERFORM PROCESS-APPLIDS
             UNTIL APPL-REMAINING = 'N'.
      *****************************************************************
      * If there are messages on the TS queue, display
      * them via mapset DFH0BM3 (map BAM32).
      *****************************************************************
           MOVE 'Y' TO BMS-REMAINING.
           MOVE 'N' TO ANY-BMS-OUTPUT.
           MOVE 0 TO BMS-ELEMENTS.
           PERFORM CALCULATE-SCREENS.
           MOVE LOW-VALUES TO BAM32O.
           PERFORM PROCESS-BMS
             UNTIL BMS-REMAINING = 'N'.
      *****************************************************************
      * If there were no messages on the TS queue, send map BAM32
      * with a no errors message.
      *****************************************************************
           IF ANY-BMS-OUTPUT = 'N'
             MOVE DFHNEUTR TO MSGLIN2C OF BAM32O
             MOVE NO-ERRORS-MESSAGE TO MSGLIN2O OF BAM32O
             PERFORM SEND-BMS
           END-IF.
      *****************************************************************
      * Delete the TS queue ready for the next data set
      *****************************************************************
           PERFORM DELETE-TSQ.

       RELEASE-RETLOCKS-EXIT.
           EXIT.
           EJECT
      *---------------------------------------------------------------*
      * Procedure to read the applid TD queue. For each applid,
      * we DPL to DFH0BAT6/8 on the remote CICS region corresponding
      * to the applid.
      *---------------------------------------------------------------*
       PROCESS-APPLIDS SECTION.
      *****************************************************************
      * Read the next applid off the TD queue.
      *****************************************************************
           MOVE SPACES TO TDQ-APPL-RECORD.
           EXEC CICS READQ TD
                QUEUE(TDQ-APPL-NAME)
                INTO(TDQ-APPL-RECORD)
                LENGTH(LENGTH OF TDQ-APPL-RECORD)
                RESP(READQ-RESP)
                RESP2(READQ-RESP2)
           END-EXEC.
      *****************************************************************
      * If the read was successful, then get ready to call DFH0BAT6/8
      * on the remote system. Otherwise assume that we have reached
      * the end of the applids TD queue. Any serious error will cause
      * a message to be written to the TS queue.
      *****************************************************************
           IF READQ-RESP = DFHRESP(NORMAL)
             PERFORM DPL-LINK
           ELSE
             MOVE 'N' TO APPL-REMAINING
           END-IF.

       PROCESS-APPLIDS-EXIT.
           EXIT.
           EJECT
      *---------------------------------------------------------------*
      * Procedure to perform a DPL to DFH0BAT6/8 on the remote
      *---------------------------------------------------------------*
      * LINK).
      *---------------------------------------------------------------*
       DPL-LINK SECTION.
      *****************************************************************
      * Before we call DFH0BAT6/8, convert the applid to a sysid. We
      * must do this because DPL requires a sysid, and it also lets us
      * check that the connection to the remote system exists and is
      * working. (No need to do this if applid is our own).
      *****************************************************************
           MOVE TDQ-APPLID TO REMOTE-APPLID.
           IF REMOTE-APPLID NOT = COORD-APPLID
             PERFORM CHECK-CONNECTION
           ELSE
             MOVE 'Y' TO CONNECTION-GOOD
             MOVE COORD-SYSID TO REMOTE-SYSID
           END-IF.
      *****************************************************************
      * If connection is ok then DPL to DFH0BAT6/8.
      * The commarea contains the name of the data set.
      *****************************************************************
           IF CONNECTION-GOOD = 'Y'
             EXEC CICS LINK
                  PROGRAM(DPL-PROG-NAME)
                  COMMAREA(COMMAREA-3)
                  LENGTH(LENGTH OF COMMAREA-3)
                  SYSID(REMOTE-SYSID)
                  RESP(LINK-RESP)
                  RESP2(LINK-RESP2)
             END-EXEC
      *****************************************************************
      * If the DPL failed, write this to the TS queue, so it will be
      * displayed later on in the map.
      *****************************************************************
             IF LINK-RESP NOT = DFHRESP(NORMAL)
               MOVE 'DPL failure' TO TSQ-ERR-MSG
               MOVE REMOTE-APPLID TO TSQ-APPLID
               MOVE CURR-DSNAME TO TSQ-DSNAME
               MOVE LINK-RESP TO TSQ-RESP
               MOVE LINK-RESP2 TO TSQ-RESP2
               PERFORM WRITE-TSQ-RECORD
             END-IF
           END-IF.

       DPL-LINK-EXIT.
           EXIT.
           EJECT
      *---------------------------------------------------------------*
      * Procedure to check if a connection to a remote CICS region
      * exists and is both in service and acquired.
      *---------------------------------------------------------------*
       CHECK-CONNECTION SECTION.
      *****************************************************************
      * Assume connection is not ok.
      *****************************************************************
           MOVE 'N' TO CONNECTION-GOOD.
           MOVE 'Bad netname' TO TSQ-ERR-MSG.
      *****************************************************************
      * Use the applid to obtain the sysid. If no sysid can be found
      * then no connection exists to the remote region.
      *****************************************************************
           EXEC CICS INQUIRE NETNAME(REMOTE-APPLID)
                REMOTESYSTEM(REMOTE-SYSID)
                RESP(INQ-RESP)
                RESP2(INQ-RESP2)
           END-EXEC.
      *****************************************************************
      * If a connection exists to the remote region, use the sysid
      * to see if the connection is in service and acquired.
      *****************************************************************
           IF INQ-RESP = DFHRESP(NORMAL)
             MOVE 'Connect out' TO TSQ-ERR-MSG
             EXEC CICS INQUIRE CONNECTION(REMOTE-SYSID)
                  CONNSTATUS(CONN-STAT)
                  SERVSTATUS(SERV-STAT)
                  RESP(INQ-RESP)
                  RESP2(INQ-RESP2)
             END-EXEC
      *****************************************************************
      * If the connection is ok, set the connection ok flag.
      *****************************************************************
             IF INQ-RESP = DFHRESP(NORMAL)
               IF CONN-STAT = DFHVALUE(ACQUIRED) AND
                  SERV-STAT = DFHVALUE(INSERVICE)
                 MOVE 'Y' TO CONNECTION-GOOD
               END-IF
             END-IF
           END-IF.
      *****************************************************************
      * If the connection ok flag is not set, the connection is not
      * available. Write this to the TS queue, so it will be
      * displayed later on in the map. (The message text is already
      * set up in TSQ-ERR-MSG - see above).
      *****************************************************************
           IF CONNECTION-GOOD = 'N'
             MOVE REMOTE-APPLID TO TSQ-APPLID
             MOVE CURR-DSNAME TO TSQ-DSNAME
             MOVE INQ-RESP TO TSQ-RESP
             MOVE INQ-RESP2 TO TSQ-RESP2
             PERFORM WRITE-TSQ-RECORD
           END-IF.

       CHECK-CONNECTION-EXIT.
           EXIT.
           EJECT
      *---------------------------------------------------------------*
      * Procedure to reset a TD queue back to the beginning.
      * This is achieved by setting it closed and open.
      *---------------------------------------------------------------*
       RESET-TD-QUEUE SECTION.
           EXEC CICS SET TDQUEUE(TDQ-NAME)
                ENABLED
                CLOSED
           END-EXEC.
           EXEC CICS SET TDQUEUE(TDQ-NAME)
                ENABLED
                OPEN
           END-EXEC.

       RESET-TD-QUEUE-EXIT.
           EXIT.
           EJECT
      *---------------------------------------------------------------*
      * Procedure to read a record from the TS queue containing
      * error message information and display the results on a map.
      * The map is sent either when it is full or when the messages
      * are exhausted.
      *---------------------------------------------------------------*
       PROCESS-BMS SECTION.
      *****************************************************************
      * Read the next record from the TS queue
      *****************************************************************
           EXEC CICS READQ TS
                QUEUE(TSQ-RELEASE-NAME)
                INTO(TSQ-RELEASE-RECORD)
                RESP(READQ-RESP)
           END-EXEC.
      *****************************************************************
      * If the read was successful then build the map. Otherwise
      * assume that we have reached the end of the queue.
      *****************************************************************
           IF READQ-RESP = DFHRESP(NORMAL)
             MOVE 'Y' TO ANY-BMS-OUTPUT
             PERFORM BUILD-BMS
           ELSE
      *****************************************************************
      * We have reached the end of the TS queue. Send the map as it
      * currently stands if it is not empty.
      *****************************************************************
             IF BMS-ELEMENTS > 0
               PERFORM SEND-BMS
             END-IF
             MOVE 'N' TO BMS-REMAINING
           END-IF.

       PROCESS-BMS-EXIT.
           EXIT.
           EJECT
      *---------------------------------------------------------------*
      * Procedure to add a message to the map. The map is displayed
      * if it has filled up.
      *---------------------------------------------------------------*
       BUILD-BMS SECTION.
           IF BMS-ELEMENTS = 10
             PERFORM SEND-BMS
           END-IF.
           PERFORM BUILD-MAP-ENTRY.
           PERFORM BUILD-MAP.

       BUILD-BMS-EXIT.
           EXIT.
           EJECT
      *---------------------------------------------------------------*
      * Procedure to send map BAM32 and receive it back again until
      * valid input has been received.
      *---------------------------------------------------------------*
       SEND-BMS SECTION.
      *****************************************************************
      * Fill in the remaining map fields.
      * When complete save the map in case we need to redisplay.
      *****************************************************************
           MOVE 0 TO BMS-ELEMENTS.
           ADD 1 TO DSET-SCRN-COUNT.
           MOVE DSET-SCRN-COUNT TO DSETCNTO OF BAM32O.
           MOVE DSET-SCRN-TOTAL TO DSETTOTO OF BAM32O.
           MOVE CURR-DSNAME TO DSNAMEO OF BAM32O.
           MOVE COORD-APPLID TO MYAPPL2O OF BAM32O.
           MOVE 'DFH0BM3' TO MAPSET-NAME.
           MOVE 'BAM32' TO MAP-NAME.
           MOVE BAM32O TO TMP32O.
      *****************************************************************
      * Send the map.
      *****************************************************************
           EXEC CICS SEND
                MAP(MAP-NAME)
                MAPSET(MAPSET-NAME)
                FROM(BAM32O)
                ERASE
                FREEKB
           END-EXEC.
      *****************************************************************
      * Receive the map until valid input has been entered.
      *****************************************************************
           MOVE 'N' TO VALID-INPUT.
           PERFORM WITH TEST AFTER
             UNTIL VALID-INPUT = 'Y'
             EXEC CICS RECEIVE
                  MAP(MAP-NAME)
                  MAPSET(MAPSET-NAME)
                  INTO(BAM32I)
                  NOHANDLE
             END-EXEC
      *****************************************************************
      * If F3 or F12 has been pressed, flag the end of all processing.
      * If F8 has been pressed, continue. If F4 has been pressed,
      * skip to the next data set. Anything else is invalid -
      * resend the map.
      *****************************************************************
             EVALUATE EIBAID
               WHEN DFHPF3
                 MOVE 'N' TO BMS-REMAINING
                 MOVE 'N' TO DSET-REMAINING
                 MOVE 'Y' TO VALID-INPUT
               WHEN DFHPF12
                 MOVE 'N' TO BMS-REMAINING
                 MOVE 'N' TO DSET-REMAINING
                 MOVE 'Y' TO VALID-INPUT
               WHEN DFHPF4
                 MOVE 'N' TO BMS-REMAINING
                 MOVE 'Y' TO VALID-INPUT
               WHEN DFHPF8
                 MOVE 'Y' TO VALID-INPUT
               WHEN OTHER
                 MOVE TMP32O TO BAM32O
                 MOVE DFHYELLO TO MSGLIN2C OF BAM32O
                 MOVE INVALID-MESSAGE TO MSGLIN2O OF BAM32O
                 EXEC CICS SEND
                      MAP(MAP-NAME)
                      MAPSET(MAPSET-NAME)
                      FROM(BAM32O)
                      ERASE
                      ALARM
                      FREEKB
                 END-EXEC
             END-EVALUATE
           END-PERFORM.
      *****************************************************************
      * Clear the current contents of map BAM32.
      *****************************************************************
           MOVE LOW-VALUES TO BAM32O.

       SEND-BMS-EXIT.
           EXIT.
           EJECT
      *---------------------------------------------------------------*
      * Procedure to build a map entry from TS queue information.
      *---------------------------------------------------------------*
       BUILD-MAP-ENTRY SECTION.
      ****************************************************************
      * The TS queue record contains an error message.
      * Translate the error EIBRESP value into text.
      ****************************************************************
           MOVE TSQ-APPLID TO MAP-APPLID.
           MOVE TSQ-ERR-MSG TO MAP-MESSAGE.
           MOVE DFHYELLO TO MAP-MSG-COLOR.
           MOVE TSQ-RESP2 TO MAP-RESP2.
           EVALUATE TSQ-RESP
             WHEN DFHRESP(NORMAL)
               MOVE SPACES TO MAP-RESP
               MOVE SPACES TO MAP-RESP2
             WHEN DFHRESP(INVREQ)
               MOVE 'INVREQ' TO MAP-RESP
             WHEN DFHRESP(NOTAUTH)
               MOVE 'NOTAUTH' TO MAP-RESP
             WHEN DFHRESP(LENGERR)
               MOVE 'LENGERR' TO MAP-RESP
             WHEN DFHRESP(PGMIDERR)
               MOVE 'PGMIDERR' TO MAP-RESP
             WHEN DFHRESP(SYSIDERR)
               MOVE 'SYSIDERR' TO MAP-RESP
             WHEN DFHRESP(TERMERR)
               MOVE 'TERMERR' TO MAP-RESP
             WHEN DFHRESP(TERMIDERR)
               MOVE 'TERMIDERR' TO MAP-RESP
             WHEN DFHRESP(DSNNOTFOUND)
               MOVE 'DSNNOTFOUND' TO MAP-RESP
             WHEN DFHRESP(DISABLED)
               MOVE 'DISABLED' TO MAP-RESP
             WHEN DFHRESP(IOERR)
               MOVE 'IOERR' TO MAP-RESP
             WHEN DFHRESP(QIDERR)
               MOVE 'QIDERR' TO MAP-RESP
             WHEN DFHRESP(NOTOPEN)
               MOVE 'NOTOPEN' TO MAP-RESP
             WHEN DFHRESP(ISCINVREQ)
               MOVE 'ISCINVREQ' TO MAP-RESP
             WHEN DFHRESP(END)
               MOVE SPACES TO MAP-RESP
               MOVE SPACES TO MAP-RESP2
             WHEN OTHER
               MOVE '??????' TO MAP-RESP
           END-EVALUATE.

       BUILD-MAP-ENTRY-EXIT.
           EXIT.
           EJECT
      *---------------------------------------------------------------*
      * Procedure to add a map entry to the map.
      *---------------------------------------------------------------*
       BUILD-MAP SECTION.
           ADD 1 TO BMS-ELEMENTS.
           EVALUATE BMS-ELEMENTS
             WHEN 1
               MOVE MAP-RESP TO RESP1O OF BAM32O
               MOVE MAP-RESP2 TO RESP21O OF BAM32O
               MOVE MAP-APPLID TO APPLID1O OF BAM32O
               MOVE MAP-MESSAGE TO MESSAG1O OF BAM32O
               MOVE MAP-MSG-COLOR TO MESSAG1C OF BAM32O
             WHEN 2
               MOVE MAP-RESP TO RESP2O OF BAM32O
               MOVE MAP-RESP2 TO RESP22O OF BAM32O
               MOVE MAP-APPLID TO APPLID2O OF BAM32O
               MOVE MAP-MESSAGE TO MESSAG2O OF BAM32O
               MOVE MAP-MSG-COLOR TO MESSAG2C OF BAM32O
             WHEN 3
               MOVE MAP-RESP TO RESP3O OF BAM32O
               MOVE MAP-RESP2 TO RESP23O OF BAM32O
               MOVE MAP-APPLID TO APPLID3O OF BAM32O
               MOVE MAP-MESSAGE TO MESSAG3O OF BAM32O
               MOVE MAP-MSG-COLOR TO MESSAG3C OF BAM32O
             WHEN 4
               MOVE MAP-RESP TO RESP4O OF BAM32O
               MOVE MAP-RESP2 TO RESP24O OF BAM32O
               MOVE MAP-APPLID TO APPLID4O OF BAM32O
               MOVE MAP-MESSAGE TO MESSAG4O OF BAM32O
               MOVE MAP-MSG-COLOR TO MESSAG4C OF BAM32O
             WHEN 5
               MOVE MAP-RESP TO RESP5O OF BAM32O
               MOVE MAP-RESP2 TO RESP25O OF BAM32O
               MOVE MAP-APPLID TO APPLID5O OF BAM32O
               MOVE MAP-MESSAGE TO MESSAG5O OF BAM32O
               MOVE MAP-MSG-COLOR TO MESSAG5C OF BAM32O
             WHEN 6
               MOVE MAP-RESP TO RESP6O OF BAM32O
               MOVE MAP-RESP2 TO RESP26O OF BAM32O
               MOVE MAP-APPLID TO APPLID6O OF BAM32O
               MOVE MAP-MESSAGE TO MESSAG6O OF BAM32O
               MOVE MAP-MSG-COLOR TO MESSAG6C OF BAM32O
             WHEN 7
               MOVE MAP-RESP TO RESP7O OF BAM32O
               MOVE MAP-RESP2 TO RESP27O OF BAM32O
               MOVE MAP-APPLID TO APPLID7O OF BAM32O
               MOVE MAP-MESSAGE TO MESSAG7O OF BAM32O
               MOVE MAP-MSG-COLOR TO MESSAG7C OF BAM32O
             WHEN 8
               MOVE MAP-RESP TO RESP8O OF BAM32O
               MOVE MAP-RESP2 TO RESP28O OF BAM32O
               MOVE MAP-APPLID TO APPLID8O OF BAM32O
               MOVE MAP-MESSAGE TO MESSAG8O OF BAM32O
               MOVE MAP-MSG-COLOR TO MESSAG8C OF BAM32O
             WHEN 9
               MOVE MAP-RESP TO RESP9O OF BAM32O
               MOVE MAP-RESP2 TO RESP29O OF BAM32O
               MOVE MAP-APPLID TO APPLID9O OF BAM32O
               MOVE MAP-MESSAGE TO MESSAG9O OF BAM32O
               MOVE MAP-MSG-COLOR TO MESSAG9C OF BAM32O
             WHEN 10
               MOVE MAP-RESP TO RESP0O OF BAM32O
               MOVE MAP-RESP2 TO RESP20O OF BAM32O
               MOVE MAP-APPLID TO APPLID0O OF BAM32O
               MOVE MAP-MESSAGE TO MESSAG0O OF BAM32O
               MOVE MAP-MSG-COLOR TO MESSAG0C OF BAM32O
           END-EVALUATE.

       BUILD-MAP-EXIT.
           EXIT.
           EJECT
      *---------------------------------------------------------------*
      * Procedure to write a TS record to DFH0BQ3.
      *---------------------------------------------------------------*
       WRITE-TSQ-RECORD SECTION.
           EXEC CICS WRITEQ TS
                QUEUE(TSQ-RELEASE-NAME)
                FROM(TSQ-RELEASE-RECORD)
                LENGTH(LENGTH OF TSQ-RELEASE-RECORD)
           END-EXEC.

       WRITE-TSQ-RECORD-EXIT.
           EXIT.
           EJECT
      *---------------------------------------------------------------*
      * Procedure to delete TS queue DFH0BQ3.
      *---------------------------------------------------------------*
       DELETE-TSQ SECTION.
           EXEC CICS DELETEQ TS
                QUEUE(TSQ-RELEASE-NAME)
                NOHANDLE
           END-EXEC.

       DELETE-TSQ-EXIT.
           EXIT.
           EJECT
      *---------------------------------------------------------------*
      * Procedure to calculate the number of screens that will
      * result from the data in the TS queue.
      *---------------------------------------------------------------*
       CALCULATE-SCREENS SECTION.
           MOVE 0 TO DSET-SCRN-COUNT.
           MOVE 1 TO DSET-SCRN-TOTAL.
           EXEC CICS INQUIRE TSQUEUE(TSQ-RELEASE-NAME)
                NUMITEMS(NUM-ITEMS)
                RESP(INQ-RESP)
           END-EXEC.
           IF INQ-RESP = DFHRESP(NORMAL)
             IF NUM-ITEMS > 0
               ADD 9 TO NUM-ITEMS
               DIVIDE NUM-ITEMS BY 10 GIVING DSET-SCRN-TOTAL
             END-IF
           END-IF.

       CALCULATE-SCREENS-EXIT.
           EXIT.
           EJECT
      *---------------------------------------------------------------*
      * Procedure to display a warning and get confirmation from
      * the customer that he understands that locks will be
      * forcibly released, which may result in a loss of data
      * integrity. This is done using map BAM31.
      *---------------------------------------------------------------*
       GET-CONFIRMATION SECTION.
      *****************************************************************
      * Fill in the map fields.
      * When complete save the map in case we need to redisplay.
      *****************************************************************
           MOVE LOW-VALUES TO BAM31O.
           MOVE COORD-APPLID TO MYAPPL1O OF BAM31O.
           MOVE 'DFH0BM3' TO MAPSET-NAME.
           MOVE 'BAM31' TO MAP-NAME.
           MOVE BAM31O TO TMP31O.
      *****************************************************************
      * Send the map.
      *****************************************************************
           EXEC CICS SEND
                MAP(MAP-NAME)
                MAPSET(MAPSET-NAME)
                FROM(BAM31O)
                FREEKB
                ERASE
           END-EXEC.
      *****************************************************************
      * Receive the map until valid input has been received.
      *****************************************************************
           MOVE 'N' TO VALID-INPUT.
           PERFORM WITH TEST AFTER
             UNTIL VALID-INPUT = 'Y'
             EXEC CICS RECEIVE
                  MAP(MAP-NAME)
                  MAPSET(MAPSET-NAME)
                  INTO(BAM31I)
                  NOHANDLE
             END-EXEC
      *****************************************************************
      * If F3 or F12 has been pressed, we will terminate.
      * If F4 has been pressed, we will continue.
      * Anything else is invalid - resend the map.
      *****************************************************************
             EVALUATE EIBAID
               WHEN DFHPF3
                 MOVE 'Y' TO VALID-INPUT
               WHEN DFHPF12
                 MOVE 'Y' TO VALID-INPUT
               WHEN DFHPF4
                 MOVE 'Y' TO VALID-INPUT
                 MOVE 'Y' TO CONFIRM
               WHEN OTHER
                 MOVE TMP31O TO BAM31O
                 MOVE DFHYELLO TO MSGLIN1C OF BAM31O
                 MOVE INVALID-MESSAGE TO MSGLIN1O OF BAM31O
                 EXEC CICS SEND
                      MAP(MAP-NAME)
                      MAPSET(MAPSET-NAME)
                      FROM(BAM31O)
                      ERASE
                      ALARM
                      FREEKB
                 END-EXEC
             END-EVALUATE
           END-PERFORM.

       GET-CONFIRMATION-EXIT.
           EXIT.
