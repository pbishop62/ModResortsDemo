         TITLE 'DFH$WBSR - CICS SAMPLE STATE HANDLER       - ASSEMBLER'
***********************************************************************
*                                                                     *
*                                                                     *
*                                                                     *
*     Licensed Materials - Property of IBM                            *
*                                                                     *
*     "Restricted Materials of IBM"                                   *
*                                                                     *
*     5655-Y04                                                        *
*                                                                     *
*     (C) Copyright IBM Corp. 1994"                                   *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*   STATUS = 7.2.0                                                    *
*                                                                     *
* CHANGE ACTIVITY :                                                   *
*                                                                     *
*   $MOD(DFH$WBSR),COMP(CICSWEB),PROD(CICS TS ):                      *
*                                                                     *
*  PN= REASON REL YYMMDD HDXXIII : REMARKS                            *
* $L0= Base   410 94     HD6NPRW : Base                               *
*                                                                     *
***********************************************************************
*                                                                     *
* MODULE NAME = DFH$WBSR                                              *
*                                                                     *
* DESCRIPTIVE NAME = Module to handle CICS transactions that          *
*                    wish to have state maintained on their           *
*                    behalf for a distributed enviroment writing      *
*                    the data to shared temporary storage queues.     *
*                                                                     *
*                    This program offers non terminal-oriented        *
*                    tasks, such as programs designed to interface    *
*                    with the WWW, a facility to allow one CICS       *
*                    task to save information to be retrieved by      *
*                    another task using a unique identifier which     *
*                    is stored elsewhere, for example in a hidden     *
*                    field in a form.                                 *
*                                                                     *
*                    This program writes data to temporary storage    *
*                    queues which can be defined as shared so that    *
*                    the state data can be accessed by different      *
*                    systems.                                         *
*                    The queue name begins with 'WBSH' followed by    *
*                    the low word of store clock function.            *
*                    This low word is the handle which is passed      *
*                    between this program and the application.        *
*                    Allows callers to CREATE, RETRIEVE, UPDATE       *
*                    and DESTROY state information                    *
*                                                                     *
*
*        Commarea Structure
*
COMMAREA DSECT
COMM_START DS 0F
EYECATCH DS  CL4                   * >STA
FUNCTION DS  XL1
CREATE   EQU   X'C3'               * Create a new handle and state stg
RETRIEVE EQU   X'D9'               * Retrieve state info for a handle
STORE    EQU   X'E2'               * Store state info for a handle
DESTROY  EQU   X'C4'               * Destroy handle and state stg
RETCODE  DS    XL1
GOODRC   EQU   X'0'
BADCOMRC EQU   X'1'
INVFUNRC EQU   X'2'
NOSTGRC  EQU   X'3'
NOMATRC  EQU   X'4'
TSWERRC  EQU   X'5'
LENGERR  EQU   X'6'
NOSTMPRC EQU   X'7'
BADQNMRC EQU   X'8'
TIMEFRC  EQU   X'9'
TSWER2RC EQU   X'A'
SDTSCERR EQU   X'B'
SDTSRERR EQU   X'C'
SDTSSERR EQU   X'D'
SDTSDERR EQU   X'E'
RESERVED DS    XL2
HANDLE   DS    F                   * Unique conversation id
USERDATA DS    XL256               * User state information
COMLEN   EQU   *-COMM_START        * Length of COMMAREA
*
*
R7       EQU   7
WK1      EQU   6
WK2      EQU   8
COMPTR   EQU   5                   Pointer to Commarea
SDTS_PTR EQU   10
*        This is the structure mapped on to our shared TS queue.      *
SDTS_AREA           DSECT
SDTS_EYECATCHER     DS   CL4
SDTS_TIMESTAMP      DS   PL8
SDTS_USER_DATA      DS   XL256
SDTS_LEN EQU *-SDTS_AREA Length of shared TS area
         EJECT ,
DFHEISTG DSECT
*
*        Working Storage
*
TEMP_TIME DS   PL8
CURRENT_TIME DS   PL8
TIME     DS   PL8
MESSAGES DS    CL80                TEMP STORE FOR MESSAGES
RESP     DS    1F                  RESPONSES TO CICS COMMANDS
TRANID   DS    CL4                 TRANSACTION IDENTIFIER
TSLEN    DS    H
ITEMNUM  DS    H
SDTS_WORK_AREA DS CL(SDTS_LEN)
SDTSNAME DS    0CL8
HIGHNAME DS    CL4
LOWNAME  DS    CL4
         EJECT ,
DFH$WBSR CSECT
DFH$WBSR AMODE 31
DFH$WBSR RMODE ANY
         XC   MESSAGES,MESSAGES                Clear message field
***********************************************************************
*        Issue an ENQ so that we have the State Management lock       *
***********************************************************************
         EXEC CICS ENQ RESOURCE(REMOTE_STATE_MANAGER)                  *
                       LENGTH(L'REMOTE_STATE_MANAGER)                  *
                       RESP(RESP)
CHKFUNC  DS    0H
***********************************************************************
*        If we get here, we have been linked to from another program  *
*        and we should always be called with a commarea.              *
***********************************************************************
         EXEC CICS ADDRESS COMMAREA(COMPTR)
         USING COMMAREA,COMPTR
         LTR   COMPTR,COMPTR
         BZ    BADCOM
         LH    R7,EIBCALEN
         LTR   R7,R7
         BZ    BADCOM
         MVI   RETCODE,GOODRC
***********************************************************************
*        Check the function code in the commarea to see why we have
*        been invoked, and call the appropriate routine.
***********************************************************************
         LA    SDTS_PTR,SDTS_WORK_AREA
         USING SDTS_AREA,SDTS_PTR
         L     R7,=AL4(CREATE_RTN)  If function is create
         CLI   FUNCTION,CREATE      invoke the CREATE routine
         BE    CALLFUNC
*
         L     R7,=AL4(RETRIEVE_RTN) If function is retrieve
         CLI   FUNCTION,RETRIEVE     invoke the RETRIEVE routine
         BE    CALLFUNC
*
         L     R7,=AL4(STORE_RTN)    If function is store
         CLI   FUNCTION,STORE        invoke the STORE routine
         BE    CALLFUNC
*
         L     R7,=AL4(DESTROY_RTN)  If function is destroy
         CLI   FUNCTION,DESTROY      invoke the destroy routine
         BE    CALLFUNC
***********************************************************************
*        We should not get here. If we do, issue an error message     *
***********************************************************************
         B     INVFUNC
CALLFUNC DS    0H
         BR    R7            Invoke the requested routine
ENDFUNC  DS    0H
***********************************************************************
*       If an error was raised, issue message to operator             *
***********************************************************************
         CLI   RETCODE,GOODRC
         BE    ENDNOERR
ENDFUNNC DS    0H
         EXEC CICS WRITE OPERATOR TEXT(MESSAGES) TEXTLENGTH(L'MESSAGES)
ENDNOERR DS    0H
***********************************************************************
*        Issue an DEQ to release the State Management lock            *
***********************************************************************
         EXEC CICS DEQ RESOURCE(REMOTE_STATE_MANAGER)                  *
                       LENGTH(L'REMOTE_STATE_MANAGER)                  *
                       RESP(RESP)
         EXEC CICS RETURN
         EJECT ,
***********************************************************************
*        Create the queue and set the handle.                         *
*        The method of token generation should be revised if          *
*        a more sophisticated method is required by the user.         *
***********************************************************************
CREATE_RTN  DS 0H
         STCK  TIME
         MVC   SDTS_EYECATCHER,=C'SDTS'
         MVC   HIGHNAME,=C'WBSH'
         MVC   LOWNAME,TIME+4
         MVC   SDTS_TIMESTAMP,TIME
         MVC   SDTS_USER_DATA,USERDATA
         MVC   TSLEN,=AL2(SDTS_LEN)
         EXEC CICS WRITEQ TS QUEUE(SDTSNAME) RESP(RESP)                *
               FROM(SDTS_AREA)                                         *
               LENGTH(TSLEN)
         CLC   RESP,DFHRESP(NORMAL)    Record written OK ?
         BNE   SH_TSWERR               No, check for no queue
         MVC   HANDLE,LOWNAME
         B     ENDFUNC
RETRIEVE_RTN  DS 0H
         SR    WK1,WK1
         LA    WK1,1(,WK1)
         STCM  WK1,B'0011',ITEMNUM
         MVC   HIGHNAME,=C'WBSH'
         MVC   LOWNAME,HANDLE
         MVC   TSLEN,=AL2(SDTS_LEN)
         EXEC CICS READQ TS QUEUE(SDTSNAME) INTO(SDTS_AREA)            *
         LENGTH(TSLEN) ITEM(ITEMNUM) RESP(RESP)
         CLC   RESP,DFHRESP(NORMAL)    Record read OK ?
         BNE   SH_NOQUE                No, check for no queue
         MVC   USERDATA,SDTS_USER_DATA
         B     ENDFUNC
STORE_RTN  DS 0H
         SR    WK1,WK1
         LA    WK1,1(,WK1)
         STCM  WK1,B'0011',ITEMNUM
         MVC   HIGHNAME,=C'WBSH'
         MVC   LOWNAME,HANDLE
         STCK  TIME
         MVC   SDTS_EYECATCHER,=C'SDTS'
         MVC   SDTS_TIMESTAMP,TIME
         MVC   SDTS_USER_DATA,USERDATA
         MVC   TSLEN,=AL2(SDTS_LEN)
         EXEC CICS WRITEQ TS QUEUE(SDTSNAME) RESP(RESP)                *
               FROM(SDTS_AREA)                                         *
               LENGTH(TSLEN)                                           *
               ITEM(ITEMNUM)                                           *
               REWRITE
         CLC   RESP,DFHRESP(NORMAL)    Record written OK ?
         BNE   SH_TSSERR               No, raise error
         B     ENDFUNC
DESTROY_RTN  DS 0H
         MVC   HIGHNAME,=C'WBSH'
         MVC   LOWNAME,HANDLE
         EXEC CICS DELETEQ TS QUEUE(SDTSNAME) RESP(RESP)
         CLC   RESP,DFHRESP(NORMAL)    Timestamp made OK ?
         BNE   SH_DELEFAIL
         B     ENDFUNC
*********************************************************************
*        Error Routines                                             *
*********************************************************************
BADCOM   DS    0H
         MVC   MESSAGES,=CL(L'MESSAGES)'Invalid Commarea passed.'
         B     ENDFUNNC
INVFUNC  DS    0H
         MVC   MESSAGES,=CL(L'MESSAGES)'Invalid function passed.'
         MVI   RETCODE,INVFUNRC
         B     ENDFUNC
SH_TSWERR DS    0H
         MVC   MESSAGES,=CL(L'MESSAGES)'Initial TS write has failed.'
         MVI   RETCODE,SDTSCERR
         B     ENDFUNC
SH_NOQUE DS    0H
         MVC   MESSAGES,=CL(L'MESSAGES)'Read TS has failed.'
         MVI   RETCODE,SDTSRERR
         B     ENDFUNC
SH_TSSERR DS    0H
         MVC   MESSAGES,=CL(L'MESSAGES)'Store function has failed.'
         MVI   RETCODE,SDTSSERR
         B     ENDFUNC
SH_DELEFAIL DS 0H
         MVC   MESSAGES,=CL(L'MESSAGES)'Delete function has failed.'
         MVI   RETCODE,SDTSDERR
         B     ENDFUNC
*
*
*        CONSTANTS
*
COMM_EYE_INIT DC CL4'>STA'
REMOTE_STATE_MANAGER DC  CL13'REMOTE_STATE_MANAGER'
*
         LTORG
         END
