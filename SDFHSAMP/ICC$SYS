//*******************************************************************
//
// Module Name: ICC$SYS
//
// Description:
//    This sample program demonstrates how the object model for the
//    CICS SPI might look in the Foundation classes.
//
//
//
//     Licensed Materials - Property of IBM
//
//     "Restricted Materials of IBM"
//
//     5655-Y04
//
//     (C) Copyright IBM Corp. 1998"
//
//
//
//
// Status = %SP00
//
//-------------------------------------------------------------------
//
// Change Activity:                                                *
//                                                                 *
//   $MOD(ICC$SYS),COMP(CEZANNE),PROD(CICS TS ):                   *
//
//   PN= REASON REL YYMMDD HDXIII : REMARKS
//  $P0= M30492 530 981109 HDGYBS : Creation
//  $P1= M30696 530 981218 HDGYBS : Fix sample c++ programs
//
//*******************************************************************
#include "icceh.hpp"  //CICS C++ Foundation Classes header files
#include "iccmain.hpp"  //CICS C++ Foundation Classes main() stub

void IccUserControl::run()
{
  IccTerminal* term = terminal();
  IccSystem* sys  = system();
  void* pBuffer;
  term->erase();
  term->sendLine( "This is program 'icc$sys'..." );
  term->setNewLine();
  term->sendLine( "applName=%s operatingSystem=%c "
                  "operatingSystemLevel=%d",
                  sys->applName(),
                  sys->operatingSystem(),
                  sys->operatingSystemLevel() );
  term->sendLine( "releaseText=[%s] sysidnt=%s",
                  sys->releaseText(),
                  sys->sysId().name() );

  //Storage services...
  term->sendLine( "getStorage( 5678, 'Y')...");
  pBuffer = sys->getStorage( 5678, 'Y' );  //get shared storage
  term->sendLine( 65, "<%s>",sys->conditionText());
  term->sendLine( "freeStorage( p )...");  //free storage
  sys->freeStorage( pBuffer );
  term->sendLine( 65, "<%s>",sys->conditionText());

  IccFileId fileId( "ICCKFILE" );
  IccFile file( fileId );
  IccFile* pFile;

  term->sendLine("Checking attributes of a named file (%s)...",
                  file.name() );
  pFile = sys->getFile( fileId );
  term->sendLine(">%s< Add=%s Brw=%s Del=%s Read=%s Upd=%s"
                 "op=%ld en=%ld",
                 pFile->name(),
                 Icc::boolText( pFile->isAddable() ),
                 Icc::boolText( pFile->isBrowsable() ),
                 Icc::boolText( pFile->isDeletable() ),
                 Icc::boolText( pFile->isReadable() ),
                 Icc::boolText( pFile->isUpdatable() ),
                 pFile->openStatus(),
                 pFile->enableStatus() );
  term->sendLine("accessMethod=%ld isRecoverable=%s "
                 "keyLength=%ld keyPosition=%ld",
                 file.accessMethod(),
                 Icc::boolText( file.isRecoverable() ),
                 file.keyLength(), file.keyPosition() );
  term->sendLine("setStatus( closed ) ..." );
  file.setStatus( IccFile::closed );
  term->sendLine(65,"<%s>", file.conditionText() );
  term->sendLine("setStatus( disabled ) ..." );
  file.setStatus( IccFile::disabled );
  term->sendLine(65,"<%s>", file.conditionText() );
  term->sendLine("setAccess( notUpdatable ) ..." );
  file.setAccess( IccFile::notUpdatable );
  term->sendLine(65,"<%s>", file.conditionText() );

  pFile = sys->getFile( fileId );
  term->sendLine(">%s< Add=%s Brw=%s Del=%s Read=%s Upd=%s "
                 "op=%ld en=%ld",
                 pFile->name(),
                 Icc::boolText( pFile->isAddable() ),
                 Icc::boolText( pFile->isBrowsable() ),
                 Icc::boolText( pFile->isDeletable() ),
                 Icc::boolText( pFile->isReadable() ),
                 Icc::boolText( pFile->isUpdatable() ),
                 pFile->openStatus(),
                 pFile->enableStatus() );
  term->sendLine(
  "setAccess( updateable ) & setStatus( enabled, open ) ..." );
  file.setAccess( IccFile::updatable );
  file.setStatus( IccFile::enabled );
  file.setStatus( IccFile::open );
  pFile = sys->getFile( fileId );
  term->sendLine(
  ">%s< Add=%s Brw=%s Del=%s Read=%s Upd=%s op=%ld en=%ld",
                 pFile->name(),
                 Icc::boolText( pFile->isAddable() ),
                 Icc::boolText( pFile->isBrowsable() ),
                 Icc::boolText( pFile->isDeletable() ),
                 Icc::boolText( pFile->isReadable() ),
                 Icc::boolText( pFile->isUpdatable() ),
                 pFile->openStatus(),
                 pFile->enableStatus() );
  term->setNewLine();
  term->sendLine(
  "Beginning browse of all file objects in CICS system...");
  sys->beginBrowse( IccSystem::file );
  term->sendLine(65,"<%s>", sys->conditionText() );
  pFile = sys->getNextFile();  //access next file in CICS system
  while (sys->condition() == IccCondition::NORMAL)
  {
    if (term->height() - term->line() == 1)
    {
       term->send( term->height(), 50, "Hit ENTER to continue");
       term->waitForAID( IccTerminal::ENTER );
       term->erase();
    }
    term->sendLine( " - >%s< type=%ld",
                    pFile->name(), pFile->type() );
    term->sendLine( 65, "<%s>", sys->conditionText() );
    pFile = sys->getNextFile();  //access next file in CICS system
  }
  term->sendLine( "...ending browse");
  sys->endBrowse( IccSystem::file );
  term->sendLine(65,"<%s>", sys->conditionText() );

  term->send( 24,1,"Program 'icc$sys' complete: Hit PF12 to End" );
  term->waitForAID( IccTerminal::PF12 );
  term->erase();
  term->freeKeyboard();

  return;
}
