*ASM XOPTS(NOPROLOG NOEPILOG)
*=====================================================================*
*                                                                     *
* MODULE NAME = DFHWBADX                                              *
*                                                                     *
* DESCRIPTIVE NAME = CICS TS  CICS Web Support Analyzer               *
*                             user replaceable program                *
*                                                                     *
*                                                                     *
*                                                                     *
*        Licensed Materials - Property of IBM                         *
*                                                                     *
*        "Restricted Materials of IBM"                                *
*                                                                     *
*        5655-Y04                                                     *
*                                                                     *
*        (C) Copyright IBM Corp. 1996, 2008"                          *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*  STATUS = 7.2.0                                                     *
*                                                                     *
* FUNCTION = Analyzes the incoming HTTP request to extract the        *
*            required CICS information.                               *
*                                                                     *
*   Versions of this program in other languages are also provided:    *
*     C         - DFHWBAHX                                            *
*     PLI       - DFHWBALX                                            *
*     COBOL     - DFHWBAOX                                            *
*                                                                     *
* NOTES :                                                             *
*                                                                     *
*    THIS IS A PRODUCT SENSITIVE SAMPLE.                              *
*    REFER TO PRODUCT DOCUMENTATION.                                  *
*                                                                     *
*    DEPENDENCIES = S/390                                             *
*    MODULE TYPE = Executable                                         *
*    PROCESSOR = Assembler                                            *
*    ATTRIBUTES = Read only, Serially Reusable                        *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
* ENTRY POINT = DFHWBADX                                              *
*                                                                     *
*     PURPOSE = All functions                                         *
*                                                                     *
*     LINKAGE =                                                       *
*         This entry point is called by the CWS Web Send/Receive      *
*         program DFHWBSR via EXEC CICS LINK.                         *
*                                                                     *
*     INPUT =                                                         *
*         The parameters are passed to the exit program via the       *
*         commarea. The mapping for this parameter list is in         *
*         DFHWBTDD.                                                   *
*                                                                     *
*     OUTPUT =                                                        *
*                                                                     *
*     EXIT-NORMAL = Exit is via an EXEC CICS RETURN command.          *
*         The following return codes may be returned via the          *
*         commarea:                                                   *
*            URP_OK = 0                                               *
*                                                                     *
*     EXIT-ERROR = Exit is via an EXEC CICS RETURN command.           *
*         The following return codes may be returned via the          *
*         commarea:                                                   *
*            URP_EXCEPTION = 4                                        *
*            URP_INVALID   = 8                                        *
*            URP_DISASTER  = 12                                       *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
* EXTERNAL REFERENCES =                                               *
*         None.                                                       *
*                                                                     *
*     ROUTINES =                                                      *
*         EXEC CICS RETURN - return to the calling program.           *
*                                                                     *
*     CONTROL BLOCKS =                                                *
*         The CWS Analyzer parameter list is defined in DFHWBTDD,     *
*         along with a description of the parameters.                 *
*                                                                     *
*-------------------------------------------------------------------- *
*                                                                     *
* DESCRIPTION                                                         *
*                                                                     *
*        This program is a sample version in assembler of the CWS     *
*        Analyzer exit. The program is invoked when an HTTP request   *
*        is received and CWS Analyzer exit name is set to the         *
*        default, DFHWBADX. This name can be changed by use of the    *
*        SET TCPIPSERVICE URM command in CEMT or CECI.                *
*                                                                     *
*        A parameter list as defined in the DFHWBTDD copybook is      *
*        provided as input to this program.                           *
*        The parameter list is addressed by the program using the     *
*        normal conventions for a commarea.                           *
*                                                                     *
*        Please refer to INFO APAR II10905 for guidance on            *
*        customizing the CWS Analyzer to deal with clients/           *
*        browsers which do not conform to the HTTP 1.0                *
*        standard.                                                    *
*                                                                     *
*-------------------------------------------------------------------- *
*                                                                     *
* CHANGE ACTIVITY :                                                   *
*        $MOD(DFHWBADX),COMP(ISC),PROD(CICS TS ):                     *
*                                                                     *
*     PN= REASON REL YYMMDD HDXXIII : REMARKS                         *
*    $L0= 723    510 960425 HD0JADT : First coded                     *
*    $L2= 728    530 980320 HDNONEGJ: New CWI SEND / RECEIVE logic    *
*    $L5= 830    660 080816 HDISGPL : Add IPV6 to Parameters          *
*    $P2= M27415 530 980209 HD2WPGK : Use DFHWBUCD constants          *
*    $P3= M27551 530 980210 HD2WPGK : Allow WEB user token > 8 chars  *
*    $P4= M30435 530 981021 HD4PALS : Remove reference to CWBC        *
*    $P5= M30840 530 981216 HDALSLW : Pass maximum of 32K to DFHWBUN  *
*    $P7= M31741 530 990222 HDALSLW : DFHWBADX should not unescape    *
*    $P8= M15975 610 000802 HD2JPEH : URL data must be unescaped      *
*    $P9= D01262 620 010906 HD2JPEH : Make CWS Analyzers consistent   *
*    $PA= D10481 640 050113 HDIKTG  : Analyzer program rejects resourc*
*    $01= A14337 530 980715 HDBGNRB : Migrate PQ14337 from SPA R520   *
*    $02= A14302 530 981202 HDALSLW : Migrate PQ14302 from SPA R520   *
*    $03= A23646 610 990527 HDBGNRB : Migrate PQ23646 from SPA R530   *
*    $05= A27465 610 990621 HDBGNRB : Migrate PQ27465 from SPA R530   *
*                                                                     *
*=====================================================================*
*---------------------------------------------------------------------*
*    Standard CWS definitions required                                *
*---------------------------------------------------------------------*
         COPY DFHWBTDD                Analyzer parameter list
         COPY DFHWBUND                DFHWBUN parameter list      @P5A
*
*---------------------------------------------------------------------*
*    Working storage definitions                                      *
*---------------------------------------------------------------------*
         DFHEISTG ,                                                @P8C
*
*  Constants for input validation
*
WBADX_MIN_RESOURCE_LENGTH  EQU  6         Min resource is '/A/B/C'
WBADX_MAX_CONV_NAME_LENGTH EQU  8
WBADX_MAX_TRAN_NAME_LENGTH EQU  4
WBADX_MAX_SERV_NAME_LENGTH EQU  8
WBADX_MAX_UTOK_NAME_LENGTH EQU  8
SEGMENT  DS    D                   URL segment workarea            @P8A
* Commarea for Unescaping module DFHWBUN                           @L2A
WBUN_ARG DS    XL(WBUN_COMMAREA__LEN)                              @P5A
*
*    Insert your own storage definitions here
*
         DFHEIEND ,                                                @P8A
*---------------------------------------------------------------------*
*    Start of program code                                            *
*---------------------------------------------------------------------*
DFHWBADX CSECT
DFHWBADX AMODE 31
DFHWBADX RMODE ANY
         DFHREGS ,
         DFHEIENT CODEREG=R10,EIBREG=R11                           @P8A
*
*  If there is no commarea, just return. (There is nowhere to
*  set return codes).
*
         ICM   R0,3,EIBCALEN                                       @P9C
         BZ    RETURN
*
*  Address the parameter list
*
         L     R3,DFHEICAP                                         @P8C
         USING WBRA_PARMS,R3                                       @P8C
*
*  Validate the eyecatcher
*
         CLC   WBRA_EYECATCHER,ANALYZE_EYECATCHER_INIT             @P2C
         BNE   RETURNIN             Return response=invalid
*=====================================================================*
*    User specific code below                                         *
*=====================================================================*
*
*---------------------------------------------------------------------*
*    Processing different versions of input:                          *
*    WBRA_VERSION_CTS410 level introduce support for IPV6 addresses   *
*---------------------------------------------------------------------*
*
         CLI   WBRA_VERSION,WBRA_VERSION_CTS410  IPV6 supported?   @L5A
         BNL   GOT_IPV6                Y: process ipv6 addresses   @L5A
*
*    This is where users would execute older IP address manipulation
*    using fields WBRA_CLIENT_IP_ADDRESS and WBRA_SERVER_IP_ADDRESS
*
         LA    R6,WBRA_CLIENT_IP_ADDRESS    Example                @L5A
         LA    R7,WBRA_SERVER_IP_ADDRESS    Example                @L5A
         B     END_IP                  B: finished with IP address
*                                      processing
GOT_IPV6 DS    0H                      Process IPV6 fields         @L5A
*
*    This is where users would execute newer IP address manipulation
*    using fields WBRA_CLIENT_IPV6_ADDRESS and WBRA_SERVER_IPV6_ADDRESS
*
         LA    R6,WBRA_CLIENT_IPV6_ADDRESS  Example                @L5A
         LA    R7,WBRA_SERVER_IPV6_ADDRESS  Example                @L5A
*
END_IP   DS    0H                      End IP address processing   @L5A
*
*---------------------------------------------------------------------*
*  Set the name to be used for codepage translation of the user data  *
*  to 'DFHWBUD'.                                                      *
*---------------------------------------------------------------------*
         MVC   WBRA_DFHCNV_KEY,CNV_USER_DATA_KEY                   @P2C
*---------------------------------------------------------------------*
* If a URIMAP was matched (WBRA_URIMAP not spaces), assume no analysis*
* is necessary, otherwise proceed as below.                           *
* This default analyzer extracts the required CICS information by     *
* assuming the following structure for the resource section           *
* of the HTTP request:-                                               *
*                                                                     *
*             /CONVNAME/TRANID/PROGNAME</FILENAME><?TOKEN>            *
*                                                                     *
*  where                                                              *
*    CONVNAME = The name of the converter program. The use of the     *
*               string 'CICS' here will be taken as signifying that   *
*               no converter is required.                             *
*    TRANID   = The transaction id to be used for the alias.          *
*               'CWBA' must be specified to get the supplied          *
*               transaction.                                          *
*    PROGNAME = The name of the user program to be linked by the      *
*               alias.                                                *
*    FILENAME = An optional filename (or other information)           *
*               when PROGNAME is regarded as a directory.             *
*    TOKEN    = An optional 8-character field to be passed in the     *
*               user_token field to the decode function of the        *
*               converter program.                                    *
*                                                                     *
*  According to the HTTP 1.0 specification in RFC1945,                *
*  (http://www.ietf.org/rfc/rfc1945.txt) any of the characters in     *
*  the text fields between the slashes (the RFC calls these "path     *
*  segments") can be escaped as %xx characters (where xx is the       *
*  hexadecimal of the ASCII representation of the character).         *
*  (The slashes themselves cannot be escaped if they have semantic    *
*  meaning, as they do in the syntax described above.)                *
*  We unescape any escaped characters that we find in the URL, and    *
*  unescaping is *not* controlled by the WBRA_UNESCAPE_NOT_REQUIRED   *
*  flag, which only applies to the document body.                     *
*                                                                     *
*---------------------------------------------------------------------*
         CLI   WBRA_URIMAP,C' '              Was a URIMAP found?   @PAA
         BNE   RETURNOK                      Yes - return          @PAA
         L     R5,WBRA_RESOURCE_PTR
         LH    R4,WBRA_RESOURCE_LENGTH
*
* Validate resource length
         C     R4,=A(WBADX_MIN_RESOURCE_LENGTH)
         BL    RESOURCE_TOO_SHORT
*
* Ensure valid first character
         CLI   0(R5),C'/'
         BNE   FIRST_SLASH_MISSING
         LA    R5,1(,R5)             Move to first character..
         BCTR  R4,0                  ..after first '/'
*--------------------------*
* Scan for converter name  *
*--------------------------*
         BAS   R14,UNESCSEG          Extract/unescape next segment @P8A
         LTR   R0,R0                 Is converter name present?    @P8A
         BNP   CONV_NAME_INVALID     ..no, error                   @P8A
         C     R0,=A(WBADX_MAX_CONV_NAME_LENGTH) Name too long?    @P8A
         BH    CONV_NAME_INVALID                                   @P8A
         MVC   WBRA_CONVERTER_PROGRAM,SEGMENT Copy segment         @P8A
         CLC   WBRA_CONVERTER_PROGRAM,=CL8'CICS    ' Null converter ?
         BNE   GET_TRANID            ..no, finished, look for tranid
         XC    WBRA_CONVERTER_PROGRAM,WBRA_CONVERTER_PROGRAM  Nullify
*--------------------------*
* Scan for alias tranid    *
*--------------------------*
GET_TRANID DS  0H
         CLI   0(R5),C'/'            Is next segment present?      @P8A
         BNE   TRAN_NAME_INVALID     No, TRANID absent             @P8A
         LA    R5,1(,R5)             Step over delimiter           @P8A
         BCTR  R4,0                  Decrement remaining length    @P8A
         BAS   R14,UNESCSEG          Extract/unescape next segment @P8A
         C     R6,=A(WBADX_MAX_TRAN_NAME_LENGTH)
         BH    TRAN_NAME_INVALID
         LTR   R6,R6                 Is tranid present ?
         BNP   TRAN_NAME_INVALID     ..no, error                   @P8C
         MVC   WBRA_ALIAS_TRANID,SEGMENT                           @P8A
*------------------------------*
* Scan for server program name *
*------------------------------*
GET_SERVER DS  0H
         CLI   0(R5),C'/'            Is next segment present?      @P8A
         BNE   SERVER_NAME_MISSING   No, server program omitted    @P8A
         LA    R5,1(,R5)             Step over delimiter           @P8A
         BCTR  R4,0                  Decrement remaining length    @P8A
         BAS   R14,UNESCSEG          Extract/unescape next segment @P8A
         C     R6,=A(WBADX_MAX_SERV_NAME_LENGTH)
         BH    SERV_NAME_INVALID     8 or less bytes OK            @L2A
         LTR   R6,R6                 Is server name present ?
         BZ    SERVER_NAME_MISSING   ..no, error
         BM    SERV_NAME_INVALID     ..yes, but too long           @P8A
         MVC   WBRA_SERVER_PROGRAM,SEGMENT Copy segment            @P8A
*------------------------------*
* Copy user token if present   *
*------------------------------*
GET_UTOK DS  0H
         LTR   R4,R4                 Any resource left ?
         BNP   UNESBODY              ..no, exit from program       @P8C
         CLI   0(R5),C'?'            Reached a query-string/token?
         BE    GOT_UTOK              Yes, obtain its length
         LA    R5,1(,R5)             No, step over
         BCTR  R4,0                  Reduce amount left
         B     GET_UTOK              Try again
GOT_UTOK DS    0H                    Token is present
         LA    R5,1(,R5)             First char after '?'
         BCTR  R4,0                  Decrement length remaining
         LR    R7,R5                 Start of user token
         LR    R6,R4                 All the rest must be user token
         C     R6,=A(WBADX_MAX_UTOK_NAME_LENGTH)
         BNH   UTOK_NOT_LONG                                       @P3C
         LA    R6,WBADX_MAX_UTOK_NAME_LENGTH Cap it at 8.          @P3C
UTOK_NOT_LONG DS 0H                                                @P3C
         LTR   R6,R6                 Is user token present ?
         BZ    UNESBODY              ..no, go escape body          @P8C
         MVC   WBRA_USER_TOKEN,=CL8' '  Ensure trailing blanks
         BCTR  R6,0                  Subtract one for EX
         EX    R6,COPY_UTOK          Move user token to output
         B     UNESBODY              Unescape data if required     @P8C
COPY_UTOK MVC  WBRA_USER_TOKEN(0),0(R7)
*---------------------------------------------------------------------*
*  LINK TO DFHWBUN TO "UNESCAPE" ESCAPED DATA                         *
*  for applications which want to manipulate incoming data in         *
*  escaped form, set WBRA_UNESCAPE to                                 *
*  WBRA_UNESCAPE_NOT_REQUIRED and do not invoke DFHWBUN.              *
*  If user data length is greater than 32K just pass in the first     *
*  32K (maximum size of the commarea we are working with).            *
*  CICS sets WBRA_UNESCAPE to WBRA_UNESCAPE_NOT_REQUIRED before       *
*  linking to us.                                                     *
*                                                                     *
*  WBRA_USER_DATA_PTR points to the start of the body of the HTTP     *
*  request. Add WBRA_USER_DATA_LENGTH to WBRA_USER_DATA_PTR to get    *
*  end of HTTP request. Subtract end address from start address       *
*  to get length of data to be unescaped.                             *
*---------------------------------------------------------------------*
UNESBODY DS    0H                                                  @P8A
         CLI  WBRA_UNESCAPE,WBRA_UNESCAPE_NOT_REQUIRED             @P7C
         BE   RETURNOK                Exit if unescape not required@P7C
         LA   R6,WBUN_ARG             Get address of WBUN commarea @P5A
         USING WBUN_COMMAREA,R6                                    @P5A
         XC   WBUN_COMMAREA,WBUN_COMMAREA                          @P5A
         MVC  WBUN_EYECATCHER,DFHWBUN_EYECATCHER_INIT              @P5A
         LA   R4,WBUN_COMMAREA__LEN                                @P5A
         STH  R4,WBUN_LENGTH                                       @P5A
         LA   R4,DFHWBUN_CURRENT_VERSION                           @P5A
         STH  R4,WBUN_VERSION                                      @P5A
         L    R4,WBRA_USER_DATA_PTR   Get start of user data       @02A
         ST   R4,WBUN_UNESCAPE_ADDR   Pass address in Commarea     @02A
         LH   R5,WBRA_USER_DATA_LENGTH  Length of data to unescape @P9A
         LH   R4,MAX_SERVER_DATA_LENGTH                            @P5A
         CLR  R4,R5                                                @P5A
         BH   NOMAXLEN                                             @P7C
         LR   R5,R4                                                @P5A
NOMAXLEN DS   0H                                                   @P5A
         ST   R5,WBUN_UNESCAPE_LEN                                 @P5A
         EXEC CICS LINK PROGRAM('DFHWBUN')                             *
                        COMMAREA(WBUN_COMMAREA)                        *
                        LENGTH(=AL2(WBUN_COMMAREA__LEN))
         MVI  WBRA_UNESCAPE,WBRA_UNESCAPE_NOT_REQUIRED             @02A
         B    RETURNOK                                             @02A
         EJECT ,                                                   @P8A
*---------------------------------------------------------------------*
*                                                                     *
*  Unescape a "segment" of data between two successive slashes.       *
*  For CICS purposes, the length of a segment can never exceed        *
*  eight bytes. The end of the "path" portion of the "Request-URI"    *
*  is delimited by a semi-colon, query, octothorp, or space.          *
*                                                                     *
*---------------------------------------------------------------------*
UNESCSEG DS    0H                                                  @P8A
         MVC   SEGMENT,=CL8' '    Initialize SEGMENT to blanks     @P8A
         LA    R0,1               Initialize increment to one      @P8A
         SR    R6,R6              Initialize unescaped segment len @P8A
         LA    R8,UNESDONE        Point to loop escape address     @P8A
         LA    R15,SEGMENT-1      Point to byte before SEGMENT     @P8A
         SPACE 1                                                   @P8A
UNESCAN  CLI   0(R5),C'/'         End of segment?                  @P8A
         BER   R8                                                  @P8A
         CLI   0(R5),C' '         End of "Request-URI"?            @P8A
         BER   R8                                                  @P8A
         CLI   0(R5),C';'         Start of "params"?               @P8A
         BER   R8                                                  @P8A
         CLI   0(R5),C'?'         Start of "querystring"?          @P8A
         BER   R8                                                  @P8A
         CLI   0(R5),C'#'         Start of "fragment"?             @P8A
         BER   R8                                                  @P8A
         LA    R1,SEGMENT+7       Set limit to end of segment      @P8A
         BXLE  R15,R0,UNESTART    Bump ptr and check for room left @P8A
         LNR   R6,R0              Set length negative if truncated @P8A
         BR    R8                 And exit routine                 @P8A
UNESTART CLI   0(R5),C'%'         Start of escape sequence?        @P8A
         BE    UNESCSEQ                                            @P8A
         CLI   0(R5),C'+'         Blank substitute?                @P8A
         BE    UNESNEXT           Yes, just skip, blank already    @P8A
         SPACE 1                                                   @P8A
UNESCNO  MVC   0(1,R15),0(R5)     Copy normal character            @P8A
UNESNEXT AR    R6,R0              Count the output character       @P8A
         AR    R5,R0              Bump to next input character     @P8A
         SR    R4,R0              Decrement length left            @P8A
         BP    UNESCAN            Loop back if any left            @P8A
UNESDONE DS    0H                                                  @P8A
         TR    SEGMENT,UCTAB      Convert to EBCDIC upper case     @P8A
         LTR   R0,R6              Save and test output length      @P8A
         BR    R14                                                 @P8A
*
* Here we unescape just one %xx sequence.
* If either of the xx is not a valid hex character,
* the escape sequence is treated as normal characters.
*
UNESCSEQ SLR   R1,R1              Clear R1 for first nibble        @P8A
         SLR   R2,R2              Clear R2 for second nibble       @P8A
         IC    R1,1(,R5)          Pick up first nibble             @P8A
         IC    R2,2(,R5)          Pick up second nibble            @P8A
         IC    R1,HEXBIN(R1)      Convert nibble1 to binary        @P8A
         IC    R2,HEXBIN(R2)      Convert nibble2 to binary        @P8A
         CH    R1,=Y(15)          Is nibble1 valid?                @P8A
         BH    UNESCNO            No, not an escape sequence       @P8A
         CH    R2,=Y(15)          Is nibble2 valid?                @P8A
         BH    UNESCNO            No, not an escape sequence       @P8A
         SLL   R1,4               Multiply nibble1 by 16           @P8A
         OR    R1,R2              Merge nibble1 and nibble2        @P8A
         IC    R2,EBCDIC(R1)      Convert ASCII to EBCDIC          @P8A
         STC   R2,0(,R15)         Save EBCDIC character            @P8A
         LA    R5,2(,R5)          Bump over escape                 @P8A
         BCTR  R4,0               Decrement length left            @P8A
         BCTR  R4,0               Decrement length left            @P8A
         B     UNESNEXT           Rejoin loop                      @P8A
         EJECT ,                                                   @P8A
*---------------------------------------------------------------------*
*    Translate table for upper case conversion                        *
*---------------------------------------------------------------------*
         DC    0D'0'               Align to a doubleword           @P8A
UCTAB    DC    256AL1(*-UCTAB)     ASIS by default                 @P8C
         ORG   UCTAB+C'a'
         DC    C'ABCDEFGHI'
         ORG   UCTAB+C'j'
         DC    C'JKLMNOPQR'
         ORG   UCTAB+C's'
         DC    C'STUVWXYZ'
         ORG   ,
*---------------------------------------------------------------------*
*    Translate table for hexadecimal to binary conversion             *
*---------------------------------------------------------------------*
HEXBIN   DC    256X'FF'                                            @P8A
         ORG   HEXBIN+C'a'             Lower-case a-f              @P8A
         DC    X'0A0B0C0D0E0F'                                     @P8A
         ORG   HEXBIN+C'A'             Upper-case A-F              @P8A
         DC    X'0A0B0C0D0E0F'                                     @P8A
         ORG   HEXBIN+C'0'             Numerics                    @P8A
         DC    X'00010203040506070809'                             @P8A
         ORG   ,                                                   @P8A
*---------------------------------------------------------------------*
*    Translate table for ASCII (ISO-8859-1) to EBCDIC (IBM-037)       *
*---------------------------------------------------------------------*
EBCDIC   DC    X'00010203372D2E2F1605250B0C0D0E0F'                 @P8A
         DC    X'101112133C3D322618193F271C1D1E1F'                 @P8A
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'                 @P8A
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'                 @P8A
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'                 @P8A
         DC    X'D7D8D9E2E3E4E5E6E7E8E9BAE0BBB06D'                 @P8A
         DC    X'79818283848586878889919293949596'                 @P8A
         DC    X'979899A2A3A4A5A6A7A8A9C04FD0A107'                 @P8A
         DC    X'202122232415061728292A2B2C090A1B'                 @P8A
         DC    X'30311A333435360838393A3B04143EFF'                 @P8A
         DC    X'41AA4AB19FB26AB5BDB49A8A5FCAAFBC'                 @P8A
         DC    X'908FEAFABEA0B6B39DDA9B8BB7B8B9AB'                 @P8A
         DC    X'6465626663679E687471727378757677'                 @P8A
         DC    X'AC69EDEEEBEFECBF80FDFEFBFCADAE59'                 @P8A
         DC    X'4445424643479C485451525358555657'                 @P8A
         DC    X'8C49CDCECBCFCCE170DDDEDBDC8D8EDF'                 @P8A
         SPACE 3                                                   @P8A
*---------------------------------------------------------------------*
*    CWS URP constants                                            @P2A*
*---------------------------------------------------------------------*
         COPY DFHWBUCD                CWS URP constants            @P2M
*---------------------------------------------------------------------*
*    Maximum length of commarea passed to DFHWBUN                     *
*---------------------------------------------------------------------*
MAX_SERVER_DATA_LENGTH DC H'32767'                                 @P5A
*---------------------------------------------------------------------*
*    Set REASON for exception returns                                 *
*---------------------------------------------------------------------*
RESOURCE_TOO_SHORT DS 0H
         MVC   WBRA_REASON,=A(URP_RESOURCE_TOO_SHORT)
         B     RETURNEX
FIRST_SLASH_MISSING DS 0H
         MVC   WBRA_REASON,=A(URP_FIRST_SLASH_MISSING)             @P4C
         B     RETURNEX
SERVER_NAME_MISSING DS 0H
         MVC   WBRA_REASON,=A(URP_SERVER_NAME_MISSING)             @P4C
         B     RETURNEX
CONV_NAME_INVALID DS 0H
         MVC   WBRA_REASON,=A(URP_CONV_NAME_INVALID)               @P4C
         B     RETURNEX
TRAN_NAME_INVALID DS 0H
         MVC   WBRA_REASON,=A(URP_TRAN_NAME_INVALID)               @P4C
         B     RETURNEX
SERV_NAME_INVALID DS 0H
         MVC   WBRA_REASON,=A(URP_SERV_NAME_INVALID)               @P4C
         B     RETURNEX
USER_TOKEN_INVALID DS 0H
         MVC   WBRA_REASON,=A(URP_USER_TOKEN_INVALID)              @P4C
         B     RETURNEX
*=====================================================================*
*    User specific code above                                         *
*=====================================================================*
*---------------------------------------------------------------------*
*    Return OK                                                        *
*---------------------------------------------------------------------*
RETURNOK DS    0H
         MVC   WBRA_RESPONSE,=A(URP_OK)
         B     RETURN
*---------------------------------------------------------------------*
*    Return Exception                                                 *
*---------------------------------------------------------------------*
RETURNEX DS    0H
         MVC   WBRA_RESPONSE,=A(URP_EXCEPTION)
         B     RETURN
*---------------------------------------------------------------------*
*    Return Invalid                                                   *
*---------------------------------------------------------------------*
RETURNIN DS    0H
         MVC   WBRA_RESPONSE,=A(URP_INVALID)
         B     RETURN
*---------------------------------------------------------------------*
*    Return Disaster                                                  *
*---------------------------------------------------------------------*
RETURNDI DS    0H
         MVC   WBRA_RESPONSE,=A(URP_DISASTER)
         B     RETURN
*
*---------------------------------------------------------------------*
*    Return point                                                     *
*---------------------------------------------------------------------*
RETURN   DS    0H
         EXEC CICS RETURN  ,
*---------------------------------------------------------------------*
*    Literal pool                                                     *
*---------------------------------------------------------------------*
         LTORG ,                                                   @P8A
         END   DFHWBADX
