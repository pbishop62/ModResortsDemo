??=ifdef __COMPILER_VER__
??=pragma filetag ("IBM-1047")
??=endif
??=pragma margins(1,72) sequence(73,80)
/* ---------------------------------------- */
/* Note - the above pragma statement allows */
/* this file to be used by either C or C++  */
/* compilers irrespective of file attributes*/
/* of fixed/variable, and inc/exclusion of  */
/* sequence numbers.                        */
/* ---------------------------------------- */
#ifndef __DFH$W2LH__                                                    00001000
#define __DFH$W2LH__ 1                                                  00002000
#include <stdint.h>                                                     00003000
 /* ***************************************************************** */00004000
 /*                                                                   */00005000
 /* DESCRIPTIVE NAME = Web 2.0 Samples - Common macros                */00006000
 /*                                                                   */00007000
 /*    Licensed Materials - Property of IBM                           */00008000
 /*                                                                   */00009000
 /*    CICS SupportPac CA8K                                           */00010000
 /*                                                                   */00011000
 /*    (c) Copyright IBM Corporation 2008 All Rights Reserved         */00012000
 /*    US Government Users Restricted Rights - Use, duplication       */00013000
 /*    or disclosure restricted by GSA ADP Schedule Contract          */00014000
 /*    with IBM Corporation                                           */00015000
 /*                                                                   */00016000
 /* STATUS = 7.2.0                                                    */00017000
 /*                                                                   */00018000
 /* FUNCTION = Common macros for use by SupportPac CA8K samples       */00019000
 /*                                                                   */00020000
 /* DESCRIPTION                                                       */00021000
 /*   This copybook describes the layout of the Resource Layout       */00022000
 /*   Mapping structure that is passed to the Resource Service        */00023000
 /*   Routine from the Atom feed document generator sample            */00024000
 /*   program (DFH$W2FD).                                             */00025000
 /*   The RLM is used to specify the conversions from character-      */00026000
 /*   based items, such as those in an XML file, into the equivalent  */00027000
 /*   binary representations in a CICS resource, such as a TSqueue    */00028000
 /*   or file, and the reverse transformation from binary to          */00029000
 /*   character.                                                      */00030000
 /*                                                                   */00031000
 /* ***************************************************************** */00032000
                                                                        00033000
 typedef                                                                00034000
 struct {                                                               00035000
   char rlm_eye_catcher[8];       /* >DFHRLM< eyecatcher              */00036000
   int32_t rlm_version_major;     /* Major version number             */00037000
   int32_t rlm_version_minor;     /* Minor version number             */00038000
   int32_t filler__001;           /* Reserved                         */00039000
   int32_t rlm_length;            /* Total length of RLM              */00040000
   char rlm_name[32];             /* Name of this RLM                 */00041000
   int32_t filler__002;           /* Reserved                         */00042000
   int32_t rlm_struct_size;       /* Size of described structure      */00043000
   char filler__003[16];          /* Reserved                         */00044000
 } dfhrlm_header;                 /* RLM header                       */00045000
                                                                        00046000
 typedef                                                                00047000
 struct {                                                               00048000
   unsigned char rlm_entry_type;                                        00049000
 } dfhrlm_entry;                                                        00050000
 /* ----------------------------------------------------------------- */00051000
 /* Type 1 record structure                                           */00052000
 /* Data entry structure defining a single field to be converted.     */00053000
 /* ----------------------------------------------------------------- */00054000
                                                                        00055000
 typedef                                                                00056000
 struct {                                                               00057000
   unsigned char rlm1_entry_type; /* Data entry, type=X'01'           */00058000
   unsigned char rlm1_convert_type; /* Conversion type                */00059000
   int16_t rlm1_data_count;       /* Length, or decimal digit           00060000
                                     count                            */00061000
   unsigned char rlm1_data_fract; /* Decimal fraction digit count     */00062000
   unsigned char filler__001;     /* Reserved                         */00063000
   int16_t rlm1_namespace_len;    /* Namespace URI length             */00064000
   int16_t rlm1_local_name_len;   /* Local name length                */00065000
   int16_t filler__002;           /* Reserved                         */00066000
   int16_t rlm1_default_len;      /* Length of default value          */00067000
   struct {                                                             00068000
     unsigned filler__003 :1;     /* Reserved                         */00069000
     unsigned rlm1_sign_leading :1; /* Leading sign                   */00070000
     unsigned rlm1_sign_separate :1; /* Separate sign                 */00071000
     unsigned filler__004 :5;                                           00072000
   } rlm1_data_flags;             /* Flag byte                        */00073000
   char filler__005[13];          /* Reserved                         */00074000
   void * __ptr32 rlm1_namespace_ptr; /* Address of namespace URI     */00075000
   int32_t filler__006;           /* Reserved                         */00076000
   void * __ptr32 rlm1_local_name_ptr; /* Address of local name       */00077000
   char filler__007[12];          /* Reserved                         */00078000
   void * __ptr32 rlm1_default_value_ptr; /* Address of default value   00079000
                                                                      */00080000
   char filler__008[8];           /* Reserved                         */00081000
 } dfhrlm_data_entry;                                                   00082000
 /* ----------------------------------------------------------------- */00083000
 /* Type 2 record structure - Fixed Repeat                            */00084000
 /* ----------------------------------------------------------------- */00085000
                                                                        00086000
 typedef                                                                00087000
 struct {                                                               00088000
   unsigned char rlm2_entry_type; /* Fixed repeat entry, type=X'02    */00089000
   struct {                                                             00090000
     unsigned filler__001 :1;     /* Reserved                         */00091000
     unsigned rlm2_inline_var :1; /* Separate count field             */00092000
     unsigned rlm2_content_mixed :1; /* Can contain mixed               00093000
                                     content                          */00094000
     unsigned rlm2_content_struct :1; /* Content is a structure       */00095000
     unsigned filler__002 :4;                                           00096000
   } rlm2_content_desc;           /* Content description              */00097000
   int16_t rlm2_content_count;    /* Array dimension                  */00098000
   char filler__003[3];           /* Reserved                         */00099000
   unsigned char rlm2_struct_name_len; /* Length of structure name    */00100000
   int32_t rlm2_var_count_offset; /* Offset of optional               */00101000
   void * __ptr32 rlm2_content_len; /* Size of one element            */00102000
   char filler__004[20];          /* Reserved                         */00103000
   void * __ptr32 rlm2_struct_name;                                     00104000
   char filler__005[16];          /* Reserved                         */00105000
 } dfhrlm_fixed_repeat_entry;                                           00106000
                                                                        00107000
 typedef                                                                00108000
 struct {                                                               00109000
   unsigned char rlm4_entry_type; /* End Repeat entry, type=X'04'     */00110000
   char filler__001[7];           /* Padding to doubleword            */00111000
 } dfhrlm_end_repeat_entry;                                             00112000
 /* ----------------------------------------------------------------- */00113000
 /* Type 5 record structure - End of File                             */00114000
 /* ----------------------------------------------------------------- */00115000
                                                                        00116000
 typedef                                                                00117000
 struct {                                                               00118000
   unsigned char rlm5_entry_type; /* End of File entry, type=X'05'    */00119000
   char filler__001[7];           /* Padding to doubleword            */00120000
 } dfhrlm_end_of_file_entry;                                            00121000
#endif                                                                  00122000
