       CBL CICS('COBOL3')
      *****************************************************************
      *                                                               *
      * MODULE NAME = DFH0S01                                         *
      *                                                               *
      * DESCRIPTIVE NAME = File Inquire for Sample Application        *
      *                                                               *
      *                                                               *
      *                                                               *
      *     Licensed Materials - Property of IBM                      *
      *                                                               *
      *     "Restricted Materials of IBM"                             *
      *                                                               *
      *     5655-Y04                                                  *
      *                                                               *
      *     (C) Copyright IBM Corp. 1985, 2000"                       *
      *                                                               *
      *                                                               *
      *                                                               *
      *                                                               *
      * STATUS = 7.2.0                                                *
      *                                                               *
      *---------------------------------------------------------------*
      *                                                               *
      * DESCRIPTION :                                                 *
      *                                                               *
      *      THIS PROGRAM IS THE FIRST INVOKED BY THE 'AC01'          *
      *      TRANSACTION. IT ANALYZES ALL REQUESTS, AND COMPLETES     *
      *      THOSE FOR NAME INQUIRIES AND RECORD DISPLAYS.  FOR       *
      *      UPDATE TRANSACTIONS, IT SENDS THE APPROPRIATE DATA ENTRY *
      *      SCREEN AND SETS THE NEXT TRANSACTION IDENTIFIER TO       *
      *      'AC02', WHICH COMPLETES THE UPDATE OPERATION. FOR PRINT  *
      *      REQUESTS, IT STARTS TRANSACTION 'AC03' TO DO THE ACTUAL  *
      *      PRINTING.                                                *
      *                                                               *
      *---------------------------------------------------------------*
      *                                                               *
      * CHANGE ACTIVITY :                                             *
      * $SEG(DFH0S01),COMP(SAMPLES),PROD(CICS TS ):                   *
      *                                                               *
      *     PN= REASON REL YYMMDD HDXIII : REMARKS                    *
      *    $L0= Z30    170 85     HD1XIC : CREATED.                   *
      *    $L1 =SP1    220 8701   HD1CHW : RESTRUCTURE                *
      *    $P1= M56440 310 8905   HD3WJJG: REMOVE COMPILATION WARNINGS*
      *    $P2= M90474 330 910807 HDBWSH : Prologue fixed.            *
      *    $P3= M91869 330 920204 HDCTRC : INSPECTs replaced.         *
      *    $P4= M16689 610 001024 HDWMR  : Migrate PQ28964            *
      *                                                               *
      *****************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. ACCT01.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  MISC.
           02  RESPONSE               PIC S9(8) COMP.
           02  MSG-NO                 PIC S9(4) COMP VALUE +0.
           02  ACCT-LNG               PIC S9(4) COMP VALUE +383.
           02  ACIX-LNG               PIC S9(4) COMP VALUE +63.
           02  DTL-LNG                PIC S9(4) COMP VALUE +751.
           02  STARS                  PIC X(12) VALUE '************'.
      * FOLLOWING 3 LINES ADDED UNDER APAR                    @P4A
           02  WS-YR-4.
               04  WS-CC              PIC X(2).
               04  WS-YR-2            PIC X(2).
           02  USE-QID.
               04  USE-QID1           PIC X(3) VALUE 'AC0'.
               04  USE-QID2           PIC X(5).
           02  USE-REC.
               04  USE-TERM           PIC X(4) VALUE SPACES.
               04  USE-TIME           PIC S9(7) COMP-3.
               04  USE-DATE           PIC S9(7) COMP-3.
           02  USE-LIMIT              PIC S9(7) COMP-3 VALUE +1000.
           02  USE-ITEM               PIC S9(4) COMP VALUE +1.
           02  USE-LNG                PIC S9(4) COMP VALUE +12.
           02  IN-AREA.
               04  IN-TYPE            PIC X VALUE 'R'.
               04  IN-REQ.
                   06  REQC           PIC X VALUE SPACES.
                   06  ACCTC          PIC X(5) VALUE SPACES.
                   06  PRTRC          PIC X(4) VALUE SPACES.
               04  IN-NAMES.
                   06  SNAMEC         PIC X(18) VALUE SPACES.
                   06  FNAMEC         PIC X(12) VALUE SPACES.
           02  COMMAREA-FOR-ACCT04.
               04  ERR-PGRMID         PIC X(8) VALUE 'ACCT01'.
               04  ERR-FN             PIC X.
               04  ERR-RCODE          PIC X.
               04  ERR-COMMAND        PIC XX.
               04  ERR-RESP           PIC 99.
           02  LINE-CNT               PIC S9(4) COMP VALUE +0.
           02  MAX-LINES              PIC S9(4) COMP VALUE +6.
           02  IX                     PIC S9(4) COMP.
           02  SRCH-CTRL.
               04  FILLER             PIC X VALUE 'S'.
               04  BRKEY.
                   06  BRKEY-SNAME    PIC X(12).
                   06  BRKEY-ACCT     PIC X(5).
               04  MAX-SNAME          PIC X(12).
               04  FILLER REDEFINES MAX-SNAME.
                 06  TEMPA            PIC X OCCURS 12 INDEXED BY INDXA.
               04  MAX-FNAME          PIC X(7).
               04  FILLER REDEFINES MAX-FNAME.
                 06  TEMPB            PIC X OCCURS 7 INDEXED BY INDXB.
               04  MIN-FNAME          PIC X(7).
               04  FILLER REDEFINES MIN-FNAME.
                 06  TEMPC            PIC X OCCURS 7 INDEXED BY INDXC.
           02  SUM-LINE.
               04  ACCTDO             PIC X(5).
               04  FILLER             PIC X(3) VALUE SPACES.
               04  SNAMEDO            PIC X(12).
               04  FILLER             PIC X(2) VALUE SPACES.
               04  FNAMEDO            PIC X(7).
               04  FILLER             PIC X(2) VALUE SPACES.
               04  MIDO               PIC X(1).
               04  FILLER             PIC X(2) VALUE SPACES.
               04  TTLDO              PIC X(4).
               04  FILLER             PIC X(2) VALUE SPACES.
               04  ADDR1DO            PIC X(24).
               04  FILLER             PIC X(2) VALUE SPACES.
               04  STATDO             PIC X(2).
               04  FILLER             PIC X(3) VALUE SPACES.
               04  LIMITDO            PIC X(8).
           02  PAY-LINE.
               04  BAL                PIC X(8).
               04  FILLER             PIC X(6) VALUE SPACES.
               04  BMO                PIC 9(2).
               04  FILLER             PIC X VALUE '/'.
               04  BDAY               PIC 9(2).
               04  FILLER             PIC X VALUE '/'.
      * NEXT 2 LINES CHANGED UNDER APAR                       @P4C
               04  BYR                PIC 9(4).
               04  FILLER             PIC X(2) VALUE SPACES.
               04  BAMT               PIC X(8).
               04  FILLER             PIC X(7) VALUE SPACES.
               04  PMO                PIC 9(2).
               04  FILLER             PIC X VALUE '/'.
               04  PDAY               PIC 9(2).
               04  FILLER             PIC X VALUE '/'.
      * NEXT 2 LINES CHANGED UNDER APAR                       @P4C
               04  PYR                PIC 9(4).
               04  FILLER             PIC X(2) VALUE SPACES.
               04  PAMT               PIC X(8).
           COPY DFHBMSCA.
           COPY DFHAID.
       01  ACCTREC. COPY ACCTREC.
       01  ACIXREC. COPY ACIXREC.
           COPY ACCTSET.
       01  MSG-LIST.
           02  FILLER                PIC X(60) VALUE
               'NAMES MUST BE ALPHABETIC, AND SURNAME IS REQUIRED.'.
           02  FILLER                PIC X(60) VALUE
               'ENTER SOME INPUT AND PRESS "CLEAR" OR "ENTER".'.
           02  FILLER                PIC X(60) VALUE
           'REQUEST TYPE REQUIRED; MUST BE "D", "P", "A", "M" OR "X".'.
           02  FILLER                PIC X(60) VALUE
               'PRINTER NAME REQUIRED ON PRINT REQUESTS'.
           02  FILLER                PIC X(60) VALUE
               'ACCOUNT NUMBER REQUIRED (BETWEEN 10000 AND 79999)'.
           02  FILLER                PIC X(60) VALUE
               'ACCOUNT NO. MUST BE NUMERIC AND FROM 10000 TO 79999'.
           02  FILLER                PIC X(60) VALUE
               'NO NAMES ON FILE MATCHING YOUR REQUEST'.
           02  FILLER                PIC X(60) VALUE
               'ENTER EITHER NAME OR A REQUEST TYPE AND ACCOUNT NUMBER'.
           02  FILLER                PIC X(60) VALUE
               'THIS ACCOUNT NUMBER ALREADY EXISTS'.
           02  FILLER                PIC X(60) VALUE
               'NO RECORD OF THIS ACCOUNT NUMBER'.
           02  FILLER                PIC X(47) VALUE
               'THIS ACCOUNT NUMBER ALREADY IN USE AT TERMINAL '.
           02  MSG-TERM              PIC X(13).
           02  FILLER                PIC X(60) VALUE
               'PRINT REQUEST SCHEDULED'.
           02  FILLER                PIC X(60) VALUE
               'PRINTER NAME NOT RECOGNIZED'.
           02  FILLER                PIC X(60) VALUE
           'INVALID KEY PRESSED - USE ONLY "CLEAR" OR "ENTER" KEY'.
           02  FILLER                PIC X(60) VALUE
              'THERE ARE MORE MATCHING NAMES. PRESS PA2 TO CONTINUE.'.
       01  FILLER REDEFINES MSG-LIST.
           02  MSG-TEXT              PIC X(60) OCCURS 15.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           02  SRCH-COMM.
               03 IN-COMM.
                   04 CTYPE PIC X.
                      88 REPEAT-MAP VALUE 'R'.
                      88 SEARCH-CONTINUE VALUE 'S'.
                   04 FILLER PIC X(40).
               03 FILLER PIC X(3).

      *
       PROCEDURE DIVISION.
      *
      *
      *    INITIALIZE.
      *    TRAP ANY UNEXPECTED ERRORS.
           EXEC CICS HANDLE CONDITION ERROR(OTHER-ERRORS) END-EXEC.
      *
           MOVE LOW-VALUES TO ACCTMNUI, ACCTDTLI.
           MOVE SPACES TO SUMLNMO (1) SUMLNMO (2) SUMLNMO (3)
                          SUMLNMO (4) SUMLNMO (5) SUMLNMO (6).
           MOVE SPACES TO MSGMO.
      *
      *    CHECK BASIC REQUEST TYPE.
           IF EIBAID = DFHCLEAR
               IF EIBCALEN = 0,
                   EXEC CICS SEND CONTROL FREEKB END-EXEC
                   EXEC CICS RETURN END-EXEC
               ELSE GO TO NEW-MENU.
           IF EIBAID = DFHPA2 AND EIBCALEN > 0 AND SEARCH-CONTINUE
               MOVE SRCH-COMM TO SRCH-CTRL, GO TO SRCH-RESUME.
           MOVE DFHBMDAR TO SUMTTLMA.
           IF EIBAID NOT = DFHENTER MOVE 14 TO MSG-NO
               GO TO MENU-RESEND.
           IF EIBCALEN > 0 AND REPEAT-MAP, MOVE IN-COMM TO IN-AREA.
      *
      *    GET INPUT AND CHECK REQUEST TYPE FURTHER.
           EXEC CICS RECEIVE MAP('ACCTMNU')
                     MAPSET('ACCTSET') RESP(RESPONSE) END-EXEC.
           IF RESPONSE = DFHRESP(MAPFAIL) GO TO NO-MAP.
           IF RESPONSE NOT = DFHRESP(NORMAL) GO TO OTHER-ERRORS.
           IF REQML > 0 MOVE REQMI TO REQC.
           IF REQMF NOT = LOW-VALUE, MOVE SPACE TO REQC.
           IF ACCTML > 0 MOVE ACCTMI TO ACCTC.
           IF ACCTMF NOT = LOW-VALUE, MOVE SPACES TO ACCTC.
           IF PRTRML > 0 MOVE PRTRMI TO PRTRC.
           IF PRTRMF NOT = LOW-VALUE, MOVE SPACES TO PRTRC.
           IF SNAMEML > 0 MOVE SNAMEMI TO SNAMEC.
           IF SNAMEMF NOT = LOW-VALUE, MOVE SPACES TO SNAMEC.
           IF FNAMEML > 0 MOVE FNAMEMI TO FNAMEC.
           IF FNAMEMF NOT = LOW-VALUE, MOVE SPACES TO FNAMEC.
           MOVE LOW-VALUES TO ACCTMNUI.
           IF IN-NAMES = SPACES GO TO CK-ANY.
      *
      *    NAME INQUIRY PROCESSING.
      *    VALIDATE NAME INPUT.
           IF FNAMEC NOT ALPHABETIC, MOVE 1 TO MSG-NO,
               MOVE -1 TO FNAMEML, MOVE DFHBMBRY TO FNAMEMA.
           IF SNAMEC ALPHABETIC AND SNAMEC NOT = SPACES GO TO CK-NAME.
           MOVE 1 TO MSG-NO.
           MOVE -1 TO SNAMEML, MOVE DFHBMBRY TO SNAMEMA.
       CK-NAME.
           IF MSG-NO > 0 GO TO MENU-RESEND.
      *
      *    BUILD KEY AND LIMITING NAME VALUES FOR SEARCH.
       SRCH-INIT.
           MOVE SNAMEC TO BRKEY-SNAME, MAX-SNAME.
           MOVE LOW-VALUES TO BRKEY-ACCT.
      *    THESE PARAGRAPHS MAY BE REPLACED BY INSPECTS IN COBOLII.
       INSP-MAX-SNAME.
           SEARCH TEMPA VARYING INDXA
           AT END GO TO INSP-MAX-SNAME-END
           WHEN TEMPA(INDXA) EQUAL TO SPACE
                          MOVE HIGH-VALUES TO TEMPA(INDXA)
           GO TO INSP-MAX-SNAME.
       INSP-MAX-SNAME-END.
           MOVE FNAMEC TO MIN-FNAME, MAX-FNAME.
       INSP-MIN-FNAME.
           SEARCH TEMPC VARYING INDXC
           AT END GO TO INSP-MIN-FNAME-END
           WHEN TEMPC(INDXC) EQUAL TO SPACE
                          MOVE LOW-VALUES TO TEMPC(INDXC).
           GO TO INSP-MIN-FNAME.
       INSP-MIN-FNAME-END.
       INSP-MAX-FNAME.
           SEARCH TEMPB VARYING INDXB
           AT END GO TO INSP-MAX-FNAME-END
           WHEN TEMPB(INDXB) EQUAL TO SPACE
                          MOVE HIGH-VALUES TO TEMPB(INDXB).
           GO TO INSP-MAX-FNAME.
       INSP-MAX-FNAME-END.
      *
      *    INITIALIZE FOR SEQUENTIAL SEARCH.
       SRCH-RESUME.
           EXEC CICS STARTBR FILE('ACCTIX') RIDFLD(BRKEY) GTEQ
               RESP(RESPONSE) END-EXEC.
           IF RESPONSE = DFHRESP(NOTFND) GO TO SRCH-ANY.
           IF RESPONSE NOT = DFHRESP(NORMAL) GO TO OTHER-ERRORS.
      *
      *    BUILD NAME DISPLAY.
       SRCH-LOOP.
           EXEC CICS READNEXT FILE('ACCTIX') INTO(ACIXREC)
               LENGTH(ACIX-LNG) RIDFLD(BRKEY) RESP(RESPONSE) END-EXEC.
           IF RESPONSE = DFHRESP(ENDFILE) GO TO SRCH-DONE.
           IF RESPONSE NOT = DFHRESP(NORMAL) GO TO OTHER-ERRORS.
           IF SNAMEDO IN ACIXREC > MAX-SNAME GO TO SRCH-DONE.
           IF FNAMEDO IN ACIXREC < MIN-FNAME OR
               FNAMEDO IN ACIXREC > MAX-FNAME, GO TO SRCH-LOOP.
           ADD 1 TO LINE-CNT.
           IF LINE-CNT > MAX-LINES,
               MOVE MSG-TEXT (15) TO MSGMO,
               MOVE DFHBMBRY TO MSGMA, GO TO SRCH-DONE.
           MOVE CORRESPONDING ACIXREC TO SUM-LINE.
           MOVE SUM-LINE TO SUMLNMO (LINE-CNT).
           GO TO SRCH-LOOP.
       SRCH-DONE.
           EXEC CICS ENDBR FILE('ACCTIX') END-EXEC.
       SRCH-ANY.
           IF LINE-CNT = 0, MOVE 7 TO MSG-NO,
               MOVE -1 TO SNAMEML, GO TO MENU-RESEND.
      *
      *    SEND THE NAME SEARCH RESULTS TO TERMINAL.
           MOVE DFHBMASB TO MSGMA, SUMTTLMA.
           EXEC CICS SEND MAP('ACCTMNU') MAPSET('ACCTSET')
               FREEKB ERASE END-EXEC.
           IF LINE-CNT NOT > MAX-LINES,
               EXEC CICS RETURN TRANSID('AC01') END-EXEC
           ELSE EXEC CICS RETURN TRANSID('AC01') COMMAREA(SRCH-CTRL)
                   LENGTH(44) END-EXEC.
      *
      *    DISPLAY, PRINT, ADD, MODIFY AND DELETE PROCESSING.
      *    CHECK ACCOUNT NUMBER.
       CK-ANY.
           IF IN-REQ = SPACES, MOVE -1 TO SNAMEML,
               MOVE 8 TO MSG-NO, GO TO MENU-RESEND.
       CK-ACCTNO-1.
           IF ACCTC = SPACES
               MOVE 5 TO MSG-NO, GO TO ACCT-ERR.
           IF (ACCTC < '10000' OR ACCTC > '79999' OR ACCTC NOT NUMERIC),
               MOVE 6 TO MSG-NO, GO TO ACCT-ERR.
       CK-ACCTNO-2.
           EXEC CICS READ FILE('ACCTFIL') RIDFLD(ACCTC) RESP(RESPONSE)
               INTO(ACCTREC) LENGTH(ACCT-LNG) END-EXEC.
           IF RESPONSE = DFHRESP(NOTFND) GO TO NO-ACCT-RECORD.
           IF RESPONSE NOT = DFHRESP(NORMAL) GO TO OTHER-ERRORS.
           IF REQC = 'A',
               MOVE 9 TO MSG-NO, GO TO ACCT-ERR,
           ELSE GO TO CK-REQ.
       NO-ACCT-RECORD.
           IF REQC = 'A', GO TO CK-REQ.
           MOVE 10 TO MSG-NO.
       ACCT-ERR.
           MOVE -1 TO ACCTML, MOVE DFHBMBRY TO ACCTMA.
      *
      *    CHECK REQUEST TYPE.
       CK-REQ.
           IF REQC =  'D' OR 'P' OR 'A' OR 'M' OR 'X',
               IF MSG-NO = 0 GO TO CK-USE, ELSE GO TO MENU-RESEND.
           MOVE -1 TO REQML, MOVE DFHBMBRY TO REQMA,
           MOVE 3 TO MSG-NO.
           GO TO MENU-RESEND.
      *
      *    TEST IF ACCOUNT NUMBER IN USE, ON UPDATES ONLY.
       CK-USE.
           IF REQC = 'P' OR 'D' GO TO BUILD-MAP.
           MOVE ACCTC TO USE-QID2.
           EXEC CICS READQ TS QUEUE(USE-QID) INTO(USE-REC)
               ITEM(USE-ITEM) LENGTH(USE-LNG) RESP(RESPONSE) END-EXEC.
           IF RESPONSE = DFHRESP(QIDERR) GO TO RSRV-1.
           IF RESPONSE NOT = DFHRESP(NORMAL) GO TO OTHER-ERRORS.
           ADD USE-LIMIT TO USE-TIME.
           IF USE-TIME > 236000, ADD 1 TO USE-DATE,
               SUBTRACT 236000 FROM USE-TIME.
           IF USE-DATE > EIBDATE OR
               (USE-DATE = EIBDATE AND USE-TIME NOT < EIBTIME)
               MOVE USE-TERM TO MSG-TERM, MOVE 11 TO MSG-NO,
               MOVE -1 TO ACCTML, MOVE DFHBMBRY TO ACCTMA,
               GO TO MENU-RESEND.
      *
      *    RESERVE ACCOUNT NUMBER.
       RSRV.
           MOVE EIBTRMID TO USE-TERM, MOVE EIBTIME TO USE-TIME.
           MOVE EIBDATE TO USE-DATE.
           EXEC CICS WRITEQ TS QUEUE(USE-QID) FROM(USE-REC)
               LENGTH(12) ITEM(USE-ITEM) REWRITE END-EXEC.
           GO TO BUILD-MAP.
       RSRV-1.
           MOVE EIBTRMID TO USE-TERM, MOVE EIBTIME TO USE-TIME.
           MOVE EIBDATE TO USE-DATE.
           EXEC CICS WRITEQ TS QUEUE(USE-QID) FROM(USE-REC)
               LENGTH(12) END-EXEC.
      *
      *    BUILD THE RECORD DISPLAY.
       BUILD-MAP.
           IF REQC = 'X' MOVE 'DELETION' TO TITLEDO,
               MOVE -1 TO VFYDL, MOVE DFHBMUNP TO VFYDA,
               MOVE 'ENTER "Y" TO CONFIRM OR "CLEAR" TO CANCEL'
                   TO MSGDO,
           ELSE MOVE -1 TO SNAMEDL.
           IF REQC = 'A' MOVE 'NEW RECORD' TO TITLEDO,
               MOVE DFHPROTN TO STATTLDA, LIMTTLDA, HISTTLDA,
               MOVE ACCTC TO ACCTDI,
               MOVE 'FILL IN AND PRESS "ENTER," OR "CLEAR" TO CANCEL'
                   TO MSGDO,
               GO TO SEND-DETAIL.
           IF REQC = 'M' MOVE 'RECORD CHANGE' TO TITLEDO,
               MOVE 'MAKE CHANGES AND "ENTER" OR "CLEAR" TO CANCEL'
                   TO MSGDO,
           ELSE IF REQC = 'D',
                   MOVE 'PRESS "CLEAR" OR "ENTER" WHEN FINISHED'
                       TO MSGDO.
           MOVE ACCTDO IN ACCTREC TO ACCTDO IN ACCTDTLO.
           MOVE SNAMEDO IN ACCTREC TO SNAMEDO IN ACCTDTLO.
           MOVE FNAMEDO IN ACCTREC TO FNAMEDO IN ACCTDTLO.
           MOVE MIDO IN ACCTREC TO MIDO IN ACCTDTLO.
           MOVE TTLDO IN ACCTREC TO TTLDO IN ACCTDTLO.
           MOVE TELDO IN ACCTREC TO TELDO IN ACCTDTLO.
           MOVE ADDR1DO IN ACCTREC TO ADDR1DO IN ACCTDTLO.
           MOVE ADDR2DO IN ACCTREC TO ADDR2DO IN ACCTDTLO.
           MOVE ADDR3DO IN ACCTREC TO ADDR3DO IN ACCTDTLO.
           MOVE AUTH1DO IN ACCTREC TO AUTH1DO IN ACCTDTLO.
           MOVE AUTH2DO IN ACCTREC TO AUTH2DO IN ACCTDTLO.
           MOVE AUTH3DO IN ACCTREC TO AUTH3DO IN ACCTDTLO.
           MOVE AUTH4DO IN ACCTREC TO AUTH4DO IN ACCTDTLO.
           MOVE CARDSDO IN ACCTREC TO CARDSDO IN ACCTDTLO.
           MOVE IMODO IN ACCTREC TO IMODO IN ACCTDTLO.
           MOVE IDAYDO IN ACCTREC TO IDAYDO IN ACCTDTLO.
      * FOLLOWING LINE CHANGED AND NEXT 4 ADDED UNDER APAR    @P4C
           MOVE IYRDO IN ACCTREC TO WS-YR-2.
           IF WS-YR-2 > '75'
                MOVE '19' TO WS-CC
           ELSE MOVE '20' TO WS-CC.
           MOVE WS-YR-4 TO IYRDO IN ACCTDTLO.
           MOVE RSNDO IN ACCTREC TO RSNDO IN ACCTDTLO.
           MOVE CCODEDO IN ACCTREC TO CCODEDO IN ACCTDTLO.
           MOVE APPRDO IN ACCTREC TO APPRDO IN ACCTDTLO.
           MOVE SCODE1DO IN ACCTREC TO SCODE1DO IN ACCTDTLO.
           MOVE SCODE2DO IN ACCTREC TO SCODE2DO IN ACCTDTLO.
           MOVE SCODE3DO IN ACCTREC TO SCODE3DO IN ACCTDTLO.
           MOVE STATDO IN ACCTREC TO STATDO IN ACCTDTLO.
           MOVE LIMITDO IN ACCTREC TO LIMITDO IN ACCTDTLO.
           MOVE CORRESPONDING PAY-HIST (1) TO PAY-LINE.
           MOVE PAY-LINE TO HIST1DO.
           MOVE CORRESPONDING PAY-HIST (2) TO PAY-LINE.
           MOVE PAY-LINE TO HIST2DO.
           MOVE CORRESPONDING PAY-HIST (3) TO PAY-LINE.
           MOVE PAY-LINE TO HIST3DO.
           IF REQC  = 'M' GO TO SEND-DETAIL,
           ELSE IF REQC = 'P' GO TO PRINT-PROC.
           MOVE DFHBMASK TO
               SNAMEDA, FNAMEDA, MIDA, TTLDA, TELDA, ADDR1DA,
               ADDR2DA, ADDR3DA, AUTH1DA, AUTH2DA, AUTH3DA,
               AUTH4DA, CARDSDA, IMODA, IDAYDA, IYRDA, RSNDA,
               CCODEDA, APPRDA, SCODE1DA, SCODE2DA, SCODE3DA.
      *
      *    SEND THE RECORD DETAIL MAP TO THE TERMINAL.
       SEND-DETAIL.
           EXEC CICS SEND MAP('ACCTDTL') MAPSET('ACCTSET') ERASE FREEKB
               CURSOR END-EXEC.
           IF REQC = 'D', EXEC CICS RETURN TRANSID('ACCT') END-EXEC,
           ELSE EXEC CICS RETURN TRANSID('AC02')
                   COMMAREA(IN-REQ) LENGTH(6) END-EXEC.
      *
      *    START UP A TASK TO PRINT THE RECORD.
       PRINT-PROC.
           IF PRTRC = SPACES
               MOVE 4 TO MSG-NO, GO TO TERMID-ERR1.
           EXEC CICS START TRANSID('AC03') FROM(ACCTDTLO)
               LENGTH(DTL-LNG) TERMID(PRTRC) RESP(RESPONSE) END-EXEC.
           IF RESPONSE = DFHRESP(TERMIDERR) GO TO TERMID-ERR.
           IF RESPONSE NOT = DFHRESP(NORMAL) GO TO OTHER-ERRORS.
           MOVE MSG-TEXT (12) TO MSGMO.
           EXEC CICS SEND MAP('ACCTMNU') MAPSET ('ACCTSET') DATAONLY
                ERASEAUP FREEKB END-EXEC.
           EXEC CICS RETURN TRANSID('AC01') END-EXEC.
       TERMID-ERR.
           MOVE 13 TO MSG-NO.
       TERMID-ERR1.
           MOVE -1 TO PRTRML, MOVE DFHBMBRY TO PRTRMA.
      *
      *    ERROR PROCESSING, FOR ALL REQUESTS.
      *    RESEND MENU SCREEN.
       MENU-RESEND.
           MOVE REQC TO REQMI.
           MOVE ACCTC TO ACCTMI.
           MOVE PRTRC TO PRTRMI.
           MOVE SNAMEC TO SNAMEMI.
           MOVE FNAMEC TO FNAMEMI.
           MOVE MSG-TEXT (MSG-NO) TO MSGMO.
           EXEC CICS SEND MAP('ACCTMNU') MAPSET('ACCTSET')
               CURSOR DATAONLY FRSET ERASEAUP FREEKB END-EXEC.
           EXEC CICS RETURN TRANSID('AC01') COMMAREA(IN-AREA)
                   LENGTH(41) END-EXEC.
      *
      *    PROCESSING FOR MAP FAILURES, CLEARS.
       NO-MAP.
           MOVE 2 TO MSG-NO, MOVE -1 TO SNAMEML, GO TO MENU-RESEND.
       NEW-MENU.
           EXEC CICS SEND MAP('ACCTMNU') MAPSET('ACCTSET')
               FREEKB ERASE END-EXEC.
           EXEC CICS RETURN TRANSID ('AC01') END-EXEC.
      *
      *    PROCESSING FOR UNEXPECTED ERRORS.
       OTHER-ERRORS.
           MOVE EIBFN TO ERR-FN, MOVE EIBRCODE TO ERR-RCODE.
           MOVE EIBFN TO ERR-COMMAND, MOVE EIBRESP TO ERR-RESP.
           EXEC CICS HANDLE CONDITION ERROR END-EXEC.
           EXEC CICS LINK PROGRAM('ACCT04')
               COMMAREA(COMMAREA-FOR-ACCT04) LENGTH(14) END-EXEC.
           GOBACK.
