.**********************************************************************
.*                                                                    *
.* MODULE NAME = DFH99MAC                                             *
.*                                                                    *
.* DESCRIPTIVE NAME = Dynamic Allocation Sample Program               *
.*                    Macro Functions                                 *
.*                                                                    *
.*                                                                    *
.*                                                                    *
.*     Licensed Materials - Property of IBM                           *
.*                                                                    *
.*     "Restricted Materials of IBM"                                  *
.*                                                                    *
.*     5655-Y04                                                       *
.*                                                                    *
.*     (C) Copyright IBM Corp. 1980, 1993"                            *
.*                                                                    *
.*                                                                    *
.*                                                                    *
.*                                                                    *
.* STATUS = 7.2.0                                                     *
.*                                                                    *
.*--------------------------------------------------------------------*
.*                                                                    *
.* THIS MACRO CONTAINS ALL THE MACRO FUNCTIONS THAT ARE USED IN MORE  *
.* THAN ONE DFH99 MODULE.                                             *
.*                                                                    *
.* THE FIRST OPERAND IS THE FUNCTION REQUIRED.                        *
.*                                                                    *
.*--------------------------------------------------------------------*
.*                                                                    *
.* CHANGE ACTIVITY :                                                  *
.* $MAC(DFH99MAC),COMP(SAMPLES),PROD(CICS TS ):                       *
.*                                                                    *
.*    PN= REASON REL YYMMDD HDXIII : REMARKS                          *
*    $P0= Mnnnnn 170 800925 HDZZUNK: Created.                         *
.*   $P1= M90474 330 910807 HDBWSH : Prologue fixed.                  *
.*   $P2= M84450 410 931108 HD4OGB : SUPPORT FOR MACRO PLISTS         *
.*                                                                    *
.**********************************************************************
         MACRO
&NAME    DFH99M &CLASS,            FUNCTION TO DO                      *
               &TYP,               FIRST POSITIONAL OP OF FUNCTION     *
               &OP,                SECOND POSITIONAL OP OF FUNCTION    *
               &FORMAT=,           FOR BLDMSG                          *
               &SA=YES,            'NO' IF NO SAVEAREA NEEDED          *
               &PARMS=NO,          LIST OF PARM NAMES, OR NO           *
               &MAP=,              S99 TO INVOKE IEFZBD0/2             *
               &REGS=,             LIST OF REGISTER NAMES USED         *
               &RC=,               RETURN CODE (EPILOG)                *
               &KW=,               BRANCH LABEL IF KEYWORD (NEXTOK)    *
               &HELP=,             BRANCH LABEL IF HELP        "       *
               &NUM=,              BRANCH LABEL IF NUMERIC     "       *
               &LP=,               BRANCH LABEL IF (           "       *
               &RP=,               BRANCH LABEL IF )           "       *
               &END=,              BRANCH LABEL IF END         "       *
               &TYPE=              CHAINRET TYPE
         GBLC  &ANSWER STORE       NAME RETURNED TO CALLER
         GBLB  &CHRDS  CHAINRET    1 IF DSECT ALREADY GENERATED
         GBLB  &M1     BLDMSG      OFF FOR FIRST SEGMENT
         GBLB  &NOAUTO AUTO        SWITCH SET BY PROLOG
         GBLC  &N4     PROLOG      LAST 2 CHARS OF CSECT NAME
         GBLA  &O      BLDMSG      OFFSET DOWN PARMLIST
         GBLA  &STOREI STORE       INDEXES LAST USED SLOT
         GBLC  &STORENM(256)       CORRESPONDING LABEL
         GBLC  &STOREV(256)        STORED VALUES
         LCLA  &CP     INVOKE      CURRENT PARM BEING PROCESSED
         LCLA  &ER     PROLOG
         LCLC  &E4     INVOKE      1ST 4 CHARS OF ENTRY NAME
         LCLA  &I      STORE       CURRENT SLOT (SEARCHING)
         LCLA  &IR     PROLOG
         LCLA  &K      TOKEN
         LCLC  &L      CHAINRET
         LCLA  &LVV    BLDMSG      LENGTH OF VALUE WITHOUT PARENS
         LCLA  &M      ERRSTOP
         LCLC  &PMN    INVOKE      PARMNAME (INDIRECT)
         LCLC  &PN     INVOKE      PARMLIST NAME
         LCLC  &N      BLDMSG
         LCLA  &NP     INVOKE      NUMBER OF PARMS
         LCLA  &NR     PROLOG      NO OF REGISTERS TO BE EQUATED
         LCLA  &NV     TOKEN
         LCLA  &OF     INVOKE      CURRENT OFFSET INTO PARMLIST
         LCLA  &PML    INVOKE      LENGTH-1 OF INDIRECT PARM
         LCLC  &R(8)   PROLOG      REGISTER NAMES
         LCLA  &S      BLDMSG      SEVERITY CODED
         LCLC  &TL     TOKEN
         LCLC  &V      TOKEN
         LCLA  &VA     BLDMSG      FIRST CHAR OF VALUE (ARITH)
         LCLC  &VV     BLDMSG      VALUE WITHOUT PARENS
         LCLC  &V1     BLDMSG      FIRST CHAR OF VALUE (CHAR)
         AIF   ('&CLASS' NE 'AUTO').M99A
.**********************************************************************
.*       AUTO - DEFINE A PIECE OF AUTOMATIC STORAGE                   *
.**********************************************************************
         AIF   (NOT &NOAUTO).AUTOGEN
         MNOTE 8,'AUTO NOT ALLOWED WHEN NO SAVEAREA, OR AFTER EPILOG'
         MEXIT
.AUTOGEN SPACE 2
DFHEISTG DSECT
         AIF   ('&OP' EQ '').AUTO2                                 @P2A
         AIF   ('&TYP' EQ '').AUTO1                                @P2A
         &OP &TYP,MF=(L,&NAME)                                     @P2A
&SYSECT  CSECT  ,                                                  @P2A
         MEXIT  ,                                                  @P2A
.AUTO1   ANOP  ,                                                   @P2A
         &OP MF=(L,&NAME)                                          @P2A
&SYSECT  CSECT  ,                                                  @P2A
         MEXIT  ,                                                  @P2A
.AUTO2   ANOP  ,                                                   @P2A
&NAME    DS    &TYP
&SYSECT  CSECT
         SPACE 2
         MEXIT
.M99A    AIF   ('&CLASS' EQ 'ID').M99BLD
         AIF   ('&CLASS' EQ 'TEXT').M99BLD
         AIF   ('&CLASS' EQ 'INSERT').M99BLD
         AIF   ('&CLASS' NE 'FILE').M99B
.M99BLD  ANOP  ,
.**********************************************************************
.*       BLDMSG - DEFINE A MESSAGE SEGMENT                            *
.* CLASS                                                              *
.*    ID        NUMERIC MESSAGE ID, 1 - 99999                         *
.*    TEXT      WORDS IN PARENS SEPARATED BY COMMAS, 2 COMMAS FOR 1   *
.*    INSERT    VALUE IS OF TYPE GIVEN BY FORMAT                      *
.*    FILE      THE MESSAGE IS NOW BUILT, AND MSGPROC IS CALLED TO    *
.*              ADD IT TO THE MESSAGE FILE.                           *
.*                                                                    *
.* FORMATS                                                            *
.*    TOKEN     VALUE IS ALREADY A SELF-DEFINING TOKEN                *
.*    BIN       VALUE IS A 4 BYTE BINARY NUMBER                       *
.*    HEX1      VALUE IS ADDRESS OF 1 BYTE HEX VALUE                  *
.*    HEX2      VALUE IS ADDRESS OF 2 BYTE HEX VALUE                  *
.*    HEX4      VALUE IS ADDRESS OF 4 BYTE HEX VALUE                  *
.*    TOKENLIST VALUE IS ADDRESS OF A LIST OF TOKEN POINTERS          *
.*                                                                    *
.* THE MACRO IS USED REPEATEDLY TO DEFINE EACH SEGMENT OF A MESSAGE,  *
.* THE OUTPUT BEING BUILT IN PARMLIST IN COMM.                        *
.* FILE SHOULD BE USED LAST, TO TERMINATE THE PARAMETER LIST AND      *
.* PASS IT TO THE MESSAGE PROCESSOR.                                  *
.**********************************************************************
         AIF   ('&NAME' EQ '').NBY SKIP DS IF NO NAME
&NAME    DS    0H
.NBY     ANOP
&N       SETC  '&SYSNDX'
         AIF   (&M1).INTER         BRANCH IF INTERMEDIATE SEGMENT
         AIF   ('&CLASS' EQ 'ID').IDOK FIRST SEGMENT MUST BE ID
         MNOTE 8,'&CLASS INVALID, FIRST SEGMENT MUST BE ID'
         MEXIT
.IDOK    ANOP
&V1      SETC  '&TYP'(1,1)           GET SEVERITY NUMBER
&VA      SETA  &V1                 .. ARITHMETICALLY
&S       SETA  1
.NEXTS   ANOP
&VA      SETA  &VA-1
         AIF   (&VA EQ 0).SETS
&S       SETA  &S+&S
         AGO   .NEXTS
.SETS    OI    SEVERITY,&S
&M1      SETB  1                   SHOW ID SEGMENT DONE
&O       SETA  -4                  ID WILL BE AT AT OFFSET 0
.* IF USED, THE FOLLOWING CODE BUILDS A MESSAGE ID AT THE FRONT
         AGO   .SKIPID             ANOP THIS TO GET MESSAGE ID'S
&O       SETA  &O+4                UPDATE OFFSET
M&N.A    BAL   1,M&N.B             POINT AT MSG ID TOKEN
         DC    AL1(TKW)
         DC    AL1(M&N.E-*-1)
         DC    C'&N4&TYP'          MODULE||MESSAGE NUMBER
M&N.E    EQU   *
M&N.B    LA    1,0(,1)             CLEAR HI-ORDER BYTE
         ST    1,MSG+&O            STORE A(TOKEN) IN PLIST
.SKIPID  ANOP  ,
         MEXIT
.**********************************************************************
.* INTERMEDIATE TYPES                                                 *
.**********************************************************************
.INTER   ANOP
&O       SETA  &O+4                UPDATE OFFSET
         AIF   (&O LE 36).CHKTYP   10 WORDS AVAILABLE
         MNOTE 8,'MORE THAN 10 SEGMENTS OF MSG, COMM MUST BE CHANGED'
.CHKTYP  AIF   ('&CLASS' NE 'TEXT').TXBY
.**********************************************************************
.* TEXT SEGMENT                                                       *
.**********************************************************************
M&N.A    B     M&N.B               BR ROUND TOKEN
M&N.E    DFH99M TOKEN,&TYP
M&N.B    LA    1,M&N.E             ADDRESS TOKEN
         ST    1,MSG+&O            STORE A(TOKEN) IN PLIST
         MEXIT
.TXBY    AIF   ('&CLASS' NE 'INSERT').INSBY
.**********************************************************************
.* INSERT SEGMENT                                                     *
.**********************************************************************
         AIF   ('&FORMAT' NE 'TOKEN').FTBY
.**********************************************************************
.* INSERT SEGMENT - TOKEN TYPE                                        *
.**********************************************************************
         AIF   ('&TYP'(1,1) NE '(').FTLA
         ST    &TYP(1),MSG+&O      STORE A(TOKEN) IN PLIST
         MEXIT
.FTLA    LA    1,&TYP
         ST    1,MSG+&O            STORE A(TOKEN) IN PLIST
         MEXIT
.FTBY    AIF   ('&FORMAT' NE 'BIN').FBBY
.**********************************************************************
.* INSERT SEGMENT - BINARY TYPE                                       *
.**********************************************************************
M&N.A    DFH99M AUTO,CL5           GET STORAGE FOR VALUE
         MVI   M&N.A,TBIN4         SET 4 BYTE BINARY TOKEN TYPE
         AIF   ('&TYP'(1,1) NE '(').FBNR
         STCM  &TYP(1),15,M&N.A+1  PUT VALUE IN TOKEN
         AGO   .FBPL
.FBNR    MVC   M&N.A+1(4),&TYP     PUT VALUE IN TOKEN
.FBPL    LA    1,M&N.A             STORE A(TOKEN) IN LIST
         ST    1,MSG+&O            STORE A(TOKEN) IN LIST
         MEXIT
.FBBY    AIF   ('&FORMAT'(1,3) NE 'HEX').FHBY
.**********************************************************************
.* INSERT SEGMENT - HEX TYPE                                          *
.**********************************************************************
         AIF   ('&FORMAT'(4,1) EQ '1').HOK
         AIF   ('&FORMAT'(4,1) EQ '2').HOK
         AIF   ('&FORMAT'(4,1) EQ '4').HOK
         MNOTE 8,'&FORMAT SHOULD BE HEX2 OR HEX4'
         MEXIT
.HOK     ANOP
M&N.A    DFH99M AUTO,CL5           GET STORAGE FOR VALUE
         MVI   M&N.A,T&FORMAT      SET HEX TOKEN TYPE
         AIF   ('&TYP'(1,1) NE '(').FHNR
         STCM  &TYP(1),15,M&N.A+1  PUT A(HEX VALUE) IN TOKEN
         AGO   .FHPL
.FHNR    LA    0,&TYP              GET A(HEX VALUE)
         STCM  0,15,M&N.A+1        PUT ADDRESS IN TOKEN
.FHPL    LA    1,M&N.A             STORE A(TOKEN) IN LIST
         ST    1,MSG+&O            STORE A(TOKEN) IN LIST
         MEXIT
.FHBY    AIF   ('&FORMAT' NE 'TOKENLIST').FTLBY
.**********************************************************************
.* INSERT SEGMENT - TOKENLIST TYPE                                    *
.**********************************************************************
M&N.A    DFH99M AUTO,CL5           GET STORAGE FOR VALUE
         MVI   M&N.A,TLIST         SET TOKENLIST TOKEN TYPE
         AIF   ('&TYP'(1,1) NE '(').FTLNR
         STCM  &TYP(1),15,M&N.A+1  PUT A(TOKENLIST) IN TOKEN
         AGO   .FTLPL
.FTLNR   MVC   M&N.A+1(4),&TYP     PUT A(TOKENLIST) IN TOKEN
.FTLPL   LA    1,M&N.A             STORE A(TOKEN) IN LIST
         ST    1,MSG+&O            STORE A(TOKEN) IN LIST
         MEXIT
***********************************************************************
.FTLBY   AIF   ('&FORMAT' NE '').FERR1
         MNOTE 8,'FORMAT REQUIRED FOR INSERT'
         MEXIT
.FERR1   MNOTE 8,'&FORMAT NOT AN INSERT FORMAT'
         MEXIT
.INSBY   AIF   ('&CLASS' NE 'FILE').FILEBY
.**********************************************************************
.* FILE MESSAGE                                                       *
.**********************************************************************
&O       SETA  &O-4                LAST ADDRESS USED
         OI    MSG+&O,X'80'        SET END OF LIST
         LA    1,MSG               POINT AT LIST AND
         DFH99M INVOKE,DFH99MP     PASS IT TO MSGPROC
&M1      SETB  0                   SHOW MESSAGE COMPLETE
         MEXIT
.FILEBY  MNOTE 8,'&CLASS INVALID, MESSAGE ABANDONED'
&M1      SETB  0
         MEXIT
.M99B    AIF   ('&CLASS' NE 'INVOKE').M99C
.**********************************************************************
.*       INVOKE - CALL ANOTHER ROUTINE, OPTIONALLY PASSING PARMS      *
.*                                    ( PARMLIST IN AUTO )            *
.**********************************************************************
         AIF   ('&NAME' EQ '').NMBY
&NAME    DS    0H
.NMBY    AIF   ('&TYP' NE '').CONT   ENTRY MUST BE PROVIDED
         MNOTE 8,'ENTRY NAME MISSING'
         MEXIT
.CONT    AIF   ('&OP' EQ '').USER1  ASSUME R1 SET IF &OP OMITTED
         AIF   ('&TYP'(1,1) NE '(').CONT1
         MNOTE 8,'PARMS NOT ALLOWED WITH EP IN REG'
         AGO   .USER1              GO DO CALL
.CONT1   ANOP
&NP      SETA  N'&OP               NUMBER OF PARMS
&E4      SETC  '&TYP'(1,4)         1ST 4 CHARS OF ENTRY NAME
&PN      SETC  '&E4.&SYSNDX'       PARMLIST NAME
&PN      DFH99M AUTO,&NP.A         DEFINE PARMLIST
.* LOOP FOR EACH PARM, STORING IN PARMLIST
&CP      SETA  1                   START AT PARM 1
&OF      SETA  0                   .. AND OFFSET 0
.LOOP    AIF   (&CP GT &NP).PLBY
.* EACH PARM MAY BE STORAGE, INDIRECT STORAGE, OR REGISTER
         AIF   ('&OP(&CP)'(1,1) EQ '(').PREG
         AIF   ('&OP(&CP)'(1,1) NE '>').STG
.* INDIRECT STORAGE PARAMETER
&PML     SETA  K'&OP(&CP)-1
&PMN     SETC  '&OP(&CP)'(2,&PML)   REMOVE THE '>'
         MVC   &PN+&OF.(4),&PMN    MOVE INDIRECT ADDR TO PARMLIST.
         AGO   .NEXTP
.* STORAGE PARAMETER
.STG     LA    1,&OP(&CP)          PUT PARM ADDR ..
         ST    1,&PN+&OF           .. IN PARMLIST.
         AGO   .NEXTP
.* REGISTER PARAMETER
.PREG    ST    &OP(&CP),&PN+&OF    STORE REG IN PARMLIST.
.NEXTP   ANOP
&OF      SETA  &OF+4               BUMP PARMLIST OFFSET
&CP      SETA  &CP+1               BUMP TO NEXT PARM
         AGO   .LOOP
.* ADDRESS PARMLIST
.PLBY    LA    1,&PN
.* GENERATE CALL
.USER1   AIF   ('&TYP'(1,1) NE '(').VCON
         AIF   ('&TYP(1)' EQ '15').CALL
         LR    15,&TYP(1)
         AGO   .CALL
.VCON    L     15,=V(&TYP)
.CALL    BALR  14,15
         MEXIT
.M99C    AIF   ('&CLASS' NE 'PROLOG').M99D
.**********************************************************************
.*       PROLOG - ENTRY SEQUENCE FOR ALL MODULES, PLUS DSECTS         *
.**********************************************************************
&NAME    CSECT
&R(1)    SETC  'R4'
&R(2)    SETC  'R5'
&R(3)    SETC  'R6'
&R(4)    SETC  'R7'
&R(5)    SETC  'R8'
&R(6)    SETC  'R9'
&R(7)    SETC  'R10'
&R(8)    SETC  'R11'
&NR      SETA  (N'&REGS)
&IR      SETA  1
&ER      SETA  1
         AIF   ('&PARMS' EQ 'NO').PARMRBY
&R(1)    SETC  'PARMR'
&ER      SETA  2
.PARMRBY ANOP
.RLIST   AIF   (&IR GT &NR).RGEN
         AIF   (&ER LT 9).NXTR
         MNOTE 8,'MORE THAN 8 REGISTERS, EXCESS DROPPED'
         AGO   .RGEN
.NXTR    ANOP
&R(&ER)  SETC  '&REGS(&IR)'
&ER      SETA  &ER+1
&IR      SETA  &IR+1
         AGO   .RLIST
.RGEN    ANOP
***********************************************************************
* REGISTER EQUATES                                                    *
***********************************************************************
BASE     EQU   2
COMMR    EQU   3
&R(1)    EQU   4
&R(2)    EQU   5
&R(3)    EQU   6
&R(4)    EQU   7
&R(5)    EQU   8
&R(6)    EQU   9
&R(7)    EQU   10
&R(8)    EQU   11
&N4      SETC  '&NAME'(6,2)
         EJECT
***********************************************************************
* GLOBAL COMMUNICATIONS REGION                                        *
***********************************************************************
COMM     DSECT
         USING *,COMMR             ADDRESSABLE BY ALL MODULES
COMMNAME DS    CL4 SET BY MAIN     EYECATCHER 'COMM'
*                               ***************************************
*                               * DYNALLOC PARAMETER LIST
*                               ***************************************
RBPTR    DS    A SET BY MAIN       -> DYNALLOC REQ BLK
RB       DS    CL20                DYNALLOC REQ BLK
TUPLIX   DS    F SET BY MAIN       INDEX INTO TUPL
*               USE/SET BY KEYOPND
TUSPACE  DS    A SET BY MAIN       -> NEXT AVAILABLE BYTE OF STORAGE
*                                     FOR BUILDING TEXT UNIT
*                USE/SET BY KEYOPND AND VALUE PROCESSING ROUTINES
TUSPEND  DS    A SET BY MAIN       -> END OF TEXT UNIT SPACE
*                USE BY KEYOPND AND VALUE PROCESSING ROUTINES
TULEN    DS    F                   SIZE OF CURRENT TEXT UNIT
*                USE/SET BY KEYOPND AND VALUE PROCESSING ROUTINES
*                               ***************************************
*                               * DISPLAY SCREEN CHARACTERISTICS
*                               ***************************************
SCRNHT   DS    H SET BY MAIN       DISPLAY SCREEN HEIGHT
SCRNWD   DS    H SET BY MAIN       DISPLAY SCREEN WIDTH
SCRBUFSZ DS    F SET BY MAIN       SIZE OF SCREEN BUFFER
SCRBUFI  DS    A SET BY MAIN       A(INPUT PART OF BUFFER)
SCRBUFO  DS    A SET BY MAIN       A(OUTPUT PART OF BUFFER)
OUTBUFD  DS    A SET BY MSGPROC    A(DATA PART OF OUTPUT BUFFER)
INBUFU   DS    H USE/SET BY GETIN  INPUT  BUFFER LENGTH USED
OUTBUFSZ DS    H SET BY MSGPROC    OUTPUT BUFFER LENGTH TO WRITE
INSBA    DS    H SET BY MAIN       KEEP THESE TOGETHER..
OUTSBA   DS    H SET BY MAIN       ..SO THEY CAN BE TRANSLATED
INLINES  DS    F SET BY MAIN       NUMBER OF INPUT LINES ALLOCATED
OUTLINES DS    F SET BY MAIN       NUMBER OF OUTPUT LINES ALLOCATED
OUTUSED  DS    H USE/SET BY TXTPUT NUMBER OF OUTPUT LINES FILLED
OUTBUFU  DS    H USE/SET BY TXTPUT AMOUNT USED ON CURRENT LINE
*                RESET BY MAIN, FOR REUSE OF OUTPUT AREA
*                               ***************************************
*                               * TEXT AND TOKEN PROCESSING
*                               ***************************************
TXTSTART DS    A SET BY GETIN      -> START OF INPUT COMMAND
TXTEND   DS    A SET BY GETIN      -> LAST CHAR OF INPUT COMMAND
KWDCOUNT DS    F SET BY TOKENISE   NUMBER OF LEVEL 1 KEYWORD OPNDS
*                                  (= NUMBER OF TEXT UNITS + 1)
FIRSTOK  DS    A SET BY MAIN       -> FIRST TOKEN
TOKADDR  DS    A SET BY MAIN       -> CURRENT TOKEN
*                               ***************************************
*                               * KEYSET POINTERS
*                               ***************************************
VBKSET   DS    A SET BY MAIN       -> VERB KEYSET
VERB     DS    A SET BY FNCPROC    -> VERB ENTRY IN VERB KEYSET
OPKSET   DS    A SET BY FNCPROC    -> OPERAND KEYSET FOR THIS VERB
OPERAND  DS    A SET BY KEYOPND    -> CURRENT OPERAND KEYSET ENTRY
*                USE BY VALUE PROCESSING ROUTINES
DESCR    DS    A SET BY KEYOPND    -> CURRENT OPERAND DESCRIPTION
*                USE BY VALUE PROCESSING ROUTINES
*                               ***************************************
*                               * MESSAGE PROCESSING
*                               ***************************************
MSG      DS    10A                 PARMLIST TO MSGPROC
*                SET BY BLDMSG MACRO, USE BY MSGPROC
SEVERITY DS    X SET BY BLDMSG     HIGHEST SEVERITY MESSAGE SO FAR
*                               ***************************************
*                               * PROCESSING VECTOR
*                               ***************************************
STATF1   DS    X                   STATIC FLAGS
DCSAOK   EQU   X'80'               SUBTASK CODE AVAILABLE   @01270 @D1C
INITERAS EQU   X'40'               SCREEN HAS BEEN INITIALLY ERASED
EOJ      EQU   X'20'               TRANSACTION ENDING
DYNF1    DS    X                   DYNAMIC FLAGS
SVC99    EQU   X'80'               SVC99 WAS ISSUED
NOSVC99  EQU   X'40'               DO NOT ISSUE SVC, ? IN COMMAND.
         DS    X                   RESERVED
*                               ***************************************
*                               * RETURNED VALUE PROCESSING
*                               ***************************************
RETHEAD  DS    A                   HEAD OF RETURNED VALUE CHAIN
*                SET BY FNCPROC, USING CHAINRET MACRO
RETTAIL  DS    A                   TAIL OF RETURNED VALUE CHAIN
*                SET BY FNCPROC, USING CHAINRET MACRO
*                               ***************************************
COMML    EQU   *-COMM              LENGTH OF COMM
         EJECT
***********************************************************************
* OPERAND DESCRIPTION TABLE ENTRY                                     *
***********************************************************************
DESCRIPT DSECT
DSCOMM   DS    0F                COMMON SECTION
DSFLAG   DS    B                 TYPE FLAG
DSVAL    EQU   X'80'             VALUE OPERAND
DSRET    EQU   X'40'             VALUE RETURNED WITH THIS KEY
DSALLOW  EQU   X'20'             VALUE ALLOWED | NOT ALLOWED
DSREQ    EQU   X'10'             VALUE REQUIRED | OPTIONAL
DSMULT   EQU   X'08'             VALUE MAY BE MULTIPLE | ONLY SINGLE
DSRTN    EQU   X'04'             EXPLICIT PROCESSING ROUTINE
DSKEYSTR EQU   X'02'             KEYSTRING - EACH CHAR IS A KEYWORD
DSRES2   EQU   X'01'             RESERVED
***********************************************************************
DSVALUE  EQU   *                 VALUE SECTION
DSVTYPE  DS    AL1               CONVERTED VALUE TOKEN TYPE
DSMAX    DS    AL1               MAXIMUM LENGTH IF STRING TYPE
DSMIN    DS    AL1               MINIMUM LENGTH IF STRING TYPE
DSARTN   DS    VL3               PROCESSING ROUTINE IF EXPLICIT
***********************************************************************
         ORG   DSVALUE
DSKEYWD  EQU   *                 KEYWORD SECTION
DSKTYPE  DS    AL1               CODED VALUE TOKEN TYPE
DSKEYSET EQU   *                 KEYWORD SET STARTS HERE
* THE KEYWORDS ARE MAPPED BY THE KEYSET DSECT (UNALIGNED)
         EJECT
***********************************************************************
* MAP OF AN ENTRY IN A KEYWORD SET (FUNCTION,KEYWORD,OPERAND)         *
***********************************************************************
KEYSET   DSECT
KSTOK    DS    AL1               TOKEN TYPE
KSKWL    DS    AL1               KEYWORD LENGTH
KSKWD    DS    CL8               KEYWORD
KSCKW    DS    XL2               CODED VALUE
KSPTR    DS    A                 PTR TO NEXT LEVEL
KSNEXT   EQU   *                 NEXT ENTRY STARTS HERE
KSEL     EQU   *-KEYSET          ENTRY LENGTH
         EJECT
         DFH99M TOKDEF
         EJECT
         AIF   ('&MAP' NE 'S99').S99BY
         IEFZB4D0
         EJECT
         IEFZB4D2
         EJECT
.S99BY   AIF   ('&PARMS' EQ 'NO').PDSCTBY
***********************************************************************
* INCOMING PARAMETER LIST                                             *
***********************************************************************
&N4.PRMS DSECT
&IR      SETA  1
.PRMLOOP AIF   (&IR GT N'&PARMS).PDSCTBY
&PARMS(&IR) DS    A
&IR      SETA  &IR+1
         AGO   .PRMLOOP
.PDSCTBY ANOP
.**********************************************************************
.* IF SA=NO, DO NOT USE COMMAND LEVEL PROLOG, THIS ROUTINE IS NOT     *
.* GOING TO CALL ANYTHING, AND HAS NO DFHEISTG.                       *
.**********************************************************************
&NOAUTO  SETB  ('&SA' EQ 'NO')
         AIF   (&NOAUTO).NOEIENT
         DFHEISTG
***********************************************************************
*           E N T R Y           P O I N T                             *
***********************************************************************
&NAME    DFHEIENT CODEREG=(BASE),DATAREG=(13),EIBREG=(12)
         AGO   .PQ
.NOEIENT ANOP  ,
***********************************************************************
*           E N T R Y           P O I N T                             *
***********************************************************************
         USING &NAME,BASE
&NAME    CSECT
         SAVE  (14,12)
         LR    BASE,15
.PQ      AIF   ('&PARMS' EQ 'NO').PBY
         LR    PARMR,1             PICK UP PLIST ADDRESS
         USING &N4.PRMS,PARMR
.PBY     MEXIT
.M99D    AIF   ('&CLASS' NE 'EPILOG').M99E
.**********************************************************************
.*       EPILOG - EXIT SEQUENCE FOR ALL MODULES                       *
.**********************************************************************
&NAME    DS    0H
         AIF   (&NOAUTO).NOEIRET   EXEC EPILOG OR NOT?
&NOAUTO  SETB  1                   AUTO NOT ALLOWED AFTER EPILOG
         AIF   ('&RC' EQ '').FRE1  IS RETURN CODE IN A REG
         L     14,4(,13)           ADDRESS HIGHER SAVE AREA
         ST    &RC(1),16(,14)      SAVE RETURN CODE IN R15 SLOT
.FRE1    DFHEIRET
         DFHEIEND
&SYSECT  CSECT
         MEXIT
.NOEIRET AIF   ('&RC' EQ '').FRE2  IS RETURN CODE IN A REG
         ST    &RC(1),16(,13)      SAVE RETURN CODE IN R15 SLOT
.FRE2    RETURN (14,12)
         MEXIT
.M99E    AIF   ('&CLASS' NE 'CHAINRET').M99F
.**********************************************************************
.*       CHAINRET - MANIPULATE RETURNED VALUE CHAIN                   *
.* ADDS AN ENTRY TO THE RETURNED-VALUE CHAIN, WHICH IS ANCHORED       *
.* IN COMM AT RETHEAD AND RETTAIL.                                    *
.*                                                                    *
.* EACH ENTRY CONTAINS                                                *
.*    THE ADDRESS OF A KEYWORD ENTRY IN KEYTAB, ALLOWING ACCESS TO    *
.*                                 THE KEYWORD AND DESCRIPTION.       *
.*    THE ADDRESS OF A TEXT UNIT, GIVING ACCESS TO THE RETURNED       *
.*       VALUE(S). THE PARAMETER TO THE MACRO IS THE REGISTER         *
.*       CURRENTLY ADDRESSING THE TEXTUNIT.                           *
.*    A CHAIN FORWARD TO THE NEXT ENTRY.                              *
.*                                                                    *
.* ENTRIES ARE MAPPED BY THE RETLIST DSECT                            *
.**********************************************************************
         AIF   ('&NAME' EQ '').NAMEBY
&NAME    DS    0H
.NAMEBY  ANOP
         AIF   (&CHRDS).DSECTBY
&CHRDS   SETB  1
         SPACE 3
RETLIST  DSECT ,                   RETURNED VALUE LIST ENTRY
RETKEY   DS    A                   -> KEYWORD ENTRY IN KEYTAB
RETTU    DS    A                   -> TEXTUNIT FOR RETURNED VALUE
RETCHAIN DS    A                   -> NEXT ENTRY OR 0
&SYSECT  CSECT ,
         SPACE 3
.DSECTBY ANOP  ,
         AIF   ('&TYPE' EQ '').ADDON ADD NEW ELEMENT
         AIF   ('&TYPE' NE 'SCAN').MEX JUST DSECT
         ICM   &TYP,15,RETCHAIN    CHAIN FORWARD
.MEX     MEXIT
.ADDON   ANOP
&L       SETC  'CHA&SYSNDX'
* ALLOCATE AND SET NEW CHAIN ENTRY
         DFH99M HEAP,1,12          GET RETLIST ENTRY STORAGE
         USING RETLIST,1           ADDRESS ENTRY
         MVC   RETKEY,OPERAND      SET KEYWORD POINTER
         ST    &TYP,RETTU          SET IN ENTRY
         XC    RETCHAIN,RETCHAIN   CLEAR CHAIN FORWARD
         DROP  1
* ADD ENTRY TO CHAIN
         ICM   15,15,RETTAIL       PICK UP LAST ENTRY, TEST EXISTENCE
         BNZ   &L.A                BR IF ALREADY SOME ENTRY
         ST    1,RETHEAD           SET HEAD
         B     &L.B
         USING RETLIST,15          OLD ENTRY
&L.A     ST    1,RETCHAIN          SET CHAIN FORWARD
         DROP  15
&L.B     ST    1,RETTAIL           SET NEW TAIL
         MEXIT
.M99F    AIF   ('&CLASS' NE 'ERRSTOP').M99G
.**********************************************************************
.*       ERRSTOP - CHECK WHETHER PROCESSING SHOULD CONTINUE           *
.* TESTS HIGHEST ERROR SEVERITY SO FAR AGAINST LEVEL SUPPLIED,        *
.* AND IF HIGH OR EQUAL BRANCHES TO SUPPLIED LABEL.                   *
.**********************************************************************
&M       SETA  8
         AIF   ('&TYP' EQ 'D').T
&M       SETA  4
         AIF   ('&TYP' EQ 'S').T
&M       SETA  2
         AIF   ('&TYP' EQ 'E').T
&M       SETA  1
         AIF   ('&TYP' EQ 'W').T
&M       SETA  0
         MNOTE 4,'UNCONDITIONAL BYPASS FOR LEVEL &TYP'
.T       ANOP
***********************************************************************
* CHECK FOR PRIOR ERRORS TOO SEVERE TO ENTER THE FOLLOWING SECTION    *
***********************************************************************
&NAME    CLI   SEVERITY,&M
         BNL   &OP
         SPACE 1
         MEXIT
.M99G    AIF   ('&CLASS' NE 'HEAP').M99H
.**********************************************************************
.*       HEAP - ALLOCATE HEAP STORAGE                                 *
.* ALLOCATES HEAP STORAGE                                             *
.* LENGTH(HALF WORD)  SET(REGISTER)                                   *
.**********************************************************************
G&SYSNDX DFH99M AUTO,H
&NAME    DS    0H
         AIF   ('&OP'(1,1) EQ '(').REG
         AIF   (T'&OP NE 'U').CONST
         MNOTE 8,'SIZE &OP SHOULD BE CONSTANT OR REGISTER'
         MNOTE *,'   &OP TREATED AS CONSTANT'
.CONST   LA    14,&OP              GET CONSTANT VALUE ..
         STH   14,G&SYSNDX         .. IN HALF WORD.
         AGO   .GETIT
.REG     STH   &OP(1),G&SYSNDX     PUT VALUE IN HALF WORD
.GETIT   EXEC CICS GETMAIN LENGTH(G&SYSNDX) SET(1)
         AIF   ('&TYP' EQ '1').END
         LR    &TYP,1
.END     MEXIT
.M99H    AIF   ('&CLASS' NE 'NEXTOK').M99I
.**********************************************************************
.*       NEXTOK - SCAN TO NEXT TOKEN AND OPTIONALLY TEST ITS TYPE     *
.* DROP THROUGH IF NEXT TOKEN IS NOT ONE OF THOSE TO BE TESTED FOR.   *
.**********************************************************************
&NAME    CLI   0(&TYP),TLP         CHECK FOR TEXT TYPE
         LA    &TYP,1(,&TYP)       BUMP IN CASE SINGLE
         BH    NXT&SYSNDX          AND BRANCH IF IT IS
         SR    14,14
         IC    14,0(,&TYP)         TEXT LENGTH
         LA    &TYP,1(14,&TYP)     BUMP TEXT AND LENGTH
NXT&SYSNDX DS  0H
         AIF   ('&KW' EQ '').KWBY
         CLI   0(&TYP),TKW         IF KEYWORD
         BE    &KW                    THEN BRANCH
.KWBY    AIF   ('&NUM' EQ '').NUMBY
         CLI   0(&TYP),TNUM         IF NUMERIC
         BE    &NUM                   THEN BRANCH
.NUMBY   AIF   ('&LP' EQ '').LPBY
         CLI   0(&TYP),TLP         IF LEFT PAREN
         BE    &LP                    THEN BRANCH
.LPBY    AIF   ('&RP' EQ '').RPBY
         CLI   0(&TYP),TRP         IF RIGHT PAREN
         BE    &RP                    THEN BRANCH
.RPBY    AIF   ('&END' EQ '').ENDBY
         CLI   0(&TYP),TEND        IF END
         BE    &END                   THEN BRANCH
.ENDBY   AIF   ('&HELP' EQ '').HELPBY
         CLI   0(&TYP),THELP       IF HELP
         BE    &HELP                  THEN BRANCH
.HELPBY  MEXIT
.M99I    AIF   ('&CLASS' NE 'STORE').M99J
.**********************************************************************
.*       STORE - SAVE A VALUE GLOBALLY, ONCE ONLY                     *
.* COMMONS VALUES, BY SAVING VALUES AND NAMES IN TABLE.               *
.**********************************************************************
         AIF   ('&NAME' EQ '' OR '&TYP' EQ '').ERR
&I       SETA  0
.SRCH    ANOP  ,
&I       SETA  &I+1                LOOK IN NEXT SLOT
         AIF   (&I GT &STOREI).NOTFND
         AIF   ('&STOREV(&I)' NE '&TYP').SRCH
.* FOUND. RETURN REMEMBERED NAME IN &ANSWER
&ANSWER  SETC  '&STORENM(&I)'
         MEXIT
.* NOT FOUND. SAVE NAME AND VALUE IN NEXT SLOT, UNLESS ARRAY FULL.
.NOTFND  AIF   (&STOREI EQ 256).FULL
&STOREI  SETA  &STOREI+1
&STOREV(&STOREI) SETC '&TYP'       SAVE VALUE
&ANSWER  SETC  '&NAME'             SHOW NAME IS NEW, RETURN IT,
&STORENM(&STOREI) SETC '&ANSWER'   AND SAVE IT.
         MEXIT
.* NAME IS NEW BECAUSE ARRAY IS FULL
.FULL    ANOP  ,
&ANSWER  SETC  '&NAME'
         MEXIT
.ERR     MNOTE 8,'NAME FIELD AND OPERAND BOTH REQUIRED'
         MEXIT
.M99J    AIF   ('&CLASS' NE 'TOKEN').M99K
.**********************************************************************
.*       TOKEN - DEFINE A STATIC TOKEN                                *
.**********************************************************************
&NV      SETA  N'&TYP              NUMBER OF VALUES
         AIF   (&NV GT 0).SOME
         MNOTE 4,'NO OPERAND, NO TOKEN GENERATED'
         MEXIT
.SOME    AIF   (&NV EQ 1).ONE
.* MAKE THE TOKENS THE LIST POINTS TO
&I       SETA  1
.LOOP2   ANOP  ,
&V       SETC  '&TYP(&I)'
&K       SETA  (K'&V)
         AIF   (&K NE 0).NCOMMA
.* MAKE A COMMA FOR AN EMPTY VALUE
&V       SETC  ','
&K       SETA  1
.NCOMMA  ANOP  ,
T&SYSNDX.&I DFH99M STORE,&V
         AIF   ('T&SYSNDX.&I' NE '&ANSWER').NQUOTED OLD NAME
         AIF   ('&V' NE '''(''').QRP
&ANSWER  DC    AL1(TLP)            COUNT OMITTED FOR MSG
         AGO   .NQUOTED
.QRP     AIF   ('&V' NE ''')''').NOTPAR
&ANSWER  DC    AL1(TRP)
         AGO   .NQUOTED
.NOTPAR  ANOP  ,
&ANSWER  DC    AL1(TKW)
         AIF   ('&V'(1,1) EQ '''').QUOTED
         DC    AL1(&K)
         DC    C'&V'
         AGO   .NQUOTED
.QUOTED  ANOP  ,
&K       SETA  &K-2
         DC    AL1(&K)
         DC    C&V
.NQUOTED ANOP  ,
&I       SETA  &I+1
         AIF   (&I LE &NV).LOOP2
.* MAKE THE TOKENLIST, SINCE THERE ARE MULTIPLE VALUES
&NAME    DC    AL1(TLIST),AL4(T&SYSNDX.0)
&TL      SETC  'T&SYSNDX.0'
&I       SETA  1
.LOOP1   ANOP  ,
&V       SETC  '&TYP(&I)'
         AIF   ('&V' NE '').QNAME
&V       SETC  ','
.QNAME   ANOP  ,
T&SYSNDX.&I DFH99M STORE,&V
         AIF   (&I EQ &NV).LAST
&TL      DC    A(&ANSWER)
         AGO   .NOTLAST
.LAST    DC    X'80',AL3(&ANSWER)
.NOTLAST ANOP  ,
&TL      SETC  ''
&I       SETA  &I+1
         AIF   (&I LE &NV).LOOP1
         MEXIT
.ONE     ANOP  ,
&V       SETC  '&TYP(1)'
&NAME    DFH99M STORE,&V
         AIF   ('&NAME' EQ '&ANSWER').MAKETOK
&NAME    DC    AL1(TLIST),AL4(M&SYSNDX.L) MAKE TOKENLIST
M&SYSNDX.L DC  X'80',AL3(&ANSWER)
         MEXIT
.MAKETOK ANOP  ,
&K       SETA  (K'&V)
         AIF   ('&V' NE '''(''').QRP1
&ANSWER  DC    AL1(TLP)            COUNT OMITTED FOR MSG
         AGO   .NQUTED
.QRP1    AIF   ('&V' NE ''')''').NOTPAR1
&ANSWER  DC    AL1(TRP)
         AGO   .NQUTED
.NOTPAR1 ANOP  ,
&NAME    DC    AL1(TKW)
         AIF   ('&V'(1,1) EQ '''').QUTED
         DC    AL1(&K)
         DC    C'&V'
         AGO   .NQUTED
.QUTED   ANOP  ,
&K       SETA  &K-2
         DC    AL1(&K)
         DC    C&V
.NQUTED  ANOP  ,
         MEXIT
.M99K    AIF   ('&CLASS' NE 'TOKDEF').M99L
***********************************************************************
* TOKEN TYPE CODES
***********************************************************************
TKW      EQU   X'00'      T        KEYWORD, CHAR VALUE
TNUM     EQU   X'01'      T        NUMERIC VALUE
TLP      EQU   X'02'      T        LEFT PAREN
THELP    EQU   X'20'      T        ?, HELP REQUESTED
TRP      EQU   X'22'      T        RIGHT PAREN
TLIST    EQU   X'30'      I        TOKENLIST
* LOW 4 BITS OF BINARY TYPE ARE THE ICM/STCM MASK BITS
TBIN1    EQU   X'41'      I        1 BYTE BINARY TOKEN
TBIN2    EQU   X'43'      I        2 BYTE BINARY TOKEN
TBIN3    EQU   X'47'      I        3 BYTE BINARY TOKEN
TBIN4    EQU   X'4F'      I        4 BYTE BINARY TOKEN
THEX1    EQU   X'51'      I        1 BYTE HEX TOKEN
THEX2    EQU   X'52'      I        2 BYTE HEX TOKEN
THEX4    EQU   X'54'      I        4 BYTE HEX TOKEN
TNULL    EQU   X'FE'      I        NULL, DONT KNOW
TEND     EQU   X'FF'      T        END OF TOKEN TEXT
         MEXIT
.M99L    MNOTE 12,'&CLASS NOT RECOGNIZED'
         MEND
