//*******************************************************************
//
// Module Name: ICC$SEM
//
// Description:
//    This sample program demonstrates how to use the IccSemaphore
//    class.
//
//
//
//     Licensed Materials - Property of IBM
//
//     "Restricted Materials of IBM"
//
//     5655-Y04
//
//     (C) Copyright IBM Corp. 1998, 2004"
//
//
//
//
// Status = %SP00
//
//-------------------------------------------------------------------
//
// Change Activity:
//
//   $MOD(ICC$SEM),COMP(CEZANNE),PROD(CICS TS ):
//
//   PN= REASON REL YYMMDD HDXIII : REMARKS
//  $P0= M30492 530 981109 HDGYBS : Creation
//  $P1= M30696 530 981218 HDGYBS : Fix sample c++ programs
//  $P2= D12734 640 041224 HD6KRAH: Language Level
//
//*******************************************************************
#include "icceh.hpp"  //CICS C++ Foundation Classes header files
#include "iccmain.hpp"  //CICS C++ Foundation Classes main() stub
#include <stdio.h>

void IccUserControl::run()
{
  IccTerminal* term = terminal();  //access terminal
  term->erase();  //clear terminal.
  term->sendLine("This is program 'icc$sem'...");

  const char* memLoc = "any old data: its the address that counts!!";

  //construct semaphore using value - in this case "AbraCadabra" ...
  term->sendLine( "Constructing IccSemaphore (lock by value)...");
  IccSemaphore semaphore1( "AbraCadabra", IccSemaphore::byValue );

  term->sendLine( "Issuing lock request...");

  semaphore1.lock();  //lock semaphore

  term->sendLine( 30,"<%s>", semaphore1.conditionText());

  term->sendLine( "Issuing unlock request...");

  semaphore1.unlock();  //unlock semaphore

  term->sendLine( 30, "<%s>", semaphore1.conditionText());

  //construct semaphore using an address...
  term->sendLine( "Constructing Semaphore object (lock by address)...");
  IccSemaphore semaphore2( memLoc, IccSemaphore::byAddress );

  term->sendLine( "Issuing tryLock request...");

  Icc::Bool test = semaphore2.tryLock();  //try to lock semaphore
  term->sendLine( 30,"<%s>", semaphore2.conditionText());
  if ( test == Icc::yes)                                        //@P2C
  {
    //do some work here... then unlock the semaphore...
    term->sendLine( "Issuing unlock request...");
    semaphore2.unlock();  //unlock semaphore
    term->sendLine( 30,"<%s>", semaphore2.conditionText());
  }

  term->send( 24,1,"Program 'icc$sem' complete: Hit PF12 to End");
  term->waitForAID( IccTerminal::PF12 );
  term->erase();
  term->freeKeyboard();

  return;  //Return control to CICS.
};
